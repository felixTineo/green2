webpackHotUpdate("static/development/pages/index.js",{

/***/ "./components/main/layout.jsx":
/*!************************************!*\
  !*** ./components/main/layout.jsx ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/defineProperty */ "./node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_corejs2_core_js_object_keys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime-corejs2/core-js/object/keys */ "./node_modules/@babel/runtime-corejs2/core-js/object/keys.js");
/* harmony import */ var _babel_runtime_corejs2_core_js_object_keys__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs2_core_js_object_keys__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/objectSpread */ "./node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread.js");
/* harmony import */ var _babel_runtime_corejs2_regenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime-corejs2/regenerator */ "./node_modules/@babel/runtime-corejs2/regenerator/index.js");
/* harmony import */ var _babel_runtime_corejs2_regenerator__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs2_regenerator__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/asyncToGenerator */ "./node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator.js");
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! styled-jsx/style */ "./node_modules/styled-jsx/style.js");
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var _store_actions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../store/actions */ "./store/actions.js");
/* harmony import */ var _base_scss__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./base.scss */ "./components/main/base.scss");
/* harmony import */ var _base_scss__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_base_scss__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/head */ "./node_modules/next/dist/next-server/lib/head.js");
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _header__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./header */ "./components/main/header.jsx");
/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./menu */ "./components/main/menu.jsx");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/router */ "./node_modules/next/dist/client/router.js");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var reactstrap__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! reactstrap */ "./node_modules/reactstrap/es/index.js");
/* harmony import */ var _layout_var__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../layout/var */ "./layout/var.js");
/* harmony import */ var _main_title__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../main/title */ "./components/main/title.jsx");






var __jsx = react__WEBPACK_IMPORTED_MODULE_6___default.a.createElement;


 //import '../../node_modules/bootstrap/scss/bootstrap.scss';











var Login = function Login(_ref) {
  var prim = _ref.prim,
      title = _ref.title;

  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])(''),
      mail = _useState[0],
      setMail = _useState[1];

  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])(''),
      pass = _useState2[0],
      setPass = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])(false),
      mailPop = _useState3[0],
      setMailPop = _useState3[1];

  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])(false),
      passPop = _useState4[0],
      setPassPop = _useState4[1];

  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])(false),
      disable = _useState5[0],
      setDisable = _useState5[1];

  var onSubmit =
  /*#__PURE__*/
  function () {
    var _ref2 = Object(_babel_runtime_corejs2_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_4__["default"])(
    /*#__PURE__*/
    _babel_runtime_corejs2_regenerator__WEBPACK_IMPORTED_MODULE_3___default.a.mark(function _callee(e) {
      var data, res;
      return _babel_runtime_corejs2_regenerator__WEBPACK_IMPORTED_MODULE_3___default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              e.preventDefault();
              setDisable(true);
              data = {
                mail: mail,
                pass: pass
              };
              _context.next = 6;
              return axios__WEBPACK_IMPORTED_MODULE_14___default.a.post('/user/login', data);

            case 6:
              res = _context.sent;

              if (!(res.data === 'mail')) {
                _context.next = 10;
                break;
              }

              setMailPop(true);
              return _context.abrupt("return", setDisable(false));

            case 10:
              if (!(res.data === 'pass')) {
                _context.next = 13;
                break;
              }

              setPassPop(true);
              return _context.abrupt("return", setDisable(false));

            case 13:
              ;
              next_router__WEBPACK_IMPORTED_MODULE_13___default.a.push("/perfil/".concat(res.data));
              _context.next = 20;
              break;

            case 17:
              _context.prev = 17;
              _context.t0 = _context["catch"](0);
              console.log(_context.t0);

            case 20:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 17]]);
    }));

    return function onSubmit(_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  return __jsx("form", {
    onSubmit: onSubmit,
    method: "POST",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["963076289", [prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, __jsx("header", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["963076289", [prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, __jsx("h1", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["963076289", [prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, "Iniciar Sesion")), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["963076289", [prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]]) + " " + "body"
  }, __jsx("label", {
    htmlFor: "mail",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["963076289", [prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, __jsx("p", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["963076289", [prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, "Usuario"), __jsx("input", {
    disabled: disable,
    onFocus: function onFocus() {
      return setMailPop(false);
    },
    value: mail,
    onChange: function onChange(e) {
      return setMail(e.currentTarget.value);
    },
    type: "text",
    id: "mail",
    name: "mail",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["963076289", [prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }), __jsx(reactstrap__WEBPACK_IMPORTED_MODULE_15__["Popover"], {
    target: "mail",
    placement: "right",
    isOpen: mailPop
  }, __jsx(reactstrap__WEBPACK_IMPORTED_MODULE_15__["PopoverBody"], null, "El correo no es valido"))), __jsx("label", {
    htmlFor: "pass",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["963076289", [prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, __jsx("p", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["963076289", [prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, "contrase\xF1a"), __jsx("input", {
    disabled: disable,
    onFocus: function onFocus() {
      return setPassPop(false);
    },
    value: pass,
    onChange: function onChange(e) {
      return setPass(e.currentTarget.value);
    },
    type: "password",
    name: "pass",
    id: "pass",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["963076289", [prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }), __jsx(reactstrap__WEBPACK_IMPORTED_MODULE_15__["Popover"], {
    target: "pass",
    placement: "right",
    isOpen: passPop
  }, __jsx(reactstrap__WEBPACK_IMPORTED_MODULE_15__["PopoverBody"], null, "La contrase\xF1a no es valida")))), __jsx("footer", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["963076289", [prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, disable ? __jsx(reactstrap__WEBPACK_IMPORTED_MODULE_15__["Spinner"], {
    color: title === 'siembra' ? 'main-green' : title === 'ayuda' ? 'main-red' : 'main-blue'
  }) : __jsx("button", {
    disabled: disable,
    type: "submit",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["963076289", [prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, "Login")), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a, {
    id: "963076289",
    dynamic: [prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]
  }, "form.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:100%;}header.__jsx-style-dynamic-selector{color:".concat(prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, ";margin-top:.5rem;}.body.__jsx-style-dynamic-selector{width:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}label.__jsx-style-dynamic-selector:nth-child(1){margin-bottom:1rem;}label.__jsx-style-dynamic-selector p.__jsx-style-dynamic-selector{margin:0;color:rgba(0,0,0,.2);}input.__jsx-style-dynamic-selector{border:none;border-bottom:2px solid rgba(0,0,0,.2);}input.__jsx-style-dynamic-selector:focus{outline:none;border-color:").concat(prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, ";}footer.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;padding:.5rem;}button.__jsx-style-dynamic-selector{background:transparent;border:2px solid ").concat(prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, ";text-transform:uppercase;-webkit-transition:250ms ease;transition:250ms ease;color:").concat(prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, ";}button.__jsx-style-dynamic-selector:focus{outline:none;}button.__jsx-style-dynamic-selector:hover{background:").concat(prim || _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, ";color:#fff;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2ZlbGl4L0RvY3VtZW50b3MvcHJvamVjdHMvZ3JlZW5saW5rL2NvbXBvbmVudHMvbWFpbi9sYXlvdXQuanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFFa0IsQUFHd0IsQUFPc0IsQUFJeEIsQUFPUSxBQUdWLEFBSUcsQUFJQyxBQUlBLEFBTVUsQUFPVixBQUcyQixTQTNCaEIsRUFWWCxDQWM2QixDQUlBLEFBaUI1QyxNQTVCQSxJQXFCZ0QsT0FqQmhELEtBZm1CLEtBMENOLFdBdkJiLEFBd0JBLENBMUNBLEdBc0JBLGNBVTJCLEtBeENILEFBaUNYLFdBckJXLEFBc0JHLFNBT0gsb0RBQ2EsTUF6Q0wsV0FZUCxrQkE4QnpCLENBUmdCLGNBQ2hCLGtFQXRCcUIsS0FaQSx3RkFhckIsS0FaYyxZQUNkIiwiZmlsZSI6Ii9ob21lL2ZlbGl4L0RvY3VtZW50b3MvcHJvamVjdHMvZ3JlZW5saW5rL2NvbXBvbmVudHMvbWFpbi9sYXlvdXQuanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZHVjZXIgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBPTl9FVkVOVCB9IGZyb20gJy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuLy9pbXBvcnQgJy4uLy4uL25vZGVfbW9kdWxlcy9ib290c3RyYXAvc2Nzcy9ib290c3RyYXAuc2Nzcyc7XG5pbXBvcnQgJy4vYmFzZS5zY3NzJztcbmltcG9ydCBIZWFkIGZyb20gJ25leHQvaGVhZCc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4vaGVhZGVyJztcbmltcG9ydCBNZW51IGZyb20gJy4vbWVudSc7XG5pbXBvcnQgUm91dGVyIGZyb20gJ25leHQvcm91dGVyJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBQb3BvdmVyLCBQb3BvdmVyQm9keSwgU3Bpbm5lciwgTW9kYWwgfSBmcm9tICdyZWFjdHN0cmFwJztcbmltcG9ydCB7IGNvbG9yLCBmb250IH0gZnJvbSAnLi4vLi4vbGF5b3V0L3Zhcic7XG5pbXBvcnQgVGl0bGUgZnJvbSAnLi4vbWFpbi90aXRsZSc7XG5cbmNvbnN0IExvZ2luID0gKHsgcHJpbSwgdGl0bGUgfSkgPT4ge1xuXG4gIGNvbnN0IFttYWlsLCBzZXRNYWlsXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3Bhc3MsIHNldFBhc3NdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbbWFpbFBvcCwgc2V0TWFpbFBvcF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtwYXNzUG9wLCBzZXRQYXNzUG9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2Rpc2FibGUsIHNldERpc2FibGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IG9uU3VibWl0ID0gYXN5bmMoZSkgPT4ge1xuICAgIHRyeXtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHNldERpc2FibGUodHJ1ZSk7XG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBtYWlsLFxuICAgICAgICBwYXNzXG4gICAgICB9XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5wb3N0KCcvdXNlci9sb2dpbicsIGRhdGEpO1xuICAgICAgaWYocmVzLmRhdGEgPT09ICdtYWlsJykge1xuICAgICAgICAgc2V0TWFpbFBvcCh0cnVlKTtcbiAgICAgICAgIHJldHVybiBzZXREaXNhYmxlKGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGlmKHJlcy5kYXRhID09PSAncGFzcycpe1xuICAgICAgICBzZXRQYXNzUG9wKHRydWUpXG4gICAgICAgIHJldHVybiBzZXREaXNhYmxlKGZhbHNlKTtcbiAgICAgIH07XG4gICAgICBSb3V0ZXIucHVzaChgL3BlcmZpbC8ke3Jlcy5kYXRhfWApO1xuICAgIH1jYXRjaChlKXtcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybihcbiAgICA8Zm9ybSBvblN1Ym1pdD17b25TdWJtaXR9IG1ldGhvZD1cIlBPU1RcIj5cbiAgICAgIDxoZWFkZXI+PGgxPkluaWNpYXIgU2VzaW9uPC9oMT48L2hlYWRlcj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm9keVwiPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj1cIm1haWxcIj5cbiAgICAgICAgICA8cD5Vc3VhcmlvPC9wPlxuICAgICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gb25Gb2N1cz17KCk9PiBzZXRNYWlsUG9wKGZhbHNlKX0gdmFsdWU9e21haWx9IG9uQ2hhbmdlPXsoZSk9PiBzZXRNYWlsKGUuY3VycmVudFRhcmdldC52YWx1ZSl9IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJtYWlsXCIgbmFtZT1cIm1haWxcIi8+XG4gICAgICAgICAgPFBvcG92ZXIgdGFyZ2V0PVwibWFpbFwiIHBsYWNlbWVudD1cInJpZ2h0XCIgaXNPcGVuPXttYWlsUG9wfT5cbiAgICAgICAgICAgIDxQb3BvdmVyQm9keT5FbCBjb3JyZW8gbm8gZXMgdmFsaWRvPC9Qb3BvdmVyQm9keT5cbiAgICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPVwicGFzc1wiPlxuICAgICAgICAgIDxwPmNvbnRyYXNlw7FhPC9wPlxuICAgICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gb25Gb2N1cz17KCk9PiBzZXRQYXNzUG9wKGZhbHNlKX0gdmFsdWU9e3Bhc3N9IG9uQ2hhbmdlPXsoZSk9PiBzZXRQYXNzKGUuY3VycmVudFRhcmdldC52YWx1ZSl9IHR5cGU9XCJwYXNzd29yZFwiIG5hbWU9XCJwYXNzXCIgaWQ9XCJwYXNzXCIvPlxuICAgICAgICAgIDxQb3BvdmVyIHRhcmdldD1cInBhc3NcIiBwbGFjZW1lbnQ9XCJyaWdodFwiIGlzT3Blbj17cGFzc1BvcH0+XG4gICAgICAgICAgICA8UG9wb3ZlckJvZHk+TGEgY29udHJhc2XDsWEgbm8gZXMgdmFsaWRhPC9Qb3BvdmVyQm9keT5cbiAgICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxmb290ZXI+XG4gICAgICAgIHtcbiAgICAgICAgICBkaXNhYmxlID8gPFNwaW5uZXIgY29sb3I9eyB0aXRsZSA9PT0gJ3NpZW1icmEnID8gJ21haW4tZ3JlZW4nIDogdGl0bGUgPT09ICdheXVkYScgPyAnbWFpbi1yZWQnIDogJ21haW4tYmx1ZScgfSAvPiA6IDxidXR0b24gZGlzYWJsZWQ9e2Rpc2FibGV9IHR5cGU9XCJzdWJtaXRcIj5Mb2dpbjwvYnV0dG9uPlxuICAgICAgICB9XG4gICAgICA8L2Zvb3Rlcj5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgZm9ybXtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlcntcbiAgICAgICAgICBjb2xvcjogJHtwcmltIHx8IGNvbG9yLnByaW19O1xuICAgICAgICAgIG1hcmdpbi10b3A6IC41cmVtO1xuICAgICAgICB9XG4gICAgICAgIC5ib2R5e1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIGxhYmVsOm50aC1jaGlsZCgxKXtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgICAgICB9XG4gICAgICAgIGxhYmVsIHB7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIC4yKTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dHtcbiAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgLjIpO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0OmZvY3Vze1xuICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgICAgYm9yZGVyLWNvbG9yOiAke3ByaW0gfHwgY29sb3IucHJpbX07XG4gICAgICAgIH1cbiAgICAgICAgZm9vdGVye1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgICBwYWRkaW5nOiAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b257XG4gICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgYm9yZGVyOiAycHggc29saWQgJHtwcmltIHx8IGNvbG9yLnByaW19O1xuICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgICAgdHJhbnNpdGlvbjogMjUwbXMgZWFzZTtcbiAgICAgICAgICBjb2xvcjogJHtwcmltIHx8IGNvbG9yLnByaW19O1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpmb2N1c3tcbiAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpob3ZlcntcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAke3ByaW0gfHwgY29sb3IucHJpbX07XG4gICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvZm9ybT5cbiAgKVxufVxuXG5jb25zdCBSZWdpc3RlciA9ICgpID0+IHtcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VSZWR1Y2VyKChzdGF0ZSwgbmV4dCkgPT4gKHsgLi4uc3RhdGUsIC4uLm5leHQgfSkse1xuICAgIG5hbWU6ICcnLFxuICAgIGxhc3ROYW1lOiAnJyxcbiAgICBtYWlsOiAnJyxcbiAgICBwYXNzOiAnJyxcbiAgICBiaXJ0aGRheTogJycsXG4gICAgZ2VucmU6ICdNdWplcicsXG4gIH0pXG4gIGNvbnN0IFtkaXNhYmxlLCBzZXREaXNhYmxlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW21haWxQb3AsIHNldE1haWxQb3BdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IG9uU3VibWl0ID0gYXN5bmMoZSkgPT4ge1xuICAgIHRyeXtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IGRhdGEgPSB2YWx1ZTtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLnBvc3QoJy91c2VyL3JlZ2lzdGVyJywgZGF0YSk7XG4gICAgICBpZihyZXMuZGF0YSA9PT0gJ21haWwnKXtcbiAgICAgICAgc2V0TWFpbFBvcCh0cnVlKTtcbiAgICAgICAgcmV0dXJuIHNldERpc2FibGUoZmFsc2UpO1xuICAgICAgfVxuICAgICAgUm91dGVyLnB1c2goYC9wZXJmaWwvJHtyZXMuZGF0YX1gKTtcbiAgICB9Y2F0Y2goZSl7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4oXG4gICAgPGZvcm0gb25TdWJtaXQ9e29uU3VibWl0fSBtZXRob2Q9XCJQT1NUXCI+XG4gICAgICA8aGVhZGVyPjxoMT5SZWdpc3RybzwvaDE+PC9oZWFkZXI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmdWxsTmFtZVwiPlxuICAgICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gdmFsdWU9e3ZhbHVlLm5hbWV9IG9uQ2hhbmdlID0geyhlKT0+IHNldFZhbHVlKHsgbmFtZTogZS5jdXJyZW50VGFyZ2V0LnZhbHVlIH0pfSB0eXBlPVwidGV4dFwiIGlkPVwibmFtZVwiIHBsYWNlaG9sZGVyPVwiTm9tYnJlXCIvPlxuICAgICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gdmFsdWU9e3ZhbHVlLmxhc3ROYW1lfSBvbkNoYW5nZSA9IHsoZSk9PiBzZXRWYWx1ZSh7IGxhc3ROYW1lOiBlLmN1cnJlbnRUYXJnZXQudmFsdWUgfSl9IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJsYXN0TmFtZVwiIHBsYWNlaG9sZGVyPVwiQXBlbGxpZG9cIi8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8aW5wdXQgZGlzYWJsZWQ9e2Rpc2FibGV9IHZhbHVlPXt2YWx1ZS5tYWlsfSBvbkNoYW5nZSA9IHsoZSk9PiBzZXRWYWx1ZSh7IG1haWw6IGUuY3VycmVudFRhcmdldC52YWx1ZSB9KX0gb25Gb2N1cz17KCk9PiBzZXRNYWlsUG9wKGZhbHNlKX0gdHlwZT1cInRleHRcIiBpZD1cIm1haWxcIiBwbGFjZWhvbGRlcj1cIkNvcnJlbyBlbGVjdHLDs25pY29cIi8+XG4gICAgICAgIDxQb3BvdmVyIHBsYWNlbWVudD1cImJvdHRvbVwiIHRhcmdldD1cIm1haWxcIiBpc09wZW49e21haWxQb3B9PlxuICAgICAgICAgIDxQb3BvdmVyQm9keT5ZYSBleGlzdGUgdW5hIGN1ZW50YSBjb24gZXN0ZSBjb3JyZW88L1BvcG92ZXJCb2R5PlxuICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gdmFsdWU9e3ZhbHVlLnBhc3N9IG9uQ2hhbmdlID0geyhlKT0+IHNldFZhbHVlKHsgcGFzczogZS5jdXJyZW50VGFyZ2V0LnZhbHVlIH0pfSB0eXBlPVwicGFzc3dvcmRcIiBpZD1cInBhc3NcIiBwbGFjZWhvbGRlcj1cImNvbnRyYXNlw7FhXCIvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJpcnRoX3NleFwiPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiYmlydGhkYXlcIj5cbiAgICAgICAgICAgIDxwPkN1bXBsZWHDsW9zPC9wPlxuICAgICAgICAgICAgPGlucHV0IGRpc2FibGVkPXtkaXNhYmxlfSB2YWx1ZT17dmFsdWUuYmlydGhkYXl9IG9uQ2hhbmdlID0geyhlKT0+IHNldFZhbHVlKHsgYmlydGhkYXk6IGUuY3VycmVudFRhcmdldC52YWx1ZSB9KX0gdHlwZT1cImRhdGVcIiBuYW1lPVwiYmlydGhkYXlcIiBpZD1cImJpcnRoZGF5XCIvPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJnZW5yZVwiPlxuICAgICAgICAgICAgPHA+R2VuZXJvPC9wPlxuICAgICAgICAgICAgPHNlbGVjdCBkaXNhYmxlZD17ZGlzYWJsZX0gdmFsdWU9e3ZhbHVlLmdlbnJlfSBvbkNoYW5nZSA9IHsoZSk9PiBzZXRWYWx1ZSh7IGdlbnJlOiBlLmN1cnJlbnRUYXJnZXQudmFsdWUgfSl9IG5hbWU9XCJnZW5yZVwiIGlkPVwiZ2VucmVcIj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm11amVyXCI+TXVqZXI8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImhvbWJyZVwiPkhvbWJyZTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwib3Ryb1wiPk90cm88L29wdGlvbj5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8Zm9vdGVyPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXsoKT0+IE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKHZhbCA9PiBzZXRWYWx1ZSh7IFt2YWxdOiAnJyB9KSl9PmNhbmNlbGFyPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiPkVudmlhcjwvYnV0dG9uPlxuICAgICAgPC9mb290ZXI+XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIGZvcm17XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlcntcbiAgICAgICAgICBjb2xvcjogJHtjb2xvci5wcmltfTtcbiAgICAgICAgfVxuICAgICAgICAuYm9keXtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgcGFkZGluZzogLjVyZW07XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXR7XG4gICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgICAgICAgcGFkZGluZy1sZWZ0OiAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dFt0eXBlPVwiZGF0ZVwiXXtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIC4yKTtcbiAgICAgICAgfVxuICAgICAgICAuZnVsbE5hbWV7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIC5mdWxsTmFtZSBpbnB1dHtcbiAgICAgICAgfVxuICAgICAgICAuZnVsbE5hbWUgaW5wdXQ6bnRoLWNoaWxkKDIpe1xuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICAuYmlydGhfc2V4e1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIH1cbiAgICAgICAgZm9vdGVye1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIHBhZGRpbmc6IC41cmVtO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbntcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICBjb2xvcjogJHtjb2xvci5wcmltfTtcbiAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAke2NvbG9yLnByaW19O1xuICAgICAgICAgIHRyYW5zaXRpb246IDI1MG1zIGVhc2U7XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IC41cmVtO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpmb2N1c3tcbiAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpob3ZlcntcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAke2NvbG9yLnByaW19O1xuICAgICAgICB9XG4gICAgICBgfVxuICAgICAgPC9zdHlsZT5cbiAgICA8L2Zvcm0+XG4gIClcbn1cblxuY29uc3QgTG9nUmVnID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xuXG4gIHJldHVybihcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW5fY29udFwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYWluXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHVibGlzaFwiPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250XCI+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAubWFpbl9jb250e1xuICAgICAgICAgIGhlaWdodDogMTAwdmg7XG4gICAgICAgICAgd2lkdGg6IDcwJTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB9XG4gICAgICAgIC5tYWlue1xuICAgICAgICAgIGhlaWdodDogNTAlO1xuICAgICAgICAgIHdpZHRoOiA4MCU7XG4gICAgICAgICAgYmFja2dyb3VuZDogI2ZmZjtcbiAgICAgICAgICBhbmltYXRpb246IGRvd24gNjAwbXMgZWFzZS1pbi1vdXQ7XG4gICAgICAgICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgfVxuICAgICAgICAucHVibGlzaHtcbiAgICAgICAgICB3aWR0aDogNTAlO1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoJy9zdGF0aWMvcmFuZG9tL3IxNi5qcGcnKXRvcCBjZW50ZXIgbm8tcmVwZWF0O1xuICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgICAgIH1cbiAgICAgICAgLmNvbnR7XG4gICAgICAgICAgd2lkdGg6IDUwJTtcbiAgICAgICAgfVxuICAgICAgICBAa2V5ZnJhbWVzIGRvd257XG4gICAgICAgICAgMCV7XG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMDAlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgNTAle1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDUwcHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAxMDAle1xuICAgICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwcHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYH1cbiAgICAgIDwvc3R5bGU+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuY29uc3QgTXlNb2RhbCA9ICgpID0+IHtcbiAgY29uc3QgbWVudSA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLm1haW4ubmF2LnZpc2libGUpO1xuICBjb25zdCBtYWluID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUubWFpbi5uYXYpO1xuICBjb25zdCB7IGxvZ2luLCByZWdpc3RlciB9ID0gbWFpbjtcbiAgcmV0dXJuKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWxcIj5cbiAgICAgIHtcbiAgICAgICAgbG9naW4gJiYgPExvZ1JlZz48TG9naW4gLz48L0xvZ1JlZz5cbiAgICAgIH1cbiAgICAgIHtcbiAgICAgICAgcmVnaXN0ZXIgJiYgPExvZ1JlZz48UmVnaXN0ZXIgLz48L0xvZ1JlZz5cbiAgICAgIH1cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLm1vZGFse1xuICAgICAgICAgIGRpc3BsYXk6ICR7bWVudSA/ICdibG9jaycgOiAnbm9uZSd9O1xuICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAuNSk7XG4gICAgICAgICAgei1pbmRleDogMTUwO1xuICAgICAgICAgIGNvbnRlbnQ6IFwiIFwiO1xuICAgICAgICAgIHRyYW5zaXRpb246IDI1MG1zIGVhc2U7XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmNvbnN0IEV2ZW50SG9tZSA9ICh7IGN1cnJlbnQsIHNldERvbmF0ZSB9KSA9PiB7XG5cbiAgcmV0dXJuKFxuICAgIDw+XG4gICAgICA8aGVhZGVyPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxoMT57Y3VycmVudC50aXRsZX08L2gxPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInN1YlRpdGxlXCI+e2N1cnJlbnQuc3ViVGl0bGV9PC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvaGVhZGVyPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJib2R5XCI+XG4gICAgICAgIDxwPntjdXJyZW50LmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGZvb3Rlcj5cbiAgICAgICAgPGJ1dHRvbj5QYXJ0aWNpcGFyPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17KCk9PiBzZXREb25hdGUodHJ1ZSl9PkRvbmFyPC9idXR0b24+XG4gICAgICA8L2Zvb3Rlcj5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgaGVhZGVye1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlciBkaXZ7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICAgICAgICBtYXJnaW46IDVyZW0gMCAxcmVtO1xuICAgICAgICB9XG4gICAgICAgIGgxLCBwe1xuICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXIgaDEsIC5zdWJUaXRsZXtcbiAgICAgICAgICBtYXJnaW46MDtcbiAgICAgICAgICBjb2xvcjogJHtjdXJyZW50LnByaW19O1xuICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9ue1xuICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgICBjb2xvcjogJHtjdXJyZW50LnByaW19O1xuICAgICAgICAgIHRyYW5zaXRpb246IDI1MG1zIGVhc2U7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uOmZvY3Vze1xuICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uOmhvdmVye1xuICAgICAgICAgIGJhY2tncm91bmQ6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgfVxuICAgICAgICAuYm9keXtcbiAgICAgICAgICBmbGV4LWdyb3c6IDE7XG4gICAgICAgIH1cbiAgICAgICAgZm9vdGVye1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIGZvb3RlciBidXR0b257XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IDFyZW07XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvPlxuICApXG59XG5cbmNvbnN0IERvbmF0ZSA9ICh7IGN1cnJlbnQgfSkgPT4ge1xuICBjb25zdCBbbG9naW4sIHNldExvZ2luXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2RvbmF0ZSwgc2V0RG9uYXRlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3dlbGNvbWUsIHNldFdlbGNvbWVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbbG9hZGVyLCBzZXRMb2FkZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbbW91bnQsIHNldE1vdW50XSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbdXNlciwgc2V0VXNlcl0gPSB1c2VTdGF0ZSh7IGZ1bGxOYW1lOiAnc3RhciBncmVlbicsIHBlcmZpbEltZzogJy9zdGF0aWMvcmFuZG9tL3I1LmpwZycgfSk7XG4gIGNvbnN0IG9uVGVzdCA9IGFzeW5jKCk9PiB7XG4gICAgdHJ5e1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcvdXNlci90ZXN0TG9naW4nKTtcbiAgICAgIGlmKHJlcy5kYXRhKXtcbiAgICAgICAgc2V0TG9hZGVyKGZhbHNlKTtcbiAgICAgICAgc2V0VXNlcihyZXMuZGF0YSk7XG4gICAgICAgIHNldERvbmF0ZSh0cnVlKTtcbiAgICAgIH1cbiAgICB9Y2F0Y2goZSl7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgIHNldExvYWRlcihmYWxzZSk7XG4gICAgICBzZXRMb2dpbih0cnVlKTtcbiAgICB9XG4gIH1cbiAgICB1c2VFZmZlY3QoKCk9PiB7XG4gICAgICBvblRlc3QoKTtcbiAgICB9LFtdKVxuXG4gICAgY29uc3Qgb25Eb25hdGUgPSBhc3luYyhlKSA9PiB7XG4gICAgICB0cnl7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc2V0RG9uYXRlKGZhbHNlKTtcbiAgICAgICAgc2V0TG9hZGVyKHRydWUpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgICAgc2V0TG9hZGVyKGZhbHNlKTtcbiAgICAgICAgICBzZXRXZWxjb21lKHRydWUpO1xuICAgICAgICB9LDIwMDApO1xuICAgICAgfWNhdGNoKGUpe1xuICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgIH1cbiAgICB9XG4gIGNvbnN0IHsgcGVyZmlsSW1nLCBmdWxsTmFtZSwgd2FsbGV0IH0gPSB1c2VyO1xuICByZXR1cm4oXG4gICAgPGRpdiBjbGFzc05hbWU9XCJtYWluXCI+XG4gICAgICB7XG4gICAgICAgIGxvYWRlciAmJiA8ZGl2IGNsYXNzTmFtZT1cImxvYWRlclwiPjxTcGlubmVyIGNvbG9yPXsgY3VycmVudC50aXRsZSA9PT0gJ3NpZW1icmEnID8gJ21haW4tZ3JlZW4nIDogY3VycmVudC50aXRsZSA9PT0gJ2F5dWRhJyA/ICdtYWluLXJlZCcgOiAnbWFpbi1ibHVlJyB9IC8+PC9kaXY+XG4gICAgICB9XG4gICAgICB7XG4gICAgICAgIGxvZ2luICYmIDxkaXYgY2xhc3NOYW1lPVwibG9naW5cIj48TG9naW4gcHJpbT17IGN1cnJlbnQucHJpbSB9IHRpdGxlPXtjdXJyZW50LnRpdGxlfSAvPjwvZGl2PlxuICAgICAgfVxuICAgICAge1xuICAgICAgICBkb25hdGUgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFpbl9kb25hdGUgYW5pbWF0ZWQgZmFkZUluXCI+XG4gICAgICAgICAgICA8aGVhZGVyPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVzZXIgYW5pbWF0ZWQgZmFkZUluIGRlbGF5LTFzXCI+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9e3BlcmZpbEltZ30gYWx0PVwiXCIvPlxuICAgICAgICAgICAgICAgIDxwPntmdWxsTmFtZX08L3A+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvdW5kIGFuaW1hdGVkIGZsaXBJblggZGVsYXktMnNcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9zdGF0aWMvZ3JlZW5jb2luLnN2Z1wiIGFsdD1cIlwiLz5cbiAgICAgICAgICAgICAgICA8cD57d2FsbGV0fTwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2hlYWRlcj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5pbWF0ZWQgZmFkZUluIGRlbGF5LTJzXCI+XG4gICAgICAgICAgICAgIDxoMT5Eb25hcjwvaDE+XG4gICAgICAgICAgICAgIDxwPkluZ3Jlc2EgdW4gbW9udG8gZW4gZ3JlZW5jb2lucywgbG9zIG1pc21vcyBzZXJhbiBkZXNjb250YWRvcyBkZSBzdSBjdWVudGEgeSBzZXJhbiByZWNpYmlkb3MgcG9yIGxhcyBvZ2FuaXphY2lvbmVzIHF1ZSBhcG95YW4gZXN0YSBjYXVzYS48L3A+XG4gICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD1cIlBPU1RcIiBvblN1Ym1pdD17b25Eb25hdGV9PlxuICAgICAgICAgICAgICAgIDxpbnB1dCB2YWx1ZT17bW91bnR9IG9uQ2hhbmdlPXsoZSk9PiBzZXRNb3VudChlLmN1cnJlbnRUYXJnZXQudmFsdWUpfSB0eXBlPVwibnVtYmVyXCIvPlxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiPmRvbmFyPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgICB9XG4gICAgICB7XG4gICAgICAgIHdlbGNvbWUgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2VsY29tZSBhbmltYXRlZCBmYWRlSW5cIj5cbiAgICAgICAgICAgIDxoMT5GZWxpY2lkYWRlcywgeWEgZXJlcyBlbWJhamFkb3IgZGUgZXN0ZSBldmVudG88L2gxPlxuICAgICAgICAgICAgPHA+UG9kcmFzIHNlZ3VpciBsbyBxdWUgaGFjZW1vcyBjb24gdHUgY29sYWJvcmFjaW9uIGVuIGVsIHNpZ3VpZW50ZSA8YSBocmVmPVwiI1wiPkVubGFjZS48L2E+PC9wPlxuICAgICAgICAgICAgPHA+RGUgaWd1YWwgbWFuZXJhIGxhcyBhY3R1YWxpemFjaW9uZXMgZGVsIGV2ZW50byBzZXJhbiBwdWJsaWNhZGFzIGVuIHR1IG11cm8uPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgICB9XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIC5tYWlue1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaGVhZGVye1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAycmVtO1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlciBwe1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgfVxuICAgICAgICAubG9hZGVye1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgLmxvZ2lue1xuICAgICAgICAgIGhlaWdodDogNjAlO1xuICAgICAgICB9XG4gICAgICAgIC5tYWluX2RvbmF0ZSBoMXtcbiAgICAgICAgICBjb2xvcjogJHtjdXJyZW50LnByaW19O1xuICAgICAgICB9XG4gICAgICAgIC51c2VyIGltZ3tcbiAgICAgICAgICB3aWR0aDogODBweDtcbiAgICAgICAgICBoZWlnaHQ6IDgwcHg7XG4gICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgICAgb2JqZWN0LXBvc2l0aW9uOiBjZW50ZXI7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICB9XG4gICAgICAgIC5mb3VuZHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgLmZvdW5kIGltZ3tcbiAgICAgICAgICB3aWR0aDogMzBweDtcbiAgICAgICAgICBoZWlnaHQ6IDMwcHg7XG4gICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgICAgb2JqZWN0LXBvc2l0aW9uOyBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXR7XG4gICAgICAgICAgd2lkdGg6IDYwcHg7XG4gICAgICAgIH1cbiAgICAgICAgLndlbGNvbWUgaDEsIGF7XG4gICAgICAgICAgY29sb3I6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgfVxuICAgICAgICAud2VsY29tZSBhe1xuICAgICAgICAgIGZvbnQtd2lnaHQ6IDU1MDtcbiAgICAgICAgfVxuICAgICAgICAud2VsY29tZSBwe1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgfVxuICAgICAgYH1cbiAgICAgIDwvc3R5bGU+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuY29uc3QgRXZlbnRzID0gKCkgPT4ge1xuICBjb25zdCBldmVudHMgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5ldmVudHMpO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHsgdmlzaWJsZSwgY3VycmVudCB9ID0gZXZlbnRzO1xuICBjb25zdCBbZG9uYXRlLCBzZXREb25hdGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICB1c2VFZmZlY3QoKCk9PiBzZXREb25hdGUodHJ1ZSksW3Zpc2libGVdKTtcbiAgcmV0dXJuKFxuICAgIDxNb2RhbCBpc09wZW49e3Zpc2libGV9IHN0eWxlPXt7IG1pbldpZHRoOiAnOTV2dycgfX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW5cIj5cbiAgICAgICAgPGJ1dHRvbiB0aXRsZT1cIkNlcnJhclwiIG9uQ2xpY2s9eygpPT4gZGlzcGF0Y2goeyB0eXBlOiBPTl9FVkVOVCwgZXZlbnRUeXBlOiBudWxsIH0pfT5YPC9idXR0b24+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW1nXCI+XG4gICAgICAgICAgPGltZyBzcmM9e2N1cnJlbnQuaW1nfSBhbHQ9XCJcIi8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9cIj5cbiAgICAgICAgICB7XG4gICAgICAgICAgICBkb25hdGUgPyA8RG9uYXRlIGN1cnJlbnQ9e2N1cnJlbnR9IC8+IDogPEV2ZW50SG9tZSBjdXJyZW50PXtjdXJyZW50fSBzZXREb25hdGU9e3NldERvbmF0ZX0gLz5cbiAgICAgICAgICB9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgLm1haW57XG4gICAgICAgICAgICAvL2hlaWdodDogODB2aDtcbiAgICAgICAgICAgIC8vaGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuaW1nLCAuaW5mb3tcbiAgICAgICAgICAgIC8vd2lkdGg6IDUwJTtcbiAgICAgICAgICAgIC8vaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbWd7XG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIC8vaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgaGVpZ2h0OiA1MCU7XG4gICAgICAgICAgICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgICAgICAgICAgIG9iamVjdC1wb3NpdGlvbjogJHtjdXJyZW50LnByaW0gPT09IFwiIzAzYTdmMFwiID8gJ3RvcCcgOiAnYm90dG9tJyB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICAuaW5mb3tcbiAgICAgICAgICAgIHBhZGRpbmc6IC41cmVtIC41cmVtIC41cmVtIDFyZW07XG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnV0dG9ue1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAke2N1cnJlbnQucHJpbX07XG4gICAgICAgICAgICBjb2xvcjogJHtjdXJyZW50LnByaW19O1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogMjUwbXMgZWFzZTtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIHRvcDogLjVyZW07XG4gICAgICAgICAgICByaWdodDogLjVyZW07XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1dHRvbjpmb2N1c3tcbiAgICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1dHRvbjpob3ZlcntcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgIH1cbiAgICAgICAgYH1cbiAgICAgICAgPC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuY29uc3QgTGF5b3V0ID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xuICByZXR1cm4oXG4gICAgPGRpdj5cbiAgICAgIDxIZWFkPlxuICAgICAgICA8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cIi9zdGF0aWMvYW5pbWF0ZS5taW4uY3NzXCIvPlxuICAgICAgICA8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cIi9zdGF0aWMvYW9zLmNzc1wiLz5cbiAgICAgICAgPGxpbmsgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1BcmNoaXZvK0JsYWNrfE9wZW4rU2Fuc3xQYWNpZmljbyZkaXNwbGF5PXN3YXBcIiByZWw9XCJzdHlsZXNoZWV0XCIvPlxuICAgICAgPC9IZWFkPlxuICAgICAgPG1haW4+XG4gICAgICAgIDxIZWFkZXIgLz5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8RXZlbnRzIC8+XG4gICAgICA8L21haW4+XG4gICAgICA8TWVudSAvPlxuICAgICAgPE15TW9kYWwgLz5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgZGl2e1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB9XG4gICAgICAgIG1haW57XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgIGZsZXg6IDEgMSAwO1xuICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IExheW91dDtcbiJdfQ== */\n/*@ sourceURL=/home/felix/Documentos/projects/greenlink/components/main/layout.jsx */")));
};

var Register = function Register() {
  var _useReducer = Object(react__WEBPACK_IMPORTED_MODULE_6__["useReducer"])(function (state, next) {
    return Object(_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__["default"])({}, state, next);
  }, {
    name: '',
    lastName: '',
    mail: '',
    pass: '',
    birthday: '',
    genre: 'Mujer'
  }),
      value = _useReducer[0],
      setValue = _useReducer[1];

  var _useState6 = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])(false),
      disable = _useState6[0],
      setDisable = _useState6[1];

  var _useState7 = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])(false),
      mailPop = _useState7[0],
      setMailPop = _useState7[1];

  var onSubmit =
  /*#__PURE__*/
  function () {
    var _ref3 = Object(_babel_runtime_corejs2_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_4__["default"])(
    /*#__PURE__*/
    _babel_runtime_corejs2_regenerator__WEBPACK_IMPORTED_MODULE_3___default.a.mark(function _callee2(e) {
      var data, res;
      return _babel_runtime_corejs2_regenerator__WEBPACK_IMPORTED_MODULE_3___default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              e.preventDefault();
              data = value;
              _context2.next = 5;
              return axios__WEBPACK_IMPORTED_MODULE_14___default.a.post('/user/register', data);

            case 5:
              res = _context2.sent;

              if (!(res.data === 'mail')) {
                _context2.next = 9;
                break;
              }

              setMailPop(true);
              return _context2.abrupt("return", setDisable(false));

            case 9:
              next_router__WEBPACK_IMPORTED_MODULE_13___default.a.push("/perfil/".concat(res.data));
              _context2.next = 15;
              break;

            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](0);
              console.log(_context2.t0);

            case 15:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[0, 12]]);
    }));

    return function onSubmit(_x2) {
      return _ref3.apply(this, arguments);
    };
  }();

  return __jsx("form", {
    onSubmit: onSubmit,
    method: "POST",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, __jsx("header", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, __jsx("h1", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, "Registro")), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]]) + " " + "body"
  }, __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]]) + " " + "fullName"
  }, __jsx("input", {
    disabled: disable,
    value: value.name,
    onChange: function onChange(e) {
      return setValue({
        name: e.currentTarget.value
      });
    },
    type: "text",
    id: "name",
    placeholder: "Nombre",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }), __jsx("input", {
    disabled: disable,
    value: value.lastName,
    onChange: function onChange(e) {
      return setValue({
        lastName: e.currentTarget.value
      });
    },
    type: "text",
    id: "lastName",
    placeholder: "Apellido",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  })), __jsx("input", {
    disabled: disable,
    value: value.mail,
    onChange: function onChange(e) {
      return setValue({
        mail: e.currentTarget.value
      });
    },
    onFocus: function onFocus() {
      return setMailPop(false);
    },
    type: "text",
    id: "mail",
    placeholder: "Correo electr\xF3nico",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }), __jsx(reactstrap__WEBPACK_IMPORTED_MODULE_15__["Popover"], {
    placement: "bottom",
    target: "mail",
    isOpen: mailPop
  }, __jsx(reactstrap__WEBPACK_IMPORTED_MODULE_15__["PopoverBody"], null, "Ya existe una cuenta con este correo")), __jsx("input", {
    disabled: disable,
    value: value.pass,
    onChange: function onChange(e) {
      return setValue({
        pass: e.currentTarget.value
      });
    },
    type: "password",
    id: "pass",
    placeholder: "contrase\xF1a",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]]) + " " + "birth_sex"
  }, __jsx("label", {
    htmlFor: "birthday",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, __jsx("p", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, "Cumplea\xF1os"), __jsx("input", {
    disabled: disable,
    value: value.birthday,
    onChange: function onChange(e) {
      return setValue({
        birthday: e.currentTarget.value
      });
    },
    type: "date",
    name: "birthday",
    id: "birthday",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  })), __jsx("label", {
    htmlFor: "genre",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, __jsx("p", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, "Genero"), __jsx("select", {
    disabled: disable,
    value: value.genre,
    onChange: function onChange(e) {
      return setValue({
        genre: e.currentTarget.value
      });
    },
    name: "genre",
    id: "genre",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, __jsx("option", {
    value: "mujer",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, "Mujer"), __jsx("option", {
    value: "hombre",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, "Hombre"), __jsx("option", {
    value: "otro",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, "Otro"))))), __jsx("footer", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, __jsx("button", {
    type: "button",
    onClick: function onClick() {
      return _babel_runtime_corejs2_core_js_object_keys__WEBPACK_IMPORTED_MODULE_1___default()(value).forEach(function (val) {
        return setValue(Object(_babel_runtime_corejs2_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])({}, val, ''));
      });
    },
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, "cancelar"), __jsx("button", {
    type: "submit",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3822388164", [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]]])
  }, "Enviar")), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a, {
    id: "3822388164",
    dynamic: [_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, _layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim]
  }, "form.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%;height:100%;}header.__jsx-style-dynamic-selector{color:".concat(_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, ";}.body.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%;height:100%;padding:.5rem;}input.__jsx-style-dynamic-selector{font-size:12px;width:100%;margin-bottom:1rem;padding-left:.5rem;}input[type=\"date\"].__jsx-style-dynamic-selector{border:1px solid rgba(0,0,0,.2);}.fullName.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.fullName.__jsx-style-dynamic-selector input.__jsx-style-dynamic-selector:nth-child(2){margin-left:.5rem;}.birth_sex.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:space-around;-webkit-justify-content:space-around;-ms-flex-pack:space-around;justify-content:space-around;width:100%;}footer.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%;padding:.5rem;}button.__jsx-style-dynamic-selector{background:transparent;color:").concat(_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, ";border:2px solid ").concat(_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, ";-webkit-transition:250ms ease;transition:250ms ease;margin-left:.5rem;}button.__jsx-style-dynamic-selector:focus{outline:none;}button.__jsx-style-dynamic-selector:hover{color:#fff;background:").concat(_layout_var__WEBPACK_IMPORTED_MODULE_16__["color"].prim, ";}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/felix/Documentos/projects/greenlink/components/main/layout.jsx */")));
};

var LogReg = function LogReg(_ref4) {
  var children = _ref4.children;
  return __jsx("div", {
    className: "jsx-292857699" + " " + "main_cont"
  }, __jsx("div", {
    className: "jsx-292857699" + " " + "main"
  }, __jsx("div", {
    className: "jsx-292857699" + " " + "publish"
  }), __jsx("div", {
    className: "jsx-292857699" + " " + "cont"
  }, children)), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a, {
    id: "292857699"
  }, ".main_cont.jsx-292857699{height:100vh;width:70%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:relative;}.main.jsx-292857699{height:50%;width:80%;background:#fff;-webkit-animation:down-jsx-292857699 600ms ease-in-out;animation:down-jsx-292857699 600ms ease-in-out;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}.publish.jsx-292857699{width:50%;height:100%;background:url('/static/random/r16.jpg')top center no-repeat;background-size:cover;}.cont.jsx-292857699{width:50%;}@-webkit-keyframes down-jsx-292857699{0%{opacity:0;-webkit-transform:translateY(-100%);-ms-transform:translateY(-100%);transform:translateY(-100%);}50%{-webkit-transform:translateY(50px);-ms-transform:translateY(50px);transform:translateY(50px);}100%{opacity:1;-webkit-transform:translateY(0px);-ms-transform:translateY(0px);transform:translateY(0px);}}@keyframes down-jsx-292857699{0%{opacity:0;-webkit-transform:translateY(-100%);-ms-transform:translateY(-100%);transform:translateY(-100%);}50%{-webkit-transform:translateY(50px);-ms-transform:translateY(50px);transform:translateY(50px);}100%{opacity:1;-webkit-transform:translateY(0px);-ms-transform:translateY(0px);transform:translateY(0px);}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/felix/Documentos/projects/greenlink/components/main/layout.jsx */"));
};

var MyModal = function MyModal() {
  var menu = Object(react_redux__WEBPACK_IMPORTED_MODULE_7__["useSelector"])(function (state) {
    return state.main.nav.visible;
  });
  var main = Object(react_redux__WEBPACK_IMPORTED_MODULE_7__["useSelector"])(function (state) {
    return state.main.nav;
  });
  var login = main.login,
      register = main.register;
  return __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["3625275396", [menu ? 'block' : 'none']]]) + " " + "modal"
  }, login && __jsx(LogReg, null, __jsx(Login, null)), register && __jsx(LogReg, null, __jsx(Register, null)), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a, {
    id: "3625275396",
    dynamic: [menu ? 'block' : 'none']
  }, ".modal.__jsx-style-dynamic-selector{display:".concat(menu ? 'block' : 'none', ";position:fixed;top:0;left:0;height:100%;width:100%;background:rgba(0,0,0,.5);z-index:150;content:\" \";-webkit-transition:250ms ease;transition:250ms ease;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/felix/Documentos/projects/greenlink/components/main/layout.jsx */")));
};

var EventHome = function EventHome(_ref5) {
  var current = _ref5.current,
      setDonate = _ref5.setDonate;
  return __jsx(react__WEBPACK_IMPORTED_MODULE_6___default.a.Fragment, null, __jsx("header", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2306986395", [current.prim, current.prim, current.prim, current.prim]]])
  }, __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2306986395", [current.prim, current.prim, current.prim, current.prim]]])
  }, __jsx("h1", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2306986395", [current.prim, current.prim, current.prim, current.prim]]])
  }, current.title), __jsx("p", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2306986395", [current.prim, current.prim, current.prim, current.prim]]]) + " " + "subTitle"
  }, current.subTitle))), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2306986395", [current.prim, current.prim, current.prim, current.prim]]]) + " " + "body"
  }, __jsx("p", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2306986395", [current.prim, current.prim, current.prim, current.prim]]])
  }, current.description)), __jsx("footer", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2306986395", [current.prim, current.prim, current.prim, current.prim]]])
  }, __jsx("button", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2306986395", [current.prim, current.prim, current.prim, current.prim]]])
  }, "Participar"), __jsx("button", {
    onClick: function onClick() {
      return setDonate(true);
    },
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2306986395", [current.prim, current.prim, current.prim, current.prim]]])
  }, "Donar")), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a, {
    id: "2306986395",
    dynamic: [current.prim, current.prim, current.prim, current.prim]
  }, "header.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}header.__jsx-style-dynamic-selector div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;margin:5rem 0 1rem;}h1.__jsx-style-dynamic-selector,p.__jsx-style-dynamic-selector{max-width:100%;}header.__jsx-style-dynamic-selector h1.__jsx-style-dynamic-selector,.subTitle.__jsx-style-dynamic-selector{margin:0;color:".concat(current.prim, ";text-transform:uppercase;}button.__jsx-style-dynamic-selector{background:transparent;border:2px solid ").concat(current.prim, ";color:").concat(current.prim, ";-webkit-transition:250ms ease;transition:250ms ease;}button.__jsx-style-dynamic-selector:focus{outline:none;}button.__jsx-style-dynamic-selector:hover{background:").concat(current.prim, ";color:#fff;}.body.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}footer.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}footer.__jsx-style-dynamic-selector button.__jsx-style-dynamic-selector{margin-left:1rem;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/felix/Documentos/projects/greenlink/components/main/layout.jsx */")));
};

var Donate = function Donate(_ref6) {
  var current = _ref6.current;

  var _useState8 = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])(false),
      login = _useState8[0],
      setLogin = _useState8[1];

  var _useState9 = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])(false),
      donate = _useState9[0],
      setDonate = _useState9[1];

  var _useState10 = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])(false),
      welcome = _useState10[0],
      setWelcome = _useState10[1];

  var _useState11 = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])(false),
      loader = _useState11[0],
      setLoader = _useState11[1];

  var _useState12 = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])(0),
      mount = _useState12[0],
      setMount = _useState12[1];

  var _useState13 = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])({
    fullName: 'star green',
    perfilImg: '/static/random/r5.jpg'
  }),
      user = _useState13[0],
      setUser = _useState13[1];

  var onTest =
  /*#__PURE__*/
  function () {
    var _ref7 = Object(_babel_runtime_corejs2_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_4__["default"])(
    /*#__PURE__*/
    _babel_runtime_corejs2_regenerator__WEBPACK_IMPORTED_MODULE_3___default.a.mark(function _callee3() {
      var res;
      return _babel_runtime_corejs2_regenerator__WEBPACK_IMPORTED_MODULE_3___default.a.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              _context3.next = 3;
              return axios__WEBPACK_IMPORTED_MODULE_14___default.a.get('/user/testLogin');

            case 3:
              res = _context3.sent;

              if (res.data) {
                setLoader(false);
                setUser(res.data);
                setDonate(true);
              }

              _context3.next = 12;
              break;

            case 7:
              _context3.prev = 7;
              _context3.t0 = _context3["catch"](0);
              console.log(_context3.t0);
              setLoader(false);
              setLogin(true);

            case 12:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[0, 7]]);
    }));

    return function onTest() {
      return _ref7.apply(this, arguments);
    };
  }();

  Object(react__WEBPACK_IMPORTED_MODULE_6__["useEffect"])(function () {
    onTest();
  }, []);

  var onDonate =
  /*#__PURE__*/
  function () {
    var _ref8 = Object(_babel_runtime_corejs2_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_4__["default"])(
    /*#__PURE__*/
    _babel_runtime_corejs2_regenerator__WEBPACK_IMPORTED_MODULE_3___default.a.mark(function _callee4(e) {
      return _babel_runtime_corejs2_regenerator__WEBPACK_IMPORTED_MODULE_3___default.a.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              try {
                e.preventDefault();
                setDonate(false);
                setLoader(true);
                setTimeout(function () {
                  setLoader(false);
                  setWelcome(true);
                }, 2000);
              } catch (e) {
                console.log(e);
              }

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function onDonate(_x3) {
      return _ref8.apply(this, arguments);
    };
  }();

  var perfilImg = user.perfilImg,
      fullName = user.fullName,
      wallet = user.wallet;
  return __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]]) + " " + "main"
  }, loader && __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]]) + " " + "loader"
  }, __jsx(reactstrap__WEBPACK_IMPORTED_MODULE_15__["Spinner"], {
    color: current.title === 'siembra' ? 'main-green' : current.title === 'ayuda' ? 'main-red' : 'main-blue'
  })), login && __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]]) + " " + "login"
  }, __jsx(Login, {
    prim: current.prim,
    title: current.title
  })), donate && __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]]) + " " + "main_donate animated fadeIn"
  }, __jsx("header", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]])
  }, __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]]) + " " + "user animated fadeIn delay-1s"
  }, __jsx("img", {
    src: perfilImg,
    alt: "",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]])
  }), __jsx("p", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]])
  }, fullName)), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]]) + " " + "found animated flipInX delay-2s"
  }, __jsx("img", {
    src: "/static/greencoin.svg",
    alt: "",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]])
  }), __jsx("p", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]])
  }, wallet))), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]]) + " " + "animated fadeIn delay-2s"
  }, __jsx("h1", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]])
  }, "Donar"), __jsx("p", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]])
  }, "Ingresa un monto en greencoins, los mismos seran descontados de su cuenta y seran recibidos por las oganizaciones que apoyan esta causa."), __jsx("form", {
    method: "POST",
    onSubmit: onDonate,
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]])
  }, __jsx("input", {
    value: mount,
    onChange: function onChange(e) {
      return setMount(e.currentTarget.value);
    },
    type: "number",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]])
  }), __jsx("button", {
    type: "submit",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]])
  }, "donar")))), welcome && __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]]) + " " + "welcome animated fadeIn"
  }, __jsx("h1", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]])
  }, "Felicidades, ya eres embajador de este evento"), __jsx("p", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]])
  }, "Podras seguir lo que hacemos con tu colaboracion en el siguiente ", __jsx("a", {
    href: "#",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]])
  }, "Enlace.")), __jsx("p", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["2937250933", [current.prim, current.prim]]])
  }, "De igual manera las actualizaciones del evento seran publicadas en tu muro.")), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a, {
    id: "2937250933",
    dynamic: [current.prim, current.prim]
  }, ".main.__jsx-style-dynamic-selector{height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}header.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-bottom:2rem;}header.__jsx-style-dynamic-selector p.__jsx-style-dynamic-selector{margin:0;}.loader.__jsx-style-dynamic-selector{height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.login.__jsx-style-dynamic-selector{height:60%;}.main_donate.__jsx-style-dynamic-selector h1.__jsx-style-dynamic-selector{color:".concat(current.prim, ";}.user.__jsx-style-dynamic-selector img.__jsx-style-dynamic-selector{width:80px;height:80px;object-fit:cover;object-position:center;border-radius:50%;}.found.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.found.__jsx-style-dynamic-selector img.__jsx-style-dynamic-selector{width:30px;height:30px;object-fit:cover;object-position;center;}input.__jsx-style-dynamic-selector{width:60px;}.welcome.__jsx-style-dynamic-selector h1.__jsx-style-dynamic-selector,a.__jsx-style-dynamic-selector{color:").concat(current.prim, ";}.welcome.__jsx-style-dynamic-selector a.__jsx-style-dynamic-selector{font-wight:550;}.welcome.__jsx-style-dynamic-selector p.__jsx-style-dynamic-selector{margin:0;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/felix/Documentos/projects/greenlink/components/main/layout.jsx */")));
};

var Events = function Events() {
  var events = Object(react_redux__WEBPACK_IMPORTED_MODULE_7__["useSelector"])(function (state) {
    return state.events;
  });
  var dispatch = Object(react_redux__WEBPACK_IMPORTED_MODULE_7__["useDispatch"])();
  var visible = events.visible,
      current = events.current;

  var _useState14 = Object(react__WEBPACK_IMPORTED_MODULE_6__["useState"])(false),
      donate = _useState14[0],
      setDonate = _useState14[1];

  Object(react__WEBPACK_IMPORTED_MODULE_6__["useEffect"])(function () {
    return setDonate(true);
  }, [visible]);
  return __jsx(reactstrap__WEBPACK_IMPORTED_MODULE_15__["Modal"], {
    isOpen: visible,
    style: {
      minWidth: '95vw'
    }
  }, __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["1041535212", [current.prim === "#03a7f0" ? 'top' : 'bottom', current.prim, current.prim, current.prim]]]) + " " + "main"
  }, __jsx("button", {
    title: "Cerrar",
    onClick: function onClick() {
      return dispatch({
        type: _store_actions__WEBPACK_IMPORTED_MODULE_8__["ON_EVENT"],
        eventType: null
      });
    },
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["1041535212", [current.prim === "#03a7f0" ? 'top' : 'bottom', current.prim, current.prim, current.prim]]])
  }, "X"), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["1041535212", [current.prim === "#03a7f0" ? 'top' : 'bottom', current.prim, current.prim, current.prim]]]) + " " + "img"
  }, __jsx("img", {
    src: current.img,
    alt: "",
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["1041535212", [current.prim === "#03a7f0" ? 'top' : 'bottom', current.prim, current.prim, current.prim]]])
  })), __jsx("div", {
    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a.dynamic([["1041535212", [current.prim === "#03a7f0" ? 'top' : 'bottom', current.prim, current.prim, current.prim]]]) + " " + "info"
  }, donate ? __jsx(Donate, {
    current: current
  }) : __jsx(EventHome, {
    current: current,
    setDonate: setDonate
  })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a, {
    id: "1041535212",
    dynamic: [current.prim === "#03a7f0" ? 'top' : 'bottom', current.prim, current.prim, current.prim]
  }, ".main.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;position:relative;}img.__jsx-style-dynamic-selector{width:100%;height:50%;object-fit:cover;object-position:".concat(current.prim === "#03a7f0" ? 'top' : 'bottom', ";}.info.__jsx-style-dynamic-selector{padding:.5rem .5rem .5rem 1rem;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}button.__jsx-style-dynamic-selector{background:transparent;border:2px solid ").concat(current.prim, ";color:").concat(current.prim, ";-webkit-transition:250ms ease;transition:250ms ease;position:absolute;top:.5rem;right:.5rem;}button.__jsx-style-dynamic-selector:focus{outline:none;}button.__jsx-style-dynamic-selector:hover{background:").concat(current.prim, ";color:#fff;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2ZlbGl4L0RvY3VtZW50b3MvcHJvamVjdHMvZ3JlZW5saW5rL2NvbXBvbmVudHMvbWFpbi9sYXlvdXQuanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStqQm9CLEFBSzBCLEFBU0YsQUFPb0IsQUFNUixBQVNWLEFBRzJCLFdBdkI3QixFQXFCYixTQXBCbUIsQ0FXNkIsUUFObEMsUUFKaUMsQ0FzQmxDLEdBakJFLFFBa0JmLGtCQVpxQyxLQXZCYixVQWF4QixvQkFXd0IsYUFOQSxtQ0FqQkosSUF3QkEsY0F2QnBCLElBd0JZLFVBQ0UsV0FSZCxDQVNBIiwiZmlsZSI6Ii9ob21lL2ZlbGl4L0RvY3VtZW50b3MvcHJvamVjdHMvZ3JlZW5saW5rL2NvbXBvbmVudHMvbWFpbi9sYXlvdXQuanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZHVjZXIgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBPTl9FVkVOVCB9IGZyb20gJy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuLy9pbXBvcnQgJy4uLy4uL25vZGVfbW9kdWxlcy9ib290c3RyYXAvc2Nzcy9ib290c3RyYXAuc2Nzcyc7XG5pbXBvcnQgJy4vYmFzZS5zY3NzJztcbmltcG9ydCBIZWFkIGZyb20gJ25leHQvaGVhZCc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4vaGVhZGVyJztcbmltcG9ydCBNZW51IGZyb20gJy4vbWVudSc7XG5pbXBvcnQgUm91dGVyIGZyb20gJ25leHQvcm91dGVyJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBQb3BvdmVyLCBQb3BvdmVyQm9keSwgU3Bpbm5lciwgTW9kYWwgfSBmcm9tICdyZWFjdHN0cmFwJztcbmltcG9ydCB7IGNvbG9yLCBmb250IH0gZnJvbSAnLi4vLi4vbGF5b3V0L3Zhcic7XG5pbXBvcnQgVGl0bGUgZnJvbSAnLi4vbWFpbi90aXRsZSc7XG5cbmNvbnN0IExvZ2luID0gKHsgcHJpbSwgdGl0bGUgfSkgPT4ge1xuXG4gIGNvbnN0IFttYWlsLCBzZXRNYWlsXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3Bhc3MsIHNldFBhc3NdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbbWFpbFBvcCwgc2V0TWFpbFBvcF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtwYXNzUG9wLCBzZXRQYXNzUG9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2Rpc2FibGUsIHNldERpc2FibGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IG9uU3VibWl0ID0gYXN5bmMoZSkgPT4ge1xuICAgIHRyeXtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHNldERpc2FibGUodHJ1ZSk7XG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBtYWlsLFxuICAgICAgICBwYXNzXG4gICAgICB9XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5wb3N0KCcvdXNlci9sb2dpbicsIGRhdGEpO1xuICAgICAgaWYocmVzLmRhdGEgPT09ICdtYWlsJykge1xuICAgICAgICAgc2V0TWFpbFBvcCh0cnVlKTtcbiAgICAgICAgIHJldHVybiBzZXREaXNhYmxlKGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGlmKHJlcy5kYXRhID09PSAncGFzcycpe1xuICAgICAgICBzZXRQYXNzUG9wKHRydWUpXG4gICAgICAgIHJldHVybiBzZXREaXNhYmxlKGZhbHNlKTtcbiAgICAgIH07XG4gICAgICBSb3V0ZXIucHVzaChgL3BlcmZpbC8ke3Jlcy5kYXRhfWApO1xuICAgIH1jYXRjaChlKXtcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybihcbiAgICA8Zm9ybSBvblN1Ym1pdD17b25TdWJtaXR9IG1ldGhvZD1cIlBPU1RcIj5cbiAgICAgIDxoZWFkZXI+PGgxPkluaWNpYXIgU2VzaW9uPC9oMT48L2hlYWRlcj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm9keVwiPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj1cIm1haWxcIj5cbiAgICAgICAgICA8cD5Vc3VhcmlvPC9wPlxuICAgICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gb25Gb2N1cz17KCk9PiBzZXRNYWlsUG9wKGZhbHNlKX0gdmFsdWU9e21haWx9IG9uQ2hhbmdlPXsoZSk9PiBzZXRNYWlsKGUuY3VycmVudFRhcmdldC52YWx1ZSl9IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJtYWlsXCIgbmFtZT1cIm1haWxcIi8+XG4gICAgICAgICAgPFBvcG92ZXIgdGFyZ2V0PVwibWFpbFwiIHBsYWNlbWVudD1cInJpZ2h0XCIgaXNPcGVuPXttYWlsUG9wfT5cbiAgICAgICAgICAgIDxQb3BvdmVyQm9keT5FbCBjb3JyZW8gbm8gZXMgdmFsaWRvPC9Qb3BvdmVyQm9keT5cbiAgICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPVwicGFzc1wiPlxuICAgICAgICAgIDxwPmNvbnRyYXNlw7FhPC9wPlxuICAgICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gb25Gb2N1cz17KCk9PiBzZXRQYXNzUG9wKGZhbHNlKX0gdmFsdWU9e3Bhc3N9IG9uQ2hhbmdlPXsoZSk9PiBzZXRQYXNzKGUuY3VycmVudFRhcmdldC52YWx1ZSl9IHR5cGU9XCJwYXNzd29yZFwiIG5hbWU9XCJwYXNzXCIgaWQ9XCJwYXNzXCIvPlxuICAgICAgICAgIDxQb3BvdmVyIHRhcmdldD1cInBhc3NcIiBwbGFjZW1lbnQ9XCJyaWdodFwiIGlzT3Blbj17cGFzc1BvcH0+XG4gICAgICAgICAgICA8UG9wb3ZlckJvZHk+TGEgY29udHJhc2XDsWEgbm8gZXMgdmFsaWRhPC9Qb3BvdmVyQm9keT5cbiAgICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxmb290ZXI+XG4gICAgICAgIHtcbiAgICAgICAgICBkaXNhYmxlID8gPFNwaW5uZXIgY29sb3I9eyB0aXRsZSA9PT0gJ3NpZW1icmEnID8gJ21haW4tZ3JlZW4nIDogdGl0bGUgPT09ICdheXVkYScgPyAnbWFpbi1yZWQnIDogJ21haW4tYmx1ZScgfSAvPiA6IDxidXR0b24gZGlzYWJsZWQ9e2Rpc2FibGV9IHR5cGU9XCJzdWJtaXRcIj5Mb2dpbjwvYnV0dG9uPlxuICAgICAgICB9XG4gICAgICA8L2Zvb3Rlcj5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgZm9ybXtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlcntcbiAgICAgICAgICBjb2xvcjogJHtwcmltIHx8IGNvbG9yLnByaW19O1xuICAgICAgICAgIG1hcmdpbi10b3A6IC41cmVtO1xuICAgICAgICB9XG4gICAgICAgIC5ib2R5e1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIGxhYmVsOm50aC1jaGlsZCgxKXtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgICAgICB9XG4gICAgICAgIGxhYmVsIHB7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIC4yKTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dHtcbiAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgLjIpO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0OmZvY3Vze1xuICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgICAgYm9yZGVyLWNvbG9yOiAke3ByaW0gfHwgY29sb3IucHJpbX07XG4gICAgICAgIH1cbiAgICAgICAgZm9vdGVye1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgICBwYWRkaW5nOiAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b257XG4gICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgYm9yZGVyOiAycHggc29saWQgJHtwcmltIHx8IGNvbG9yLnByaW19O1xuICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgICAgdHJhbnNpdGlvbjogMjUwbXMgZWFzZTtcbiAgICAgICAgICBjb2xvcjogJHtwcmltIHx8IGNvbG9yLnByaW19O1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpmb2N1c3tcbiAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpob3ZlcntcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAke3ByaW0gfHwgY29sb3IucHJpbX07XG4gICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvZm9ybT5cbiAgKVxufVxuXG5jb25zdCBSZWdpc3RlciA9ICgpID0+IHtcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VSZWR1Y2VyKChzdGF0ZSwgbmV4dCkgPT4gKHsgLi4uc3RhdGUsIC4uLm5leHQgfSkse1xuICAgIG5hbWU6ICcnLFxuICAgIGxhc3ROYW1lOiAnJyxcbiAgICBtYWlsOiAnJyxcbiAgICBwYXNzOiAnJyxcbiAgICBiaXJ0aGRheTogJycsXG4gICAgZ2VucmU6ICdNdWplcicsXG4gIH0pXG4gIGNvbnN0IFtkaXNhYmxlLCBzZXREaXNhYmxlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW21haWxQb3AsIHNldE1haWxQb3BdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IG9uU3VibWl0ID0gYXN5bmMoZSkgPT4ge1xuICAgIHRyeXtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IGRhdGEgPSB2YWx1ZTtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLnBvc3QoJy91c2VyL3JlZ2lzdGVyJywgZGF0YSk7XG4gICAgICBpZihyZXMuZGF0YSA9PT0gJ21haWwnKXtcbiAgICAgICAgc2V0TWFpbFBvcCh0cnVlKTtcbiAgICAgICAgcmV0dXJuIHNldERpc2FibGUoZmFsc2UpO1xuICAgICAgfVxuICAgICAgUm91dGVyLnB1c2goYC9wZXJmaWwvJHtyZXMuZGF0YX1gKTtcbiAgICB9Y2F0Y2goZSl7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4oXG4gICAgPGZvcm0gb25TdWJtaXQ9e29uU3VibWl0fSBtZXRob2Q9XCJQT1NUXCI+XG4gICAgICA8aGVhZGVyPjxoMT5SZWdpc3RybzwvaDE+PC9oZWFkZXI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmdWxsTmFtZVwiPlxuICAgICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gdmFsdWU9e3ZhbHVlLm5hbWV9IG9uQ2hhbmdlID0geyhlKT0+IHNldFZhbHVlKHsgbmFtZTogZS5jdXJyZW50VGFyZ2V0LnZhbHVlIH0pfSB0eXBlPVwidGV4dFwiIGlkPVwibmFtZVwiIHBsYWNlaG9sZGVyPVwiTm9tYnJlXCIvPlxuICAgICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gdmFsdWU9e3ZhbHVlLmxhc3ROYW1lfSBvbkNoYW5nZSA9IHsoZSk9PiBzZXRWYWx1ZSh7IGxhc3ROYW1lOiBlLmN1cnJlbnRUYXJnZXQudmFsdWUgfSl9IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJsYXN0TmFtZVwiIHBsYWNlaG9sZGVyPVwiQXBlbGxpZG9cIi8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8aW5wdXQgZGlzYWJsZWQ9e2Rpc2FibGV9IHZhbHVlPXt2YWx1ZS5tYWlsfSBvbkNoYW5nZSA9IHsoZSk9PiBzZXRWYWx1ZSh7IG1haWw6IGUuY3VycmVudFRhcmdldC52YWx1ZSB9KX0gb25Gb2N1cz17KCk9PiBzZXRNYWlsUG9wKGZhbHNlKX0gdHlwZT1cInRleHRcIiBpZD1cIm1haWxcIiBwbGFjZWhvbGRlcj1cIkNvcnJlbyBlbGVjdHLDs25pY29cIi8+XG4gICAgICAgIDxQb3BvdmVyIHBsYWNlbWVudD1cImJvdHRvbVwiIHRhcmdldD1cIm1haWxcIiBpc09wZW49e21haWxQb3B9PlxuICAgICAgICAgIDxQb3BvdmVyQm9keT5ZYSBleGlzdGUgdW5hIGN1ZW50YSBjb24gZXN0ZSBjb3JyZW88L1BvcG92ZXJCb2R5PlxuICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gdmFsdWU9e3ZhbHVlLnBhc3N9IG9uQ2hhbmdlID0geyhlKT0+IHNldFZhbHVlKHsgcGFzczogZS5jdXJyZW50VGFyZ2V0LnZhbHVlIH0pfSB0eXBlPVwicGFzc3dvcmRcIiBpZD1cInBhc3NcIiBwbGFjZWhvbGRlcj1cImNvbnRyYXNlw7FhXCIvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJpcnRoX3NleFwiPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiYmlydGhkYXlcIj5cbiAgICAgICAgICAgIDxwPkN1bXBsZWHDsW9zPC9wPlxuICAgICAgICAgICAgPGlucHV0IGRpc2FibGVkPXtkaXNhYmxlfSB2YWx1ZT17dmFsdWUuYmlydGhkYXl9IG9uQ2hhbmdlID0geyhlKT0+IHNldFZhbHVlKHsgYmlydGhkYXk6IGUuY3VycmVudFRhcmdldC52YWx1ZSB9KX0gdHlwZT1cImRhdGVcIiBuYW1lPVwiYmlydGhkYXlcIiBpZD1cImJpcnRoZGF5XCIvPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJnZW5yZVwiPlxuICAgICAgICAgICAgPHA+R2VuZXJvPC9wPlxuICAgICAgICAgICAgPHNlbGVjdCBkaXNhYmxlZD17ZGlzYWJsZX0gdmFsdWU9e3ZhbHVlLmdlbnJlfSBvbkNoYW5nZSA9IHsoZSk9PiBzZXRWYWx1ZSh7IGdlbnJlOiBlLmN1cnJlbnRUYXJnZXQudmFsdWUgfSl9IG5hbWU9XCJnZW5yZVwiIGlkPVwiZ2VucmVcIj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm11amVyXCI+TXVqZXI8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImhvbWJyZVwiPkhvbWJyZTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwib3Ryb1wiPk90cm88L29wdGlvbj5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8Zm9vdGVyPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXsoKT0+IE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKHZhbCA9PiBzZXRWYWx1ZSh7IFt2YWxdOiAnJyB9KSl9PmNhbmNlbGFyPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiPkVudmlhcjwvYnV0dG9uPlxuICAgICAgPC9mb290ZXI+XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIGZvcm17XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlcntcbiAgICAgICAgICBjb2xvcjogJHtjb2xvci5wcmltfTtcbiAgICAgICAgfVxuICAgICAgICAuYm9keXtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgcGFkZGluZzogLjVyZW07XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXR7XG4gICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgICAgICAgcGFkZGluZy1sZWZ0OiAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dFt0eXBlPVwiZGF0ZVwiXXtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIC4yKTtcbiAgICAgICAgfVxuICAgICAgICAuZnVsbE5hbWV7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIC5mdWxsTmFtZSBpbnB1dHtcbiAgICAgICAgfVxuICAgICAgICAuZnVsbE5hbWUgaW5wdXQ6bnRoLWNoaWxkKDIpe1xuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICAuYmlydGhfc2V4e1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIH1cbiAgICAgICAgZm9vdGVye1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIHBhZGRpbmc6IC41cmVtO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbntcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICBjb2xvcjogJHtjb2xvci5wcmltfTtcbiAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAke2NvbG9yLnByaW19O1xuICAgICAgICAgIHRyYW5zaXRpb246IDI1MG1zIGVhc2U7XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IC41cmVtO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpmb2N1c3tcbiAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpob3ZlcntcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAke2NvbG9yLnByaW19O1xuICAgICAgICB9XG4gICAgICBgfVxuICAgICAgPC9zdHlsZT5cbiAgICA8L2Zvcm0+XG4gIClcbn1cblxuY29uc3QgTG9nUmVnID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xuXG4gIHJldHVybihcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW5fY29udFwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYWluXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHVibGlzaFwiPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250XCI+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAubWFpbl9jb250e1xuICAgICAgICAgIGhlaWdodDogMTAwdmg7XG4gICAgICAgICAgd2lkdGg6IDcwJTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB9XG4gICAgICAgIC5tYWlue1xuICAgICAgICAgIGhlaWdodDogNTAlO1xuICAgICAgICAgIHdpZHRoOiA4MCU7XG4gICAgICAgICAgYmFja2dyb3VuZDogI2ZmZjtcbiAgICAgICAgICBhbmltYXRpb246IGRvd24gNjAwbXMgZWFzZS1pbi1vdXQ7XG4gICAgICAgICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgfVxuICAgICAgICAucHVibGlzaHtcbiAgICAgICAgICB3aWR0aDogNTAlO1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoJy9zdGF0aWMvcmFuZG9tL3IxNi5qcGcnKXRvcCBjZW50ZXIgbm8tcmVwZWF0O1xuICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgICAgIH1cbiAgICAgICAgLmNvbnR7XG4gICAgICAgICAgd2lkdGg6IDUwJTtcbiAgICAgICAgfVxuICAgICAgICBAa2V5ZnJhbWVzIGRvd257XG4gICAgICAgICAgMCV7XG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMDAlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgNTAle1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDUwcHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAxMDAle1xuICAgICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwcHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYH1cbiAgICAgIDwvc3R5bGU+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuY29uc3QgTXlNb2RhbCA9ICgpID0+IHtcbiAgY29uc3QgbWVudSA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLm1haW4ubmF2LnZpc2libGUpO1xuICBjb25zdCBtYWluID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUubWFpbi5uYXYpO1xuICBjb25zdCB7IGxvZ2luLCByZWdpc3RlciB9ID0gbWFpbjtcbiAgcmV0dXJuKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWxcIj5cbiAgICAgIHtcbiAgICAgICAgbG9naW4gJiYgPExvZ1JlZz48TG9naW4gLz48L0xvZ1JlZz5cbiAgICAgIH1cbiAgICAgIHtcbiAgICAgICAgcmVnaXN0ZXIgJiYgPExvZ1JlZz48UmVnaXN0ZXIgLz48L0xvZ1JlZz5cbiAgICAgIH1cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLm1vZGFse1xuICAgICAgICAgIGRpc3BsYXk6ICR7bWVudSA/ICdibG9jaycgOiAnbm9uZSd9O1xuICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAuNSk7XG4gICAgICAgICAgei1pbmRleDogMTUwO1xuICAgICAgICAgIGNvbnRlbnQ6IFwiIFwiO1xuICAgICAgICAgIHRyYW5zaXRpb246IDI1MG1zIGVhc2U7XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmNvbnN0IEV2ZW50SG9tZSA9ICh7IGN1cnJlbnQsIHNldERvbmF0ZSB9KSA9PiB7XG5cbiAgcmV0dXJuKFxuICAgIDw+XG4gICAgICA8aGVhZGVyPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxoMT57Y3VycmVudC50aXRsZX08L2gxPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInN1YlRpdGxlXCI+e2N1cnJlbnQuc3ViVGl0bGV9PC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvaGVhZGVyPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJib2R5XCI+XG4gICAgICAgIDxwPntjdXJyZW50LmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGZvb3Rlcj5cbiAgICAgICAgPGJ1dHRvbj5QYXJ0aWNpcGFyPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17KCk9PiBzZXREb25hdGUodHJ1ZSl9PkRvbmFyPC9idXR0b24+XG4gICAgICA8L2Zvb3Rlcj5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgaGVhZGVye1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlciBkaXZ7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICAgICAgICBtYXJnaW46IDVyZW0gMCAxcmVtO1xuICAgICAgICB9XG4gICAgICAgIGgxLCBwe1xuICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXIgaDEsIC5zdWJUaXRsZXtcbiAgICAgICAgICBtYXJnaW46MDtcbiAgICAgICAgICBjb2xvcjogJHtjdXJyZW50LnByaW19O1xuICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9ue1xuICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgICBjb2xvcjogJHtjdXJyZW50LnByaW19O1xuICAgICAgICAgIHRyYW5zaXRpb246IDI1MG1zIGVhc2U7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uOmZvY3Vze1xuICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uOmhvdmVye1xuICAgICAgICAgIGJhY2tncm91bmQ6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgfVxuICAgICAgICAuYm9keXtcbiAgICAgICAgICBmbGV4LWdyb3c6IDE7XG4gICAgICAgIH1cbiAgICAgICAgZm9vdGVye1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIGZvb3RlciBidXR0b257XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IDFyZW07XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvPlxuICApXG59XG5cbmNvbnN0IERvbmF0ZSA9ICh7IGN1cnJlbnQgfSkgPT4ge1xuICBjb25zdCBbbG9naW4sIHNldExvZ2luXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2RvbmF0ZSwgc2V0RG9uYXRlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3dlbGNvbWUsIHNldFdlbGNvbWVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbbG9hZGVyLCBzZXRMb2FkZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbbW91bnQsIHNldE1vdW50XSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbdXNlciwgc2V0VXNlcl0gPSB1c2VTdGF0ZSh7IGZ1bGxOYW1lOiAnc3RhciBncmVlbicsIHBlcmZpbEltZzogJy9zdGF0aWMvcmFuZG9tL3I1LmpwZycgfSk7XG4gIGNvbnN0IG9uVGVzdCA9IGFzeW5jKCk9PiB7XG4gICAgdHJ5e1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcvdXNlci90ZXN0TG9naW4nKTtcbiAgICAgIGlmKHJlcy5kYXRhKXtcbiAgICAgICAgc2V0TG9hZGVyKGZhbHNlKTtcbiAgICAgICAgc2V0VXNlcihyZXMuZGF0YSk7XG4gICAgICAgIHNldERvbmF0ZSh0cnVlKTtcbiAgICAgIH1cbiAgICB9Y2F0Y2goZSl7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgIHNldExvYWRlcihmYWxzZSk7XG4gICAgICBzZXRMb2dpbih0cnVlKTtcbiAgICB9XG4gIH1cbiAgICB1c2VFZmZlY3QoKCk9PiB7XG4gICAgICBvblRlc3QoKTtcbiAgICB9LFtdKVxuXG4gICAgY29uc3Qgb25Eb25hdGUgPSBhc3luYyhlKSA9PiB7XG4gICAgICB0cnl7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc2V0RG9uYXRlKGZhbHNlKTtcbiAgICAgICAgc2V0TG9hZGVyKHRydWUpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgICAgc2V0TG9hZGVyKGZhbHNlKTtcbiAgICAgICAgICBzZXRXZWxjb21lKHRydWUpO1xuICAgICAgICB9LDIwMDApO1xuICAgICAgfWNhdGNoKGUpe1xuICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgIH1cbiAgICB9XG4gIGNvbnN0IHsgcGVyZmlsSW1nLCBmdWxsTmFtZSwgd2FsbGV0IH0gPSB1c2VyO1xuICByZXR1cm4oXG4gICAgPGRpdiBjbGFzc05hbWU9XCJtYWluXCI+XG4gICAgICB7XG4gICAgICAgIGxvYWRlciAmJiA8ZGl2IGNsYXNzTmFtZT1cImxvYWRlclwiPjxTcGlubmVyIGNvbG9yPXsgY3VycmVudC50aXRsZSA9PT0gJ3NpZW1icmEnID8gJ21haW4tZ3JlZW4nIDogY3VycmVudC50aXRsZSA9PT0gJ2F5dWRhJyA/ICdtYWluLXJlZCcgOiAnbWFpbi1ibHVlJyB9IC8+PC9kaXY+XG4gICAgICB9XG4gICAgICB7XG4gICAgICAgIGxvZ2luICYmIDxkaXYgY2xhc3NOYW1lPVwibG9naW5cIj48TG9naW4gcHJpbT17IGN1cnJlbnQucHJpbSB9IHRpdGxlPXtjdXJyZW50LnRpdGxlfSAvPjwvZGl2PlxuICAgICAgfVxuICAgICAge1xuICAgICAgICBkb25hdGUgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFpbl9kb25hdGUgYW5pbWF0ZWQgZmFkZUluXCI+XG4gICAgICAgICAgICA8aGVhZGVyPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVzZXIgYW5pbWF0ZWQgZmFkZUluIGRlbGF5LTFzXCI+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9e3BlcmZpbEltZ30gYWx0PVwiXCIvPlxuICAgICAgICAgICAgICAgIDxwPntmdWxsTmFtZX08L3A+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvdW5kIGFuaW1hdGVkIGZsaXBJblggZGVsYXktMnNcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9zdGF0aWMvZ3JlZW5jb2luLnN2Z1wiIGFsdD1cIlwiLz5cbiAgICAgICAgICAgICAgICA8cD57d2FsbGV0fTwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2hlYWRlcj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5pbWF0ZWQgZmFkZUluIGRlbGF5LTJzXCI+XG4gICAgICAgICAgICAgIDxoMT5Eb25hcjwvaDE+XG4gICAgICAgICAgICAgIDxwPkluZ3Jlc2EgdW4gbW9udG8gZW4gZ3JlZW5jb2lucywgbG9zIG1pc21vcyBzZXJhbiBkZXNjb250YWRvcyBkZSBzdSBjdWVudGEgeSBzZXJhbiByZWNpYmlkb3MgcG9yIGxhcyBvZ2FuaXphY2lvbmVzIHF1ZSBhcG95YW4gZXN0YSBjYXVzYS48L3A+XG4gICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD1cIlBPU1RcIiBvblN1Ym1pdD17b25Eb25hdGV9PlxuICAgICAgICAgICAgICAgIDxpbnB1dCB2YWx1ZT17bW91bnR9IG9uQ2hhbmdlPXsoZSk9PiBzZXRNb3VudChlLmN1cnJlbnRUYXJnZXQudmFsdWUpfSB0eXBlPVwibnVtYmVyXCIvPlxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiPmRvbmFyPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgICB9XG4gICAgICB7XG4gICAgICAgIHdlbGNvbWUgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2VsY29tZSBhbmltYXRlZCBmYWRlSW5cIj5cbiAgICAgICAgICAgIDxoMT5GZWxpY2lkYWRlcywgeWEgZXJlcyBlbWJhamFkb3IgZGUgZXN0ZSBldmVudG88L2gxPlxuICAgICAgICAgICAgPHA+UG9kcmFzIHNlZ3VpciBsbyBxdWUgaGFjZW1vcyBjb24gdHUgY29sYWJvcmFjaW9uIGVuIGVsIHNpZ3VpZW50ZSA8YSBocmVmPVwiI1wiPkVubGFjZS48L2E+PC9wPlxuICAgICAgICAgICAgPHA+RGUgaWd1YWwgbWFuZXJhIGxhcyBhY3R1YWxpemFjaW9uZXMgZGVsIGV2ZW50byBzZXJhbiBwdWJsaWNhZGFzIGVuIHR1IG11cm8uPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgICB9XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIC5tYWlue1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaGVhZGVye1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAycmVtO1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlciBwe1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgfVxuICAgICAgICAubG9hZGVye1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgLmxvZ2lue1xuICAgICAgICAgIGhlaWdodDogNjAlO1xuICAgICAgICB9XG4gICAgICAgIC5tYWluX2RvbmF0ZSBoMXtcbiAgICAgICAgICBjb2xvcjogJHtjdXJyZW50LnByaW19O1xuICAgICAgICB9XG4gICAgICAgIC51c2VyIGltZ3tcbiAgICAgICAgICB3aWR0aDogODBweDtcbiAgICAgICAgICBoZWlnaHQ6IDgwcHg7XG4gICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgICAgb2JqZWN0LXBvc2l0aW9uOiBjZW50ZXI7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICB9XG4gICAgICAgIC5mb3VuZHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgLmZvdW5kIGltZ3tcbiAgICAgICAgICB3aWR0aDogMzBweDtcbiAgICAgICAgICBoZWlnaHQ6IDMwcHg7XG4gICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgICAgb2JqZWN0LXBvc2l0aW9uOyBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXR7XG4gICAgICAgICAgd2lkdGg6IDYwcHg7XG4gICAgICAgIH1cbiAgICAgICAgLndlbGNvbWUgaDEsIGF7XG4gICAgICAgICAgY29sb3I6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgfVxuICAgICAgICAud2VsY29tZSBhe1xuICAgICAgICAgIGZvbnQtd2lnaHQ6IDU1MDtcbiAgICAgICAgfVxuICAgICAgICAud2VsY29tZSBwe1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgfVxuICAgICAgYH1cbiAgICAgIDwvc3R5bGU+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuY29uc3QgRXZlbnRzID0gKCkgPT4ge1xuICBjb25zdCBldmVudHMgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5ldmVudHMpO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHsgdmlzaWJsZSwgY3VycmVudCB9ID0gZXZlbnRzO1xuICBjb25zdCBbZG9uYXRlLCBzZXREb25hdGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICB1c2VFZmZlY3QoKCk9PiBzZXREb25hdGUodHJ1ZSksW3Zpc2libGVdKTtcbiAgcmV0dXJuKFxuICAgIDxNb2RhbCBpc09wZW49e3Zpc2libGV9IHN0eWxlPXt7IG1pbldpZHRoOiAnOTV2dycgfX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW5cIj5cbiAgICAgICAgPGJ1dHRvbiB0aXRsZT1cIkNlcnJhclwiIG9uQ2xpY2s9eygpPT4gZGlzcGF0Y2goeyB0eXBlOiBPTl9FVkVOVCwgZXZlbnRUeXBlOiBudWxsIH0pfT5YPC9idXR0b24+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW1nXCI+XG4gICAgICAgICAgPGltZyBzcmM9e2N1cnJlbnQuaW1nfSBhbHQ9XCJcIi8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9cIj5cbiAgICAgICAgICB7XG4gICAgICAgICAgICBkb25hdGUgPyA8RG9uYXRlIGN1cnJlbnQ9e2N1cnJlbnR9IC8+IDogPEV2ZW50SG9tZSBjdXJyZW50PXtjdXJyZW50fSBzZXREb25hdGU9e3NldERvbmF0ZX0gLz5cbiAgICAgICAgICB9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgLm1haW57XG4gICAgICAgICAgICAvL2hlaWdodDogODB2aDtcbiAgICAgICAgICAgIC8vaGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuaW1nLCAuaW5mb3tcbiAgICAgICAgICAgIC8vd2lkdGg6IDUwJTtcbiAgICAgICAgICAgIC8vaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbWd7XG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIC8vaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgaGVpZ2h0OiA1MCU7XG4gICAgICAgICAgICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgICAgICAgICAgIG9iamVjdC1wb3NpdGlvbjogJHtjdXJyZW50LnByaW0gPT09IFwiIzAzYTdmMFwiID8gJ3RvcCcgOiAnYm90dG9tJyB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICAuaW5mb3tcbiAgICAgICAgICAgIHBhZGRpbmc6IC41cmVtIC41cmVtIC41cmVtIDFyZW07XG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnV0dG9ue1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAke2N1cnJlbnQucHJpbX07XG4gICAgICAgICAgICBjb2xvcjogJHtjdXJyZW50LnByaW19O1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogMjUwbXMgZWFzZTtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIHRvcDogLjVyZW07XG4gICAgICAgICAgICByaWdodDogLjVyZW07XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1dHRvbjpmb2N1c3tcbiAgICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1dHRvbjpob3ZlcntcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgIH1cbiAgICAgICAgYH1cbiAgICAgICAgPC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuY29uc3QgTGF5b3V0ID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xuICByZXR1cm4oXG4gICAgPGRpdj5cbiAgICAgIDxIZWFkPlxuICAgICAgICA8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cIi9zdGF0aWMvYW5pbWF0ZS5taW4uY3NzXCIvPlxuICAgICAgICA8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cIi9zdGF0aWMvYW9zLmNzc1wiLz5cbiAgICAgICAgPGxpbmsgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1BcmNoaXZvK0JsYWNrfE9wZW4rU2Fuc3xQYWNpZmljbyZkaXNwbGF5PXN3YXBcIiByZWw9XCJzdHlsZXNoZWV0XCIvPlxuICAgICAgPC9IZWFkPlxuICAgICAgPG1haW4+XG4gICAgICAgIDxIZWFkZXIgLz5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8RXZlbnRzIC8+XG4gICAgICA8L21haW4+XG4gICAgICA8TWVudSAvPlxuICAgICAgPE15TW9kYWwgLz5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgZGl2e1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB9XG4gICAgICAgIG1haW57XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgIGZsZXg6IDEgMSAwO1xuICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IExheW91dDtcbiJdfQ== */\n/*@ sourceURL=/home/felix/Documentos/projects/greenlink/components/main/layout.jsx */"))));
};

var Layout = function Layout(_ref9) {
  var children = _ref9.children;
  return __jsx("div", {
    className: "jsx-2044012869"
  }, __jsx(next_head__WEBPACK_IMPORTED_MODULE_10___default.a, null, __jsx("link", {
    rel: "stylesheet",
    href: "/static/animate.min.css",
    className: "jsx-2044012869"
  }), __jsx("link", {
    rel: "stylesheet",
    href: "/static/aos.css",
    className: "jsx-2044012869"
  }), __jsx("link", {
    href: "https://fonts.googleapis.com/css?family=Archivo+Black|Open+Sans|Pacifico&display=swap",
    rel: "stylesheet",
    className: "jsx-2044012869"
  })), __jsx("main", {
    className: "jsx-2044012869"
  }, __jsx(_header__WEBPACK_IMPORTED_MODULE_11__["default"], null), children, __jsx(Events, null)), __jsx(_menu__WEBPACK_IMPORTED_MODULE_12__["default"], null), __jsx(MyModal, null), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_5___default.a, {
    id: "2044012869"
  }, "div.jsx-2044012869{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;position:relative;}main.jsx-2044012869{width:100%;position:relative;-webkit-flex:1 1 0;-ms-flex:1 1 0;flex:1 1 0;overflow:hidden;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2ZlbGl4L0RvY3VtZW50b3MvcHJvamVjdHMvZ3JlZW5saW5rL2NvbXBvbmVudHMvbWFpbi9sYXlvdXQuanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThuQmtCLEFBR3dCLEFBS0YsV0FDTyxrQkFDUCw2Q0FOQSxBQU9LLFdBTkUsS0FPcEIsYUFOQSIsImZpbGUiOiIvaG9tZS9mZWxpeC9Eb2N1bWVudG9zL3Byb2plY3RzL2dyZWVubGluay9jb21wb25lbnRzL21haW4vbGF5b3V0LmpzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWR1Y2VyIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgT05fRVZFTlQgfSBmcm9tICcuLi8uLi9zdG9yZS9hY3Rpb25zJztcbi8vaW1wb3J0ICcuLi8uLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL3Njc3MvYm9vdHN0cmFwLnNjc3MnO1xuaW1wb3J0ICcuL2Jhc2Uuc2Nzcyc7XG5pbXBvcnQgSGVhZCBmcm9tICduZXh0L2hlYWQnO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuL2hlYWRlcic7XG5pbXBvcnQgTWVudSBmcm9tICcuL21lbnUnO1xuaW1wb3J0IFJvdXRlciBmcm9tICduZXh0L3JvdXRlcic7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgUG9wb3ZlciwgUG9wb3ZlckJvZHksIFNwaW5uZXIsIE1vZGFsIH0gZnJvbSAncmVhY3RzdHJhcCc7XG5pbXBvcnQgeyBjb2xvciwgZm9udCB9IGZyb20gJy4uLy4uL2xheW91dC92YXInO1xuaW1wb3J0IFRpdGxlIGZyb20gJy4uL21haW4vdGl0bGUnO1xuXG5jb25zdCBMb2dpbiA9ICh7IHByaW0sIHRpdGxlIH0pID0+IHtcblxuICBjb25zdCBbbWFpbCwgc2V0TWFpbF0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtwYXNzLCBzZXRQYXNzXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW21haWxQb3AsIHNldE1haWxQb3BdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbcGFzc1BvcCwgc2V0UGFzc1BvcF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtkaXNhYmxlLCBzZXREaXNhYmxlXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBvblN1Ym1pdCA9IGFzeW5jKGUpID0+IHtcbiAgICB0cnl7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBzZXREaXNhYmxlKHRydWUpO1xuICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgbWFpbCxcbiAgICAgICAgcGFzc1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MucG9zdCgnL3VzZXIvbG9naW4nLCBkYXRhKTtcbiAgICAgIGlmKHJlcy5kYXRhID09PSAnbWFpbCcpIHtcbiAgICAgICAgIHNldE1haWxQb3AodHJ1ZSk7XG4gICAgICAgICByZXR1cm4gc2V0RGlzYWJsZShmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZihyZXMuZGF0YSA9PT0gJ3Bhc3MnKXtcbiAgICAgICAgc2V0UGFzc1BvcCh0cnVlKVxuICAgICAgICByZXR1cm4gc2V0RGlzYWJsZShmYWxzZSk7XG4gICAgICB9O1xuICAgICAgUm91dGVyLnB1c2goYC9wZXJmaWwvJHtyZXMuZGF0YX1gKTtcbiAgICB9Y2F0Y2goZSl7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4oXG4gICAgPGZvcm0gb25TdWJtaXQ9e29uU3VibWl0fSBtZXRob2Q9XCJQT1NUXCI+XG4gICAgICA8aGVhZGVyPjxoMT5JbmljaWFyIFNlc2lvbjwvaDE+PC9oZWFkZXI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvZHlcIj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJtYWlsXCI+XG4gICAgICAgICAgPHA+VXN1YXJpbzwvcD5cbiAgICAgICAgICA8aW5wdXQgZGlzYWJsZWQ9e2Rpc2FibGV9IG9uRm9jdXM9eygpPT4gc2V0TWFpbFBvcChmYWxzZSl9IHZhbHVlPXttYWlsfSBvbkNoYW5nZT17KGUpPT4gc2V0TWFpbChlLmN1cnJlbnRUYXJnZXQudmFsdWUpfSB0eXBlPVwidGV4dFwiIGlkPVwibWFpbFwiIG5hbWU9XCJtYWlsXCIvPlxuICAgICAgICAgIDxQb3BvdmVyIHRhcmdldD1cIm1haWxcIiBwbGFjZW1lbnQ9XCJyaWdodFwiIGlzT3Blbj17bWFpbFBvcH0+XG4gICAgICAgICAgICA8UG9wb3ZlckJvZHk+RWwgY29ycmVvIG5vIGVzIHZhbGlkbzwvUG9wb3ZlckJvZHk+XG4gICAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInBhc3NcIj5cbiAgICAgICAgICA8cD5jb250cmFzZcOxYTwvcD5cbiAgICAgICAgICA8aW5wdXQgZGlzYWJsZWQ9e2Rpc2FibGV9IG9uRm9jdXM9eygpPT4gc2V0UGFzc1BvcChmYWxzZSl9IHZhbHVlPXtwYXNzfSBvbkNoYW5nZT17KGUpPT4gc2V0UGFzcyhlLmN1cnJlbnRUYXJnZXQudmFsdWUpfSB0eXBlPVwicGFzc3dvcmRcIiBuYW1lPVwicGFzc1wiIGlkPVwicGFzc1wiLz5cbiAgICAgICAgICA8UG9wb3ZlciB0YXJnZXQ9XCJwYXNzXCIgcGxhY2VtZW50PVwicmlnaHRcIiBpc09wZW49e3Bhc3NQb3B9PlxuICAgICAgICAgICAgPFBvcG92ZXJCb2R5PkxhIGNvbnRyYXNlw7FhIG5vIGVzIHZhbGlkYTwvUG9wb3ZlckJvZHk+XG4gICAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8Zm9vdGVyPlxuICAgICAgICB7XG4gICAgICAgICAgZGlzYWJsZSA/IDxTcGlubmVyIGNvbG9yPXsgdGl0bGUgPT09ICdzaWVtYnJhJyA/ICdtYWluLWdyZWVuJyA6IHRpdGxlID09PSAnYXl1ZGEnID8gJ21haW4tcmVkJyA6ICdtYWluLWJsdWUnIH0gLz4gOiA8YnV0dG9uIGRpc2FibGVkPXtkaXNhYmxlfSB0eXBlPVwic3VibWl0XCI+TG9naW48L2J1dHRvbj5cbiAgICAgICAgfVxuICAgICAgPC9mb290ZXI+XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIGZvcm17XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXJ7XG4gICAgICAgICAgY29sb3I6ICR7cHJpbSB8fCBjb2xvci5wcmltfTtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICAuYm9keXtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgfVxuICAgICAgICBsYWJlbDpudGgtY2hpbGQoMSl7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbiAgICAgICAgfVxuICAgICAgICBsYWJlbCBwe1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAuMik7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXR7XG4gICAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCByZ2JhKDAsIDAsIDAsIC4yKTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dDpmb2N1c3tcbiAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgIGJvcmRlci1jb2xvcjogJHtwcmltIHx8IGNvbG9yLnByaW19O1xuICAgICAgICB9XG4gICAgICAgIGZvb3RlcntcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgICAgICAgcGFkZGluZzogLjVyZW07XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9ue1xuICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICR7cHJpbSB8fCBjb2xvci5wcmltfTtcbiAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICAgIHRyYW5zaXRpb246IDI1MG1zIGVhc2U7XG4gICAgICAgICAgY29sb3I6ICR7cHJpbSB8fCBjb2xvci5wcmltfTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b246Zm9jdXN7XG4gICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b246aG92ZXJ7XG4gICAgICAgICAgYmFja2dyb3VuZDogJHtwcmltIHx8IGNvbG9yLnByaW19O1xuICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICB9XG4gICAgICBgfVxuICAgICAgPC9zdHlsZT5cbiAgICA8L2Zvcm0+XG4gIClcbn1cblxuY29uc3QgUmVnaXN0ZXIgPSAoKSA9PiB7XG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlUmVkdWNlcigoc3RhdGUsIG5leHQpID0+ICh7IC4uLnN0YXRlLCAuLi5uZXh0IH0pLHtcbiAgICBuYW1lOiAnJyxcbiAgICBsYXN0TmFtZTogJycsXG4gICAgbWFpbDogJycsXG4gICAgcGFzczogJycsXG4gICAgYmlydGhkYXk6ICcnLFxuICAgIGdlbnJlOiAnTXVqZXInLFxuICB9KVxuICBjb25zdCBbZGlzYWJsZSwgc2V0RGlzYWJsZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFttYWlsUG9wLCBzZXRNYWlsUG9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBvblN1Ym1pdCA9IGFzeW5jKGUpID0+IHtcbiAgICB0cnl7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCBkYXRhID0gdmFsdWU7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5wb3N0KCcvdXNlci9yZWdpc3RlcicsIGRhdGEpO1xuICAgICAgaWYocmVzLmRhdGEgPT09ICdtYWlsJyl7XG4gICAgICAgIHNldE1haWxQb3AodHJ1ZSk7XG4gICAgICAgIHJldHVybiBzZXREaXNhYmxlKGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIFJvdXRlci5wdXNoKGAvcGVyZmlsLyR7cmVzLmRhdGF9YCk7XG4gICAgfWNhdGNoKGUpe1xuICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuKFxuICAgIDxmb3JtIG9uU3VibWl0PXtvblN1Ym1pdH0gbWV0aG9kPVwiUE9TVFwiPlxuICAgICAgPGhlYWRlcj48aDE+UmVnaXN0cm88L2gxPjwvaGVhZGVyPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJib2R5XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZnVsbE5hbWVcIj5cbiAgICAgICAgICA8aW5wdXQgZGlzYWJsZWQ9e2Rpc2FibGV9IHZhbHVlPXt2YWx1ZS5uYW1lfSBvbkNoYW5nZSA9IHsoZSk9PiBzZXRWYWx1ZSh7IG5hbWU6IGUuY3VycmVudFRhcmdldC52YWx1ZSB9KX0gdHlwZT1cInRleHRcIiBpZD1cIm5hbWVcIiBwbGFjZWhvbGRlcj1cIk5vbWJyZVwiLz5cbiAgICAgICAgICA8aW5wdXQgZGlzYWJsZWQ9e2Rpc2FibGV9IHZhbHVlPXt2YWx1ZS5sYXN0TmFtZX0gb25DaGFuZ2UgPSB7KGUpPT4gc2V0VmFsdWUoeyBsYXN0TmFtZTogZS5jdXJyZW50VGFyZ2V0LnZhbHVlIH0pfSB0eXBlPVwidGV4dFwiIGlkPVwibGFzdE5hbWVcIiBwbGFjZWhvbGRlcj1cIkFwZWxsaWRvXCIvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGlucHV0IGRpc2FibGVkPXtkaXNhYmxlfSB2YWx1ZT17dmFsdWUubWFpbH0gb25DaGFuZ2UgPSB7KGUpPT4gc2V0VmFsdWUoeyBtYWlsOiBlLmN1cnJlbnRUYXJnZXQudmFsdWUgfSl9IG9uRm9jdXM9eygpPT4gc2V0TWFpbFBvcChmYWxzZSl9IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJtYWlsXCIgcGxhY2Vob2xkZXI9XCJDb3JyZW8gZWxlY3Ryw7NuaWNvXCIvPlxuICAgICAgICA8UG9wb3ZlciBwbGFjZW1lbnQ9XCJib3R0b21cIiB0YXJnZXQ9XCJtYWlsXCIgaXNPcGVuPXttYWlsUG9wfT5cbiAgICAgICAgICA8UG9wb3ZlckJvZHk+WWEgZXhpc3RlIHVuYSBjdWVudGEgY29uIGVzdGUgY29ycmVvPC9Qb3BvdmVyQm9keT5cbiAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICA8aW5wdXQgZGlzYWJsZWQ9e2Rpc2FibGV9IHZhbHVlPXt2YWx1ZS5wYXNzfSBvbkNoYW5nZSA9IHsoZSk9PiBzZXRWYWx1ZSh7IHBhc3M6IGUuY3VycmVudFRhcmdldC52YWx1ZSB9KX0gdHlwZT1cInBhc3N3b3JkXCIgaWQ9XCJwYXNzXCIgcGxhY2Vob2xkZXI9XCJjb250cmFzZcOxYVwiLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiaXJ0aF9zZXhcIj5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImJpcnRoZGF5XCI+XG4gICAgICAgICAgICA8cD5DdW1wbGVhw7FvczwvcD5cbiAgICAgICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gdmFsdWU9e3ZhbHVlLmJpcnRoZGF5fSBvbkNoYW5nZSA9IHsoZSk9PiBzZXRWYWx1ZSh7IGJpcnRoZGF5OiBlLmN1cnJlbnRUYXJnZXQudmFsdWUgfSl9IHR5cGU9XCJkYXRlXCIgbmFtZT1cImJpcnRoZGF5XCIgaWQ9XCJiaXJ0aGRheVwiLz5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiZ2VucmVcIj5cbiAgICAgICAgICAgIDxwPkdlbmVybzwvcD5cbiAgICAgICAgICAgIDxzZWxlY3QgZGlzYWJsZWQ9e2Rpc2FibGV9IHZhbHVlPXt2YWx1ZS5nZW5yZX0gb25DaGFuZ2UgPSB7KGUpPT4gc2V0VmFsdWUoeyBnZW5yZTogZS5jdXJyZW50VGFyZ2V0LnZhbHVlIH0pfSBuYW1lPVwiZ2VucmVcIiBpZD1cImdlbnJlXCI+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJtdWplclwiPk11amVyPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJob21icmVcIj5Ib21icmU8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm90cm9cIj5PdHJvPC9vcHRpb24+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGZvb3Rlcj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17KCk9PiBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaCh2YWwgPT4gc2V0VmFsdWUoeyBbdmFsXTogJycgfSkpfT5jYW5jZWxhcjwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIj5FbnZpYXI8L2J1dHRvbj5cbiAgICAgIDwvZm9vdGVyPlxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICBmb3Jte1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXJ7XG4gICAgICAgICAgY29sb3I6ICR7Y29sb3IucHJpbX07XG4gICAgICAgIH1cbiAgICAgICAgLmJvZHl7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIHBhZGRpbmc6IC41cmVtO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0e1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogLjVyZW07XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXRbdHlwZT1cImRhdGVcIl17XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAuMik7XG4gICAgICAgIH1cbiAgICAgICAgLmZ1bGxOYW1le1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgfVxuICAgICAgICAuZnVsbE5hbWUgaW5wdXR7XG4gICAgICAgIH1cbiAgICAgICAgLmZ1bGxOYW1lIGlucHV0Om50aC1jaGlsZCgyKXtcbiAgICAgICAgICBtYXJnaW4tbGVmdDogLjVyZW07XG4gICAgICAgIH1cbiAgICAgICAgLmJpcnRoX3NleHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICB9XG4gICAgICAgIGZvb3RlcntcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBwYWRkaW5nOiAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b257XG4gICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgY29sb3I6ICR7Y29sb3IucHJpbX07XG4gICAgICAgICAgYm9yZGVyOiAycHggc29saWQgJHtjb2xvci5wcmltfTtcbiAgICAgICAgICB0cmFuc2l0aW9uOiAyNTBtcyBlYXNlO1xuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b246Zm9jdXN7XG4gICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b246aG92ZXJ7XG4gICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgICAgYmFja2dyb3VuZDogJHtjb2xvci5wcmltfTtcbiAgICAgICAgfVxuICAgICAgYH1cbiAgICAgIDwvc3R5bGU+XG4gICAgPC9mb3JtPlxuICApXG59XG5cbmNvbnN0IExvZ1JlZyA9ICh7IGNoaWxkcmVuIH0pID0+IHtcblxuICByZXR1cm4oXG4gICAgPGRpdiBjbGFzc05hbWU9XCJtYWluX2NvbnRcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFpblwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInB1Ymxpc2hcIj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udFwiPlxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLm1haW5fY29udHtcbiAgICAgICAgICBoZWlnaHQ6IDEwMHZoO1xuICAgICAgICAgIHdpZHRoOiA3MCU7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgfVxuICAgICAgICAubWFpbntcbiAgICAgICAgICBoZWlnaHQ6IDUwJTtcbiAgICAgICAgICB3aWR0aDogODAlO1xuICAgICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgICAgICAgYW5pbWF0aW9uOiBkb3duIDYwMG1zIGVhc2UtaW4tb3V0O1xuICAgICAgICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGZvcndhcmRzO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIH1cbiAgICAgICAgLnB1Ymxpc2h7XG4gICAgICAgICAgd2lkdGg6IDUwJTtcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgYmFja2dyb3VuZDogdXJsKCcvc3RhdGljL3JhbmRvbS9yMTYuanBnJyl0b3AgY2VudGVyIG5vLXJlcGVhdDtcbiAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICAgICAgICB9XG4gICAgICAgIC5jb250e1xuICAgICAgICAgIHdpZHRoOiA1MCU7XG4gICAgICAgIH1cbiAgICAgICAgQGtleWZyYW1lcyBkb3due1xuICAgICAgICAgIDAle1xuICAgICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTAwJSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIDUwJXtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg1MHB4KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgMTAwJXtcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMHB4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmNvbnN0IE15TW9kYWwgPSAoKSA9PiB7XG4gIGNvbnN0IG1lbnUgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5tYWluLm5hdi52aXNpYmxlKTtcbiAgY29uc3QgbWFpbiA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLm1haW4ubmF2KTtcbiAgY29uc3QgeyBsb2dpbiwgcmVnaXN0ZXIgfSA9IG1haW47XG4gIHJldHVybihcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsXCI+XG4gICAgICB7XG4gICAgICAgIGxvZ2luICYmIDxMb2dSZWc+PExvZ2luIC8+PC9Mb2dSZWc+XG4gICAgICB9XG4gICAgICB7XG4gICAgICAgIHJlZ2lzdGVyICYmIDxMb2dSZWc+PFJlZ2lzdGVyIC8+PC9Mb2dSZWc+XG4gICAgICB9XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIC5tb2RhbHtcbiAgICAgICAgICBkaXNwbGF5OiAke21lbnUgPyAnYmxvY2snIDogJ25vbmUnfTtcbiAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgLjUpO1xuICAgICAgICAgIHotaW5kZXg6IDE1MDtcbiAgICAgICAgICBjb250ZW50OiBcIiBcIjtcbiAgICAgICAgICB0cmFuc2l0aW9uOiAyNTBtcyBlYXNlO1xuICAgICAgICB9XG4gICAgICBgfVxuICAgICAgPC9zdHlsZT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5jb25zdCBFdmVudEhvbWUgPSAoeyBjdXJyZW50LCBzZXREb25hdGUgfSkgPT4ge1xuXG4gIHJldHVybihcbiAgICA8PlxuICAgICAgPGhlYWRlcj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8aDE+e2N1cnJlbnQudGl0bGV9PC9oMT5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJzdWJUaXRsZVwiPntjdXJyZW50LnN1YlRpdGxlfTwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2hlYWRlcj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm9keVwiPlxuICAgICAgICA8cD57Y3VycmVudC5kZXNjcmlwdGlvbn08L3A+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxmb290ZXI+XG4gICAgICAgIDxidXR0b24+UGFydGljaXBhcjwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpPT4gc2V0RG9uYXRlKHRydWUpfT5Eb25hcjwvYnV0dG9uPlxuICAgICAgPC9mb290ZXI+XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIGhlYWRlcntcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXIgZGl2e1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gICAgICAgICAgbWFyZ2luOiA1cmVtIDAgMXJlbTtcbiAgICAgICAgfVxuICAgICAgICBoMSwgcHtcbiAgICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICAgIH1cbiAgICAgICAgaGVhZGVyIGgxLCAuc3ViVGl0bGV7XG4gICAgICAgICAgbWFyZ2luOjA7XG4gICAgICAgICAgY29sb3I6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbntcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAke2N1cnJlbnQucHJpbX07XG4gICAgICAgICAgY29sb3I6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgICB0cmFuc2l0aW9uOiAyNTBtcyBlYXNlO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpmb2N1c3tcbiAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpob3ZlcntcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAke2N1cnJlbnQucHJpbX07XG4gICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgIH1cbiAgICAgICAgLmJvZHl7XG4gICAgICAgICAgZmxleC1ncm93OiAxO1xuICAgICAgICB9XG4gICAgICAgIGZvb3RlcntcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgfVxuICAgICAgICBmb290ZXIgYnV0dG9ue1xuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxcmVtO1xuICAgICAgICB9XG4gICAgICBgfVxuICAgICAgPC9zdHlsZT5cbiAgICA8Lz5cbiAgKVxufVxuXG5jb25zdCBEb25hdGUgPSAoeyBjdXJyZW50IH0pID0+IHtcbiAgY29uc3QgW2xvZ2luLCBzZXRMb2dpbl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtkb25hdGUsIHNldERvbmF0ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFt3ZWxjb21lLCBzZXRXZWxjb21lXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2xvYWRlciwgc2V0TG9hZGVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW21vdW50LCBzZXRNb3VudF0gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgW3VzZXIsIHNldFVzZXJdID0gdXNlU3RhdGUoeyBmdWxsTmFtZTogJ3N0YXIgZ3JlZW4nLCBwZXJmaWxJbWc6ICcvc3RhdGljL3JhbmRvbS9yNS5qcGcnIH0pO1xuICBjb25zdCBvblRlc3QgPSBhc3luYygpPT4ge1xuICAgIHRyeXtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnL3VzZXIvdGVzdExvZ2luJyk7XG4gICAgICBpZihyZXMuZGF0YSl7XG4gICAgICAgIHNldExvYWRlcihmYWxzZSk7XG4gICAgICAgIHNldFVzZXIocmVzLmRhdGEpO1xuICAgICAgICBzZXREb25hdGUodHJ1ZSk7XG4gICAgICB9XG4gICAgfWNhdGNoKGUpe1xuICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICBzZXRMb2FkZXIoZmFsc2UpO1xuICAgICAgc2V0TG9naW4odHJ1ZSk7XG4gICAgfVxuICB9XG4gICAgdXNlRWZmZWN0KCgpPT4ge1xuICAgICAgb25UZXN0KCk7XG4gICAgfSxbXSlcblxuICAgIGNvbnN0IG9uRG9uYXRlID0gYXN5bmMoZSkgPT4ge1xuICAgICAgdHJ5e1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNldERvbmF0ZShmYWxzZSk7XG4gICAgICAgIHNldExvYWRlcih0cnVlKTtcbiAgICAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgIHNldExvYWRlcihmYWxzZSk7XG4gICAgICAgICAgc2V0V2VsY29tZSh0cnVlKTtcbiAgICAgICAgfSwyMDAwKTtcbiAgICAgIH1jYXRjaChlKXtcbiAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICB9XG4gICAgfVxuICBjb25zdCB7IHBlcmZpbEltZywgZnVsbE5hbWUsIHdhbGxldCB9ID0gdXNlcjtcbiAgcmV0dXJuKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibWFpblwiPlxuICAgICAge1xuICAgICAgICBsb2FkZXIgJiYgPGRpdiBjbGFzc05hbWU9XCJsb2FkZXJcIj48U3Bpbm5lciBjb2xvcj17IGN1cnJlbnQudGl0bGUgPT09ICdzaWVtYnJhJyA/ICdtYWluLWdyZWVuJyA6IGN1cnJlbnQudGl0bGUgPT09ICdheXVkYScgPyAnbWFpbi1yZWQnIDogJ21haW4tYmx1ZScgfSAvPjwvZGl2PlxuICAgICAgfVxuICAgICAge1xuICAgICAgICBsb2dpbiAmJiA8ZGl2IGNsYXNzTmFtZT1cImxvZ2luXCI+PExvZ2luIHByaW09eyBjdXJyZW50LnByaW0gfSB0aXRsZT17Y3VycmVudC50aXRsZX0gLz48L2Rpdj5cbiAgICAgIH1cbiAgICAgIHtcbiAgICAgICAgZG9uYXRlICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW5fZG9uYXRlIGFuaW1hdGVkIGZhZGVJblwiPlxuICAgICAgICAgICAgPGhlYWRlcj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1c2VyIGFuaW1hdGVkIGZhZGVJbiBkZWxheS0xc1wiPlxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtwZXJmaWxJbWd9IGFsdD1cIlwiLz5cbiAgICAgICAgICAgICAgICA8cD57ZnVsbE5hbWV9PC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3VuZCBhbmltYXRlZCBmbGlwSW5YIGRlbGF5LTJzXCI+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCIvc3RhdGljL2dyZWVuY29pbi5zdmdcIiBhbHQ9XCJcIi8+XG4gICAgICAgICAgICAgICAgPHA+e3dhbGxldH08L3A+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9oZWFkZXI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFuaW1hdGVkIGZhZGVJbiBkZWxheS0yc1wiPlxuICAgICAgICAgICAgICA8aDE+RG9uYXI8L2gxPlxuICAgICAgICAgICAgICA8cD5JbmdyZXNhIHVuIG1vbnRvIGVuIGdyZWVuY29pbnMsIGxvcyBtaXNtb3Mgc2VyYW4gZGVzY29udGFkb3MgZGUgc3UgY3VlbnRhIHkgc2VyYW4gcmVjaWJpZG9zIHBvciBsYXMgb2dhbml6YWNpb25lcyBxdWUgYXBveWFuIGVzdGEgY2F1c2EuPC9wPlxuICAgICAgICAgICAgICA8Zm9ybSBtZXRob2Q9XCJQT1NUXCIgb25TdWJtaXQ9e29uRG9uYXRlfT5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdmFsdWU9e21vdW50fSBvbkNoYW5nZT17KGUpPT4gc2V0TW91bnQoZS5jdXJyZW50VGFyZ2V0LnZhbHVlKX0gdHlwZT1cIm51bWJlclwiLz5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIj5kb25hcjwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgICAgfVxuICAgICAge1xuICAgICAgICB3ZWxjb21lICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndlbGNvbWUgYW5pbWF0ZWQgZmFkZUluXCI+XG4gICAgICAgICAgICA8aDE+RmVsaWNpZGFkZXMsIHlhIGVyZXMgZW1iYWphZG9yIGRlIGVzdGUgZXZlbnRvPC9oMT5cbiAgICAgICAgICAgIDxwPlBvZHJhcyBzZWd1aXIgbG8gcXVlIGhhY2Vtb3MgY29uIHR1IGNvbGFib3JhY2lvbiBlbiBlbCBzaWd1aWVudGUgPGEgaHJlZj1cIiNcIj5FbmxhY2UuPC9hPjwvcD5cbiAgICAgICAgICAgIDxwPkRlIGlndWFsIG1hbmVyYSBsYXMgYWN0dWFsaXphY2lvbmVzIGRlbCBldmVudG8gc2VyYW4gcHVibGljYWRhcyBlbiB0dSBtdXJvLjwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAubWFpbntcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlcntcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMnJlbTtcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXIgcHtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIH1cbiAgICAgICAgLmxvYWRlcntcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIC5sb2dpbntcbiAgICAgICAgICBoZWlnaHQ6IDYwJTtcbiAgICAgICAgfVxuICAgICAgICAubWFpbl9kb25hdGUgaDF7XG4gICAgICAgICAgY29sb3I6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgfVxuICAgICAgICAudXNlciBpbWd7XG4gICAgICAgICAgd2lkdGg6IDgwcHg7XG4gICAgICAgICAgaGVpZ2h0OiA4MHB4O1xuICAgICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgICAgIG9iamVjdC1wb3NpdGlvbjogY2VudGVyO1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgfVxuICAgICAgICAuZm91bmR7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIC5mb3VuZCBpbWd7XG4gICAgICAgICAgd2lkdGg6IDMwcHg7XG4gICAgICAgICAgaGVpZ2h0OiAzMHB4O1xuICAgICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgICAgIG9iamVjdC1wb3NpdGlvbjsgY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0e1xuICAgICAgICAgIHdpZHRoOiA2MHB4O1xuICAgICAgICB9XG4gICAgICAgIC53ZWxjb21lIGgxLCBhe1xuICAgICAgICAgIGNvbG9yOiAke2N1cnJlbnQucHJpbX07XG4gICAgICAgIH1cbiAgICAgICAgLndlbGNvbWUgYXtcbiAgICAgICAgICBmb250LXdpZ2h0OiA1NTA7XG4gICAgICAgIH1cbiAgICAgICAgLndlbGNvbWUgcHtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmNvbnN0IEV2ZW50cyA9ICgpID0+IHtcbiAgY29uc3QgZXZlbnRzID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuZXZlbnRzKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCB7IHZpc2libGUsIGN1cnJlbnQgfSA9IGV2ZW50cztcbiAgY29uc3QgW2RvbmF0ZSwgc2V0RG9uYXRlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgdXNlRWZmZWN0KCgpPT4gc2V0RG9uYXRlKHRydWUpLFt2aXNpYmxlXSk7XG4gIHJldHVybihcbiAgICA8TW9kYWwgaXNPcGVuPXt2aXNpYmxlfSBzdHlsZT17eyBtaW5XaWR0aDogJzk1dncnIH19PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYWluXCI+XG4gICAgICAgIDxidXR0b24gdGl0bGU9XCJDZXJyYXJcIiBvbkNsaWNrPXsoKT0+IGRpc3BhdGNoKHsgdHlwZTogT05fRVZFTlQsIGV2ZW50VHlwZTogbnVsbCB9KX0+WDwvYnV0dG9uPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImltZ1wiPlxuICAgICAgICAgIDxpbWcgc3JjPXtjdXJyZW50LmltZ30gYWx0PVwiXCIvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvXCI+XG4gICAgICAgICAge1xuICAgICAgICAgICAgZG9uYXRlID8gPERvbmF0ZSBjdXJyZW50PXtjdXJyZW50fSAvPiA6IDxFdmVudEhvbWUgY3VycmVudD17Y3VycmVudH0gc2V0RG9uYXRlPXtzZXREb25hdGV9IC8+XG4gICAgICAgICAgfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgIC5tYWlue1xuICAgICAgICAgICAgLy9oZWlnaHQ6IDgwdmg7XG4gICAgICAgICAgICAvL2hlaWdodDogMTAwdmg7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmltZywgLmluZm97XG4gICAgICAgICAgICAvL3dpZHRoOiA1MCU7XG4gICAgICAgICAgICAvL2hlaWdodDogMTAwJTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW1ne1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAvL2hlaWdodDogMTAwJTtcbiAgICAgICAgICAgIGhlaWdodDogNTAlO1xuICAgICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgICAgICBvYmplY3QtcG9zaXRpb246ICR7Y3VycmVudC5wcmltID09PSBcIiMwM2E3ZjBcIiA/ICd0b3AnIDogJ2JvdHRvbScgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmluZm97XG4gICAgICAgICAgICBwYWRkaW5nOiAuNXJlbSAuNXJlbSAuNXJlbSAxcmVtO1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1dHRvbntcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgYm9yZGVyOiAycHggc29saWQgJHtjdXJyZW50LnByaW19O1xuICAgICAgICAgICAgY29sb3I6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IDI1MG1zIGVhc2U7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IC41cmVtO1xuICAgICAgICAgICAgcmlnaHQ6IC41cmVtO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidXR0b246Zm9jdXN7XG4gICAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidXR0b246aG92ZXJ7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAke2N1cnJlbnQucHJpbX07XG4gICAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICB9XG4gICAgICAgIGB9XG4gICAgICAgIDwvc3R5bGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L01vZGFsPlxuICApXG59XG5cbmNvbnN0IExheW91dCA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgcmV0dXJuKFxuICAgIDxkaXY+XG4gICAgICA8SGVhZD5cbiAgICAgICAgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCIvc3RhdGljL2FuaW1hdGUubWluLmNzc1wiLz5cbiAgICAgICAgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCIvc3RhdGljL2Fvcy5jc3NcIi8+XG4gICAgICAgIDxsaW5rIGhyZWY9XCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9QXJjaGl2bytCbGFja3xPcGVuK1NhbnN8UGFjaWZpY28mZGlzcGxheT1zd2FwXCIgcmVsPVwic3R5bGVzaGVldFwiLz5cbiAgICAgIDwvSGVhZD5cbiAgICAgIDxtYWluPlxuICAgICAgICA8SGVhZGVyIC8+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPEV2ZW50cyAvPlxuICAgICAgPC9tYWluPlxuICAgICAgPE1lbnUgLz5cbiAgICAgIDxNeU1vZGFsIC8+XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIGRpdntcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgfVxuICAgICAgICBtYWlue1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICBmbGV4OiAxIDEgMDtcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICB9XG4gICAgICBgfVxuICAgICAgPC9zdHlsZT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBMYXlvdXQ7XG4iXX0= */\n/*@ sourceURL=/home/felix/Documentos/projects/greenlink/components/main/layout.jsx */"));
};

/* harmony default export */ __webpack_exports__["default"] = (Layout);

/***/ })

})
//# sourceMappingURL=index.js.2035d7ff6edfad472938.hot-update.js.map