{"version":3,"file":"static/webpack/static/development/pages/perfil.js.6c8f328d0174329e181c.hot-update.js","sources":["webpack:///./components/chat/private.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ON_CHAT_CLOSE, ON_CHAT_MINIMIZE, ON_CHAT_MSG, ON_CHAT_ALERT } from '../../store/actions';\nimport uuid from 'uuid/v1';\nimport persons from '../../test/persons';\nimport { color } from '../../layout/var';\nimport axios from 'axios';\nimport io from 'socket.io-client';\n\nconst Chat = ({ fullName, perfilImg, _id, minimize, chatHistory, privates, anAlert }) => {\n  const dispatch = useDispatch();\n  const cuid = useSelector(state => state.nav.notifications.id);\n  const [msg, setMsg] = useState([]);\n  const inputRef = useRef(null);\n  const chatRef = useRef(null);\n  const current = useSelector(state => state.chat.current);\n  const [chat, setChat] = useState([]);\n  const onChat = async() => {\n    try{\n      const res = await axios.get(`/chat/private/${_id}`);\n      setChat(res.data);\n      chatRef.current.scrollTo(0, chatRef.current.scrollHeight);\n    }catch(e){\n      console.log(e);\n    }\n  }\n  useEffect(()=> {\n    chatRef.current.scrollTo(0, chatRef.current.scrollHeight);\n    inputRef.current.focus();\n    onChat();\n  },[])\n\n  useEffect(()=> {\n    const socket = io();\n    try{\n      socket.open();\n      socket.on(`private:${cuid}`, (payload) => {\n        setChat([...chat, payload.msg]);\n      });\n    } catch(e){\n      console.log(e);\n    }\n    return ()=> socket.close();\n  },[]);\n\n  const onMinimize = () => {\n    const isMin = privates.find(user => user._id === _id);\n    if(isMin.minimize){\n      dispatch({ type: ON_CHAT_MINIMIZE, _id, option: false });\n      dispatch({ type: ON_CHAT_ALERT, _id, option: false });\n    } else {\n      dispatch({ type: ON_CHAT_MINIMIZE, _id, option: true });\n    }\n  };\n\n  const onSubmit = async(e) => {\n    try{\n      if(e.keyCode === 13 && !e.shiftKey || e.type === \"submit\"){\n        e.preventDefault();\n        const newMsg = {\n            id: cuid,\n            pm: msg,\n        }\n        const data = {\n          tid: _id,\n          msg: newMsg,\n        }\n        setMsg('');\n        setChat([...chat, newMsg]);\n        await axios.post('/chat/send', data);\n      }\n    }catch(err){\n      console.log(err);\n    }\n  }\n  return(\n    <li className=\"main shadow\">\n      <header>\n        <button onClick={onMinimize} className=\"name\" >\n          <img src={perfilImg} alt=\"\"/>\n          {fullName}\n        </button>\n        <button onClick={()=> dispatch({ type: ON_CHAT_CLOSE, _id })}>X</button>\n      </header>\n      <ul className=\"body\" ref={chatRef}>\n        {\n          chat.map(msg => (\n            <li key={uuid()} style={{ alignSelf: cuid === msg.id ? 'flex-end' : 'flex-start' }}>\n              {cuid !== msg.id && <img src={perfilImg} alt=\"\"/>}\n              <p style={{ background: cuid === msg.id ? color.prim : 'rgba(0, 0, 0, .050)', color: cuid === msg.id ? color.light : color.dark }}>{msg.pm}</p>\n            </li>\n          ))\n        }\n      </ul>\n      <form onSubmit={onSubmit}>\n        <textarea id={_id} value={msg} onChange={(e)=> setMsg(e.currentTarget.value)} onKeyDown={onSubmit} ref={inputRef} />\n      </form>\n      <footer></footer>\n      <style jsx>{`\n        li.main{\n          width: 25%;\n          border: 1px solid ${color.sec};\n          position: relative;\n          top: ${minimize ? '-43px' : '-343px'};\n          margin-right: 1rem;\n          border-radius: 3px 3px 0 0;\n        }\n        header{\n          display: flex;\n          align-items: center;\n          background: ${anAlert ? color.danger : color.prim};\n        }\n        header button{\n          transition: 250ms ease;\n          border: none;\n          font-size: 1rem;\n          color: rgba(255, 255, 255, .7);\n          text-transform: capitalize;\n          background: transparent;\n        }\n        header button:focus{\n          outline: none;\n        }\n        header button:hover{\n          color: #fff;\n        }\n        .name{\n          flex-grow: 1;\n          text-align: left;\n          display: flex;\n          align-items: center;\n          font-weight: 550;\n        }\n        .name img{\n          width: 40px;\n          height: 40px;\n          object-fit: cover;\n          object-position: center;\n          border-radius: 50%;\n          margin-right: .3rem;\n        }\n        ul{\n          list-style: none;\n          marign: 0;\n          padding: 0;\n          height: 250px;\n          overflow-y: scroll;\n          display: flex;\n          flex-direction: column;\n          background: #fff;\n        }\n        ul::-webkit-scrollbar{\n          width: 0;\n        }\n        ul li{\n          margin: .5rem;\n          display: flex;\n          align-items: center;\n          align-self: flex-start;\n        }\n        ul li img{\n          width: 25px;\n          height: 25px;\n          object-fit: cover;\n          object-position: center;\n          border-radius: 50%;\n        }\n        ul li p{\n          margin: 0;\n          background: rgba(0, 0, 0, .050);\n          padding: .1rem .2rem;\n          margin-left: .5rem;\n          border-radius: 3px;\n          border: 1px solid rgba(0, 0, 0, .080);\n        }\n        form{\n          width: 30px;\n          width: 100%;\n          margin: 0;\n          padding: 0;\n          display: flex;\n        }\n        form textarea{\n          resize: none;\n          width: 100%;\n          height: 100%;\n          margin: 0;\n          font-size: 11px;\n        }\n        footer{\n          height: 10px;\n          background: ${color.prim};\n        }\n      `}\n      </style>\n    </li>\n  )\n}\n\nconst Private = () => {\n  const [chats, setChats] = useState([]);\n  const privates = useSelector(state => state.chat.privates);\n  useEffect(()=> {\n    setChats(privates);\n  },[privates.length]);\n\n  return(\n    <div>\n      <ul>\n        {\n          privates.map((chat)=> <Chat key={uuid()} {...chat} privates={privates} />)\n        }\n      </ul>\n      <style jsx>{`\n        ul{\n          list-style: none;\n          margin: 0;\n          padding: 0;\n          display: flex;\n          justify-content: flex-end;\n        }\n      `}\n      </style>\n    </div>\n  )\n};\n\nexport default Private;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAbA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAiBA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAmBA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AArBA;AAAA;AAAA;AAyHA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAkBA;AACA;AACA;;;;A","sourceRoot":""}