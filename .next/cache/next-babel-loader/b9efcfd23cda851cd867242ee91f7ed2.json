{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport React, { useReducer, useState, useEffect } from 'react';\nimport './greenpost.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ON_GREENINFO, ON_GREEN_CREATOR, ON_GREEN_LIKE, OFF_GREEN_LIKE } from '../../store/actions';\nimport classnames from 'classnames';\nimport { faExpandArrowsAlt, faArrowCircleLeft, faUserPlus, faHeart, faGift, faComment, faHome, faShare, faMapMarkerAlt, faDollarSign, faSchool, faMailBulk, faPhone } from '@fortawesome/free-solid-svg-icons';\nimport GreenHome from './home';\nimport Wish from './wish';\nimport Comment from './comment';\nimport Creator from './creator';\nimport axios from 'axios';\nimport { Modal } from 'reactstrap';\n\nconst GreenNav = ({\n  setVisible\n}) => {\n  const uid = useSelector(state => state.nav.notifications.id);\n  const pid = useSelector(state => state.greenpost.current._id);\n  const likes = useSelector(state => state.greenpost.current.likes);\n  const dispatch = useDispatch();\n  const {\n    0: like,\n    1: setLike\n  } = useState(false);\n  useEffect(() => {\n    const checkLike = likes.find(like => like._id === uid);\n    if (checkLike) setLike(true);\n  }, [likes, uid]);\n\n  const onReact = async () => {\n    try {\n      const res = await axios.get(`/green/like/${pid}`);\n\n      if (!like) {\n        dispatch({\n          type: ON_GREEN_LIKE,\n          like: res.data\n        });\n        setLike(true);\n      } else {\n        dispatch({\n          type: OFF_GREEN_LIKE,\n          uid\n        });\n        setLike(false);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return __jsx(\"nav\", {\n    className: \"greennav_main_cont\"\n  }, __jsx(\"ul\", null, __jsx(\"li\", null, __jsx(\"button\", {\n    onClick: () => setVisible({\n      home: true,\n      wish: false,\n      comments: false\n    }),\n    title: \"Inicio\"\n  }, __jsx(FontAwesomeIcon, {\n    icon: faHome\n  }))), __jsx(\"li\", null, __jsx(\"button\", {\n    onClick: onReact,\n    style: like ? {\n      background: \"#8bb940\",\n      color: \"#ffffff\"\n    } : {\n      background: \"transparent\",\n      color: \"#ffffff\"\n    },\n    title: \"Reaccionar\"\n  }, __jsx(FontAwesomeIcon, {\n    icon: faHeart\n  }))), __jsx(\"li\", null, __jsx(\"button\", {\n    onClick: () => setVisible({\n      home: false,\n      wish: true,\n      comments: false\n    }),\n    title: \"Ver Deseo\"\n  }, __jsx(FontAwesomeIcon, {\n    icon: faGift\n  }))), __jsx(\"li\", null, __jsx(\"button\", {\n    onClick: () => setVisible({\n      home: false,\n      wish: false,\n      comments: true\n    }),\n    title: \"Comentar\"\n  }, __jsx(FontAwesomeIcon, {\n    icon: faComment\n  }))), __jsx(\"li\", null, __jsx(\"button\", {\n    title: \"Compartir en mi perfil\"\n  }, __jsx(FontAwesomeIcon, {\n    icon: faShare\n  }))), __jsx(\"li\", null, __jsx(\"button\", {\n    title: \"Abrir en pantala completa\"\n  }, __jsx(FontAwesomeIcon, {\n    icon: faExpandArrowsAlt\n  })))));\n};\n\nconst GreenInfo = () => {\n  const info = useSelector(state => state.greenpost.info);\n  const dispatch = useDispatch();\n  const {\n    0: visible,\n    1: setVisible\n  } = useReducer((state, next) => _objectSpread({}, state, next), {\n    home: true,\n    wish: false,\n    comments: false\n  });\n  return __jsx(\"div\", {\n    className: classnames({\n      greeninfo_main_cont: true,\n      greeninfo_main_cont_visible: info\n    })\n  }, __jsx(\"div\", {\n    className: \"section_main_cont\"\n  }, visible.home && __jsx(GreenHome, null), visible.wish && __jsx(Wish, null), visible.comments && __jsx(Comment, null)), __jsx(\"footer\", null, __jsx(\"button\", {\n    onClick: () => dispatch({\n      type: ON_GREEN_CREATOR\n    }),\n    title: \"Crear Post\"\n  }, \"GreenPost\"), __jsx(GreenNav, {\n    setVisible: setVisible\n  })));\n};\n\nconst BtnInfo = () => {\n  const info = useSelector(state => state.greenpost.info);\n  const green = useSelector(state => state.greenpost);\n  const dispatch = useDispatch();\n  return __jsx(\"button\", {\n    title: info ? \"Ocultar\" : \"Ver\",\n    onClick: () => dispatch({\n      type: ON_GREENINFO,\n      option: !info\n    }),\n    className: classnames({\n      btngreen_info: true,\n      btngreen_info_rotate: info\n    })\n  }, __jsx(FontAwesomeIcon, {\n    icon: faArrowCircleLeft\n  }));\n};\n\nconst GreenPost = () => {\n  const green = useSelector(state => state.greenpost.current);\n  const greenCreator = useSelector(state => state.greenpost.creator);\n  const img = green.img;\n  return __jsx(\"div\", {\n    style: {\n      backgroundImage: `url(${img})`\n    },\n    className: \"greenpost_main_cont\"\n  }, __jsx(Modal, {\n    style: {\n      minWidth: '80%'\n    },\n    isOpen: greenCreator\n  }, __jsx(Creator, {\n    green: true\n  })), __jsx(GreenInfo, null), __jsx(BtnInfo, null));\n};\n\nexport default GreenPost;","map":null,"metadata":{},"sourceType":"module"}