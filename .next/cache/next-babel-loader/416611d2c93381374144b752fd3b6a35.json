{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { combineReducers } from 'redux';\nimport { themeGreen, themeRed, themeBlue } from '../layout/main';\nconst themes = [themeGreen, themeRed, themeBlue];\nimport { ON_DOWN, ON_VIEW_NAV, navView, ON_NOTE, ON_NOTIFICATIONS, ON_LOADER, ON_LOGIN, ON_USER, ON_GIFT, ON_GREENINFO, ON_GREENPOST, ON_GREEN_CREATOR, ON_GREEN_LIKE, OFF_GREEN_LIKE, ON_GREEN_WISH_FOUND, ON_GREEN_COMMENT, ON_STORE, storeSections, ON_PRODUCTS, ON_POST_REGISTER, ON_WALLET, ON_UPDATE, ON_FLOAT, OFF_FLOAT, ON_VAULT, ON_VAULT_HOME, ON_VAULT_PRODUCT, ON_SPACE_HOME, ON_SPACE_WALL, ON_SPACE_CHAT, ON_SPACE_FRIENDS, ON_SPACE_EVENTS, spaceSections, ON_POST, ON_WALL_TOP, ON_WALL_POSTS, ON_CONFIRM, ON_WISH, ON_CHAT_FRIEND, ON_CHAT_PRIVATE, ON_CHAT_CLOSE, ON_CHAT_MINIMIZE, ON_CHAT_MSG, ON_CHAT_ALERT, ON_MAIN_NAV, ON_MAIN_THEME, ON_POST_VIEW } from './actions';\nexport const initialState = {\n  nav: {\n    loader: 0,\n    login: false,\n    down: false,\n    wallet: 0,\n    notifications: {\n      id: '',\n      wallet: 0,\n      notes: {\n        view: false,\n        items: []\n      },\n      gifts: {\n        view: false,\n        items: []\n      },\n      friendReq: {\n        view: false,\n        items: []\n      }\n    }\n  },\n  user: {\n    id: '',\n    owner: false,\n    mail: '',\n    pass: '',\n    name: '',\n    lastName: '',\n    birthday: '',\n    greenPost: [{\n      _id: ''\n    }],\n    perfilImg: '',\n    originCity: '',\n    actualCity: '',\n    primaryShool: '',\n    secondarySchoool: '',\n    university: '',\n    job: '',\n    posts: [{\n      green: true,\n      img: '',\n      date: '',\n      author: '',\n      _id: '',\n      history: '',\n      comments: [],\n      likes: [],\n      wish: {\n        id: '123456789',\n        name: 'Oreo',\n        img: '/static/store/products/gol-1.jpg',\n        tag: 'gol',\n        price: 100,\n        description: 'Lorem ipsum dolor sit amet consectetur adipisicing elit. Necessitatibus, cumque atque, dolore qui, tempora delectus provident saepe dicta minus iusto iste autem? Aut, ipsum. Ipsam illo perspiciatis optio architecto cumque!'\n      }\n    }],\n    interest: [],\n    events: [],\n    friends: []\n  },\n  greenpost: {\n    _id: '',\n    info: false,\n    creator: false,\n    current: {\n      likes: [],\n      comments: [],\n      wish: {}\n    }\n  },\n  store: {\n    visible: false,\n    current: {},\n    home: false,\n    product: false,\n    music: false,\n    ebook: false,\n    toy: false,\n    tv: false,\n    jewel: false,\n    candy: false,\n    items: []\n  },\n  vault: {\n    visible: false,\n    home: true,\n    product: false,\n    current: {},\n    items: []\n  },\n  postregister: false,\n  floatingnotes: [],\n  space: {\n    home: true,\n    wall: false,\n    chat: false,\n    friends: false,\n    envents: false\n  },\n  wall: {\n    top: [],\n    posts: []\n  },\n  confirm: {\n    visible: false,\n    current: {}\n  },\n  chat: {\n    friends: [],\n    privates: [],\n    current: ''\n  },\n  main: {\n    nav: {\n      visible: false\n    },\n    theme: 0\n  },\n  post: {\n    visible: false,\n    current: {}\n  }\n};\n\nconst nav = (state = initialState.nav, action) => {\n  switch (action.type) {\n    case ON_DOWN:\n      return _Object$assign({}, state, {\n        down: action.option\n      });\n\n    case ON_NOTIFICATIONS:\n      return _Object$assign({}, state, {\n        notifications: action.notifications\n      });\n\n    case ON_LOADER:\n      return _Object$assign({}, state, {\n        loader: action.loader\n      });\n\n    case ON_LOGIN:\n      return _Object$assign({}, state, {\n        login: action.option\n      });\n\n    case ON_WALLET:\n      return _Object$assign({}, state, {\n        notifications: _Object$assign({}, state.notifications, {\n          wallet: state.notifications.wallet + action.coin\n        })\n      });\n\n    case ON_VIEW_NAV:\n      if (action.note === navView.GIFT) {\n        return _Object$assign({}, state, {\n          notifications: _Object$assign({}, state.notifications, {\n            gifts: _Object$assign({}, state.notifications.gifts, {\n              view: true\n            })\n          })\n        });\n      }\n\n      if (action.note === navView.NOTES) {\n        return _Object$assign({}, state, {\n          notifications: _Object$assign({}, state.notifications, {\n            notes: _Object$assign({}, state.notifications.notes, {\n              view: true\n            })\n          })\n        });\n      }\n\n      if (action.note === navView.FRIEND) {\n        return _Object$assign({}, state, {\n          notifications: _Object$assign({}, state.notifications, {\n            friendReq: _Object$assign({}, state.notifications.friendReq, {\n              view: true\n            })\n          })\n        });\n      }\n\n    case ON_NOTE:\n      const {\n        gifts,\n        notes,\n        friendReq\n      } = state.notifications;\n\n      if (action.payload.note === navView.GIFT) {\n        return _Object$assign({}, state, {\n          notifications: _Object$assign({}, state.notifications, {\n            gifts: _Object$assign({}, state.notifications.gifts, {\n              view: false,\n              items: [action.payload.user, ...gifts.items]\n            })\n          })\n        });\n      }\n\n      if (action.payload.note === navView.NOTES) {\n        return _Object$assign({}, state, {\n          notifications: _Object$assign({}, state.notifications, {\n            notes: _Object$assign({}, state.notifications.notes, {\n              view: false,\n              items: [action.payload.user, ...notes.items]\n            })\n          })\n        });\n      }\n\n      if (action.payload.note === navView.FRIEND) {\n        return _Object$assign({}, state, {\n          notifications: _Object$assign({}, state.notifications, {\n            friendReq: _Object$assign({}, state.notifications.friendReq, {\n              view: false,\n              items: [action.payload.user, ...friendReq.items]\n            })\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst user = (state = initialState.user, action) => {\n  switch (action.type) {\n    case ON_USER:\n      return _Object$assign({}, state, action.user);\n\n    case ON_UPDATE:\n      return _Object$assign({}, state, _objectSpread({}, action.payload));\n\n    default:\n      return state;\n  }\n};\n\nconst greenpost = (state = initialState.greenpost, action) => {\n  switch (action.type) {\n    case ON_GREENINFO:\n      return _Object$assign({}, state, {\n        info: action.option\n      });\n\n    case ON_GREEN_CREATOR:\n      return _Object$assign({}, state, {\n        creator: !state.creator\n      });\n\n    case ON_GREENPOST:\n      return _Object$assign({}, state, {\n        current: action.greenpost\n      });\n\n    case ON_GREEN_LIKE:\n      return _Object$assign({}, state, {\n        current: _Object$assign({}, state.current, {\n          likes: [action.like, ...state.current.likes]\n        })\n      });\n\n    case ON_WISH:\n      return _Object$assign({}, state, {\n        current: _Object$assign({}, state.current, {\n          wish: action.wish\n        })\n      });\n\n    case OFF_GREEN_LIKE:\n      const nextState = state.current.likes.filter(like => like._id !== action.uid);\n      return _Object$assign({}, state, {\n        current: _Object$assign({}, state.current, {\n          likes: nextState\n        })\n      });\n\n    case ON_GREEN_WISH_FOUND:\n      return _Object$assign({}, state, {\n        current: _Object$assign({}, state.current, {\n          wish: _Object$assign({}, state.current.wish, {\n            found: state.current.wish.found + action.found\n          })\n        })\n      });\n\n    case ON_GREEN_COMMENT:\n      return _Object$assign({}, state, {\n        current: _Object$assign({}, state.current, {\n          comments: [...state.current.comments, action.comment]\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst greenstore = (state = initialState.store, action) => {\n  const {\n    HOME,\n    PRODUCT,\n    MUSIC,\n    TV,\n    EBOOK,\n    CANDY,\n    TOY,\n    JEWEL\n  } = storeSections;\n\n  switch (action.type) {\n    case ON_STORE:\n      return _Object$assign({}, state, {\n        visible: !state.visible,\n        home: true\n      });\n\n    case ON_PRODUCTS:\n      return _Object$assign({}, state, {\n        items: action.products\n      });\n\n    case PRODUCT:\n      return _Object$assign({}, state, {\n        current: action.product,\n        product: true,\n        home: false,\n        jewel: false,\n        ebook: false,\n        music: false,\n        toy: false,\n        tv: false,\n        candy: false\n      });\n\n    case HOME:\n      return _Object$assign({}, state, {\n        product: false,\n        home: true,\n        jewel: false,\n        ebook: false,\n        music: false,\n        toy: false,\n        tv: false,\n        candy: false\n      });\n\n    case MUSIC:\n      return _Object$assign({}, state, {\n        product: false,\n        home: false,\n        jewel: false,\n        ebook: false,\n        music: true,\n        toy: false,\n        tv: false,\n        candy: false\n      });\n\n    case TV:\n      return _Object$assign({}, state, {\n        product: false,\n        home: false,\n        jewel: false,\n        ebook: false,\n        music: false,\n        toy: false,\n        tv: true,\n        candy: false\n      });\n\n    case JEWEL:\n      return _Object$assign({}, state, {\n        product: false,\n        home: false,\n        jewel: true,\n        ebook: false,\n        music: false,\n        toy: false,\n        tv: false,\n        candy: false\n      });\n\n    case TOY:\n      return _Object$assign({}, state, {\n        product: false,\n        home: false,\n        jewel: false,\n        ebook: false,\n        music: false,\n        toy: true,\n        tv: false,\n        candy: false\n      });\n\n    case CANDY:\n      return _Object$assign({}, state, {\n        product: false,\n        home: false,\n        jewel: false,\n        ebook: false,\n        music: false,\n        toy: false,\n        tv: false,\n        candy: true\n      });\n\n    case EBOOK:\n      return _Object$assign({}, state, {\n        product: false,\n        home: false,\n        jewel: false,\n        ebook: true,\n        music: false,\n        toy: false,\n        tv: false,\n        candy: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst postregister = (state = initialState.postregister, action) => {\n  if (action.type === ON_POST_REGISTER) {\n    return !state;\n  }\n\n  return state;\n};\n\nconst floatingnotes = (state = initialState.floatingnotes, action) => {\n  if (action.type === ON_FLOAT) {\n    return [...state, action.payload];\n  }\n\n  if (action.type === OFF_FLOAT) {\n    const nextState = state.filter(note => note.id !== action.id);\n    return nextState;\n  }\n\n  return state;\n};\n\nconst vault = (state = initialState.vault, action) => {\n  switch (action.type) {\n    case ON_VAULT:\n      return _Object$assign({}, state, {\n        visible: !state.visible\n      });\n\n    case ON_VAULT_HOME:\n      return _Object$assign({}, state, {\n        home: true,\n        product: false\n      });\n\n    case ON_VAULT_PRODUCT:\n      return _Object$assign({}, state, {\n        home: false,\n        product: true,\n        current: action.product\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst space = (state = initialState.space, action) => {\n  switch (action.type) {\n    case ON_SPACE_HOME:\n      return _Object$assign({}, state, {\n        home: true,\n        wall: false,\n        chat: false,\n        friends: false,\n        events: false\n      });\n\n    case ON_SPACE_WALL:\n      return _Object$assign({}, state, {\n        home: false,\n        wall: true,\n        chat: false,\n        friends: false,\n        events: false\n      });\n\n    case ON_SPACE_CHAT:\n      return _Object$assign({}, state, {\n        home: false,\n        wall: false,\n        chat: true,\n        friends: false,\n        events: false\n      });\n\n    case ON_SPACE_FRIENDS:\n      return _Object$assign({}, state, {\n        home: false,\n        wall: false,\n        chat: false,\n        friends: true,\n        events: false\n      });\n\n    case ON_SPACE_EVENTS:\n      return _Object$assign({}, state, {\n        home: false,\n        wall: false,\n        chat: false,\n        friends: false,\n        events: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst wall = (state = initialState.wall, action) => {\n  switch (action.type) {\n    case ON_POST:\n      return _Object$assign({}, state, {\n        posts: [action.post, ...state.posts]\n      });\n\n    case ON_WALL_TOP:\n      return _Object$assign({}, state, {\n        top: action.posts\n      });\n\n    case ON_WALL_POSTS:\n      return _Object$assign({}, state, {\n        posts: action.posts\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst confirm = (state = initialState.confirm, action) => {\n  switch (action.type) {\n    case ON_CONFIRM:\n      return _Object$assign({}, state, {\n        visible: !state.visible,\n        current: action.current\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst chat = (state = initialState.chat, action) => {\n  const {\n    privates\n  } = state;\n\n  switch (action.type) {\n    case ON_CHAT_PRIVATE:\n      //const nextArr = privates.length === 4 ?  privates.slice(0, 3) : privates;\n      return _Object$assign({}, state, {\n        privates: [action.user, ...privates.slice(3)]\n      });\n\n    case ON_CHAT_CLOSE:\n      return _Object$assign({}, state, {\n        privates: privates.filter(user => user._id !== action._id)\n      });\n\n    case ON_CHAT_MINIMIZE:\n      return _Object$assign({}, state, {\n        privates: privates.map(user => user._id !== action._id ? user : _Object$assign({}, user, {\n          minimize: action.option\n        }))\n      });\n\n    case ON_CHAT_MSG:\n      return _Object$assign({}, state, {\n        privates: privates.map(user => user._id !== action._id ? user : _Object$assign({}, user, {\n          history: [...user.history, action.msg]\n        })),\n        current: action._id\n      });\n\n    case ON_CHAT_ALERT:\n      return _Object$assign({}, state, {\n        privates: privates.map(user => user._id !== action._id ? user : _Object$assign({}, user, {\n          anAlert: action.option\n        }))\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst main = (state = initialState.main, action) => {\n  switch (action.type) {\n    case ON_MAIN_NAV:\n      const {\n        visible\n      } = state.nav;\n      return _Object$assign({}, state, {\n        nav: _Object$assign({}, state.nav, {\n          visible: !visible\n        })\n      });\n\n    case ON_MAIN_THEME:\n      return _Object$assign({}, state, {\n        theme: action.index\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst post = (state = initialState.post, action) => {\n  switch (action.type) {\n    case ON_POST_VIEW:\n      return _Object$assign({}, state, {\n        current: action.post,\n        visible: !state.visible\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const store = combineReducers({\n  nav,\n  user,\n  greenpost,\n  greenstore,\n  postregister,\n  floatingnotes,\n  vault,\n  space,\n  wall,\n  confirm,\n  chat,\n  main,\n  post\n});","map":null,"metadata":{},"sourceType":"module"}