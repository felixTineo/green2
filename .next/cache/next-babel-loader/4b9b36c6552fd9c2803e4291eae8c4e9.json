{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ON_EVENT } from '../../store/actions'; //import '../../node_modules/bootstrap/scss/bootstrap.scss';\n\nimport './base.scss';\nimport Head from 'next/head';\nimport Header from './header';\nimport Menu from './menu';\nimport Router from 'next/router';\nimport axios from 'axios';\nimport { Popover, PopoverBody, Spinner, Modal } from 'reactstrap';\nimport { color, font } from '../../layout/var';\nimport Title from '../main/title';\n\nconst Login = ({\n  prim,\n  title\n}) => {\n  const {\n    0: mail,\n    1: setMail\n  } = useState('');\n  const {\n    0: pass,\n    1: setPass\n  } = useState('');\n  const {\n    0: mailPop,\n    1: setMailPop\n  } = useState(false);\n  const {\n    0: passPop,\n    1: setPassPop\n  } = useState(false);\n  const {\n    0: disable,\n    1: setDisable\n  } = useState(false);\n\n  const onSubmit = async e => {\n    try {\n      e.preventDefault();\n      setDisable(true);\n      const data = {\n        mail,\n        pass\n      };\n      const res = await axios.post('/user/login', data);\n\n      if (res.data === 'mail') {\n        setMailPop(true);\n        return setDisable(false);\n      }\n\n      if (res.data === 'pass') {\n        setPassPop(true);\n        return setDisable(false);\n      }\n\n      ;\n      Router.push(`/perfil/${res.data}`);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return __jsx(\"form\", {\n    onSubmit: onSubmit,\n    method: \"POST\",\n    className: _JSXStyle.dynamic([[\"963076289\", [prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim]]])\n  }, __jsx(\"header\", {\n    className: _JSXStyle.dynamic([[\"963076289\", [prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim]]])\n  }, __jsx(\"h1\", {\n    className: _JSXStyle.dynamic([[\"963076289\", [prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim]]])\n  }, \"Iniciar Sesion\")), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"963076289\", [prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim]]]) + \" \" + \"body\"\n  }, __jsx(\"label\", {\n    htmlFor: \"mail\",\n    className: _JSXStyle.dynamic([[\"963076289\", [prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim]]])\n  }, __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"963076289\", [prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim]]])\n  }, \"Usuario\"), __jsx(\"input\", {\n    disabled: disable,\n    onFocus: () => setMailPop(false),\n    value: mail,\n    onChange: e => setMail(e.currentTarget.value),\n    type: \"text\",\n    id: \"mail\",\n    name: \"mail\",\n    className: _JSXStyle.dynamic([[\"963076289\", [prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim]]])\n  }), __jsx(Popover, {\n    target: \"mail\",\n    placement: \"right\",\n    isOpen: mailPop\n  }, __jsx(PopoverBody, null, \"El correo no es valido\"))), __jsx(\"label\", {\n    htmlFor: \"pass\",\n    className: _JSXStyle.dynamic([[\"963076289\", [prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim]]])\n  }, __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"963076289\", [prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim]]])\n  }, \"contrase\\xF1a\"), __jsx(\"input\", {\n    disabled: disable,\n    onFocus: () => setPassPop(false),\n    value: pass,\n    onChange: e => setPass(e.currentTarget.value),\n    type: \"password\",\n    name: \"pass\",\n    id: \"pass\",\n    className: _JSXStyle.dynamic([[\"963076289\", [prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim]]])\n  }), __jsx(Popover, {\n    target: \"pass\",\n    placement: \"right\",\n    isOpen: passPop\n  }, __jsx(PopoverBody, null, \"La contrase\\xF1a no es valida\")))), __jsx(\"footer\", {\n    className: _JSXStyle.dynamic([[\"963076289\", [prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim]]])\n  }, disable ? __jsx(Spinner, {\n    color: title === 'siembra' ? 'main-green' : title === 'ayuda' ? 'main-red' : 'main-blue'\n  }) : __jsx(\"button\", {\n    disabled: disable,\n    type: \"submit\",\n    className: _JSXStyle.dynamic([[\"963076289\", [prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim]]])\n  }, \"Login\")), __jsx(_JSXStyle, {\n    id: \"963076289\",\n    dynamic: [prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim, prim || color.prim]\n  }, `form.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:100%;}header.__jsx-style-dynamic-selector{color:${prim || color.prim};margin-top:.5rem;}.body.__jsx-style-dynamic-selector{width:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}label.__jsx-style-dynamic-selector:nth-child(1){margin-bottom:1rem;}label.__jsx-style-dynamic-selector p.__jsx-style-dynamic-selector{margin:0;color:rgba(0,0,0,.2);}input.__jsx-style-dynamic-selector{border:none;border-bottom:2px solid rgba(0,0,0,.2);}input.__jsx-style-dynamic-selector:focus{outline:none;border-color:${prim || color.prim};}footer.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;padding:.5rem;}button.__jsx-style-dynamic-selector{background:transparent;border:2px solid ${prim || color.prim};text-transform:uppercase;-webkit-transition:250ms ease;transition:250ms ease;color:${prim || color.prim};}button.__jsx-style-dynamic-selector:focus{outline:none;}button.__jsx-style-dynamic-selector:hover{background:${prim || color.prim};color:#fff;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/felix/Documentos/projects/greenlink/components/main/layout.jsx */`));\n};\n\nconst Register = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useReducer((state, next) => _objectSpread({}, state, next), {\n    name: '',\n    lastName: '',\n    mail: '',\n    pass: '',\n    birthday: '',\n    genre: 'Mujer'\n  });\n  const {\n    0: disable,\n    1: setDisable\n  } = useState(false);\n  const {\n    0: mailPop,\n    1: setMailPop\n  } = useState(false);\n\n  const onSubmit = async e => {\n    try {\n      e.preventDefault();\n      const data = value;\n      const res = await axios.post('/user/register', data);\n\n      if (res.data === 'mail') {\n        setMailPop(true);\n        return setDisable(false);\n      }\n\n      Router.push(`/perfil/${res.data}`);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return __jsx(\"form\", {\n    onSubmit: onSubmit,\n    method: \"POST\",\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }, __jsx(\"header\", {\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }, __jsx(\"h1\", {\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }, \"Registro\")), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]]) + \" \" + \"body\"\n  }, __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]]) + \" \" + \"fullName\"\n  }, __jsx(\"input\", {\n    disabled: disable,\n    value: value.name,\n    onChange: e => setValue({\n      name: e.currentTarget.value\n    }),\n    type: \"text\",\n    id: \"name\",\n    placeholder: \"Nombre\",\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }), __jsx(\"input\", {\n    disabled: disable,\n    value: value.lastName,\n    onChange: e => setValue({\n      lastName: e.currentTarget.value\n    }),\n    type: \"text\",\n    id: \"lastName\",\n    placeholder: \"Apellido\",\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  })), __jsx(\"input\", {\n    disabled: disable,\n    value: value.mail,\n    onChange: e => setValue({\n      mail: e.currentTarget.value\n    }),\n    onFocus: () => setMailPop(false),\n    type: \"text\",\n    id: \"mail\",\n    placeholder: \"Correo electr\\xF3nico\",\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }), __jsx(Popover, {\n    placement: \"bottom\",\n    target: \"mail\",\n    isOpen: mailPop\n  }, __jsx(PopoverBody, null, \"Ya existe una cuenta con este correo\")), __jsx(\"input\", {\n    disabled: disable,\n    value: value.pass,\n    onChange: e => setValue({\n      pass: e.currentTarget.value\n    }),\n    type: \"password\",\n    id: \"pass\",\n    placeholder: \"contrase\\xF1a\",\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]]) + \" \" + \"birth_sex\"\n  }, __jsx(\"label\", {\n    htmlFor: \"birthday\",\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }, __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }, \"Cumplea\\xF1os\"), __jsx(\"input\", {\n    disabled: disable,\n    value: value.birthday,\n    onChange: e => setValue({\n      birthday: e.currentTarget.value\n    }),\n    type: \"date\",\n    name: \"birthday\",\n    id: \"birthday\",\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  })), __jsx(\"label\", {\n    htmlFor: \"genre\",\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }, __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }, \"Genero\"), __jsx(\"select\", {\n    disabled: disable,\n    value: value.genre,\n    onChange: e => setValue({\n      genre: e.currentTarget.value\n    }),\n    name: \"genre\",\n    id: \"genre\",\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }, __jsx(\"option\", {\n    value: \"mujer\",\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }, \"Mujer\"), __jsx(\"option\", {\n    value: \"hombre\",\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }, \"Hombre\"), __jsx(\"option\", {\n    value: \"otro\",\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }, \"Otro\"))))), __jsx(\"footer\", {\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }, __jsx(\"button\", {\n    type: \"button\",\n    onClick: () => _Object$keys(value).forEach(val => setValue({\n      [val]: ''\n    })),\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }, \"cancelar\"), __jsx(\"button\", {\n    type: \"submit\",\n    className: _JSXStyle.dynamic([[\"3822388164\", [color.prim, color.prim, color.prim, color.prim]]])\n  }, \"Enviar\")), __jsx(_JSXStyle, {\n    id: \"3822388164\",\n    dynamic: [color.prim, color.prim, color.prim, color.prim]\n  }, `form.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%;height:100%;}header.__jsx-style-dynamic-selector{color:${color.prim};}.body.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%;height:100%;padding:.5rem;}input.__jsx-style-dynamic-selector{font-size:12px;width:100%;margin-bottom:1rem;padding-left:.5rem;}input[type=\"date\"].__jsx-style-dynamic-selector{border:1px solid rgba(0,0,0,.2);}.fullName.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.fullName.__jsx-style-dynamic-selector input.__jsx-style-dynamic-selector:nth-child(2){margin-left:.5rem;}.birth_sex.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:space-around;-webkit-justify-content:space-around;-ms-flex-pack:space-around;justify-content:space-around;width:100%;}footer.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%;padding:.5rem;}button.__jsx-style-dynamic-selector{background:transparent;color:${color.prim};border:2px solid ${color.prim};-webkit-transition:250ms ease;transition:250ms ease;margin-left:.5rem;}button.__jsx-style-dynamic-selector:focus{outline:none;}button.__jsx-style-dynamic-selector:hover{color:#fff;background:${color.prim};}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2ZlbGl4L0RvY3VtZW50b3MvcHJvamVjdHMvZ3JlZW5saW5rL2NvbXBvbmVudHMvbWFpbi9sYXlvdXQuanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRMa0IsQUFHd0IsQUFPc0IsQUFHdEIsQUFRRSxBQU1vQixBQUd0QixBQVFLLEFBR0wsQUFLQSxBQU9VLEFBT1YsQUFHRixXQUM2QixFQUgxQyxFQXZDYSxHQWlCYixLQWVxQyxHQS9CaEIsTUFLckIsR0FqQkEsVUFhcUIsTUF5Q3JCLE9BVmdELE1BOUJoRCxVQXJCd0IsQUFVQSxBQWlCWCxBQVdrQixBQUtKLFdBZkYsbUJBd0JELGdEQW5ESCxBQVVBLElBMENELGVBVEMsR0FVckIsVUF6QnFCLGFBVVIsV0FDYixxQ0F0Q2EsQUFVQSxXQVRDLEFBVUEsUUFnQ0QsSUF6Q2IsQUFVZ0IsT0FnQ0EsRUFoQmhCLEtBZkEsT0FnQ0EiLCJmaWxlIjoiL2hvbWUvZmVsaXgvRG9jdW1lbnRvcy9wcm9qZWN0cy9ncmVlbmxpbmsvY29tcG9uZW50cy9tYWluL2xheW91dC5qc3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IE9OX0VWRU5UIH0gZnJvbSAnLi4vLi4vc3RvcmUvYWN0aW9ucyc7XG4vL2ltcG9ydCAnLi4vLi4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9zY3NzL2Jvb3RzdHJhcC5zY3NzJztcbmltcG9ydCAnLi9iYXNlLnNjc3MnO1xuaW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9oZWFkZXInO1xuaW1wb3J0IE1lbnUgZnJvbSAnLi9tZW51JztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnbmV4dC9yb3V0ZXInO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IFBvcG92ZXIsIFBvcG92ZXJCb2R5LCBTcGlubmVyLCBNb2RhbCB9IGZyb20gJ3JlYWN0c3RyYXAnO1xuaW1wb3J0IHsgY29sb3IsIGZvbnQgfSBmcm9tICcuLi8uLi9sYXlvdXQvdmFyJztcbmltcG9ydCBUaXRsZSBmcm9tICcuLi9tYWluL3RpdGxlJztcblxuY29uc3QgTG9naW4gPSAoeyBwcmltLCB0aXRsZSB9KSA9PiB7XG5cbiAgY29uc3QgW21haWwsIHNldE1haWxdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbcGFzcywgc2V0UGFzc10gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFttYWlsUG9wLCBzZXRNYWlsUG9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3Bhc3NQb3AsIHNldFBhc3NQb3BdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZGlzYWJsZSwgc2V0RGlzYWJsZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3Qgb25TdWJtaXQgPSBhc3luYyhlKSA9PiB7XG4gICAgdHJ5e1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgc2V0RGlzYWJsZSh0cnVlKTtcbiAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgIG1haWwsXG4gICAgICAgIHBhc3NcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLnBvc3QoJy91c2VyL2xvZ2luJywgZGF0YSk7XG4gICAgICBpZihyZXMuZGF0YSA9PT0gJ21haWwnKSB7XG4gICAgICAgICBzZXRNYWlsUG9wKHRydWUpO1xuICAgICAgICAgcmV0dXJuIHNldERpc2FibGUoZmFsc2UpO1xuICAgICAgfVxuICAgICAgaWYocmVzLmRhdGEgPT09ICdwYXNzJyl7XG4gICAgICAgIHNldFBhc3NQb3AodHJ1ZSlcbiAgICAgICAgcmV0dXJuIHNldERpc2FibGUoZmFsc2UpO1xuICAgICAgfTtcbiAgICAgIFJvdXRlci5wdXNoKGAvcGVyZmlsLyR7cmVzLmRhdGF9YCk7XG4gICAgfWNhdGNoKGUpe1xuICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuKFxuICAgIDxmb3JtIG9uU3VibWl0PXtvblN1Ym1pdH0gbWV0aG9kPVwiUE9TVFwiPlxuICAgICAgPGhlYWRlcj48aDE+SW5pY2lhciBTZXNpb248L2gxPjwvaGVhZGVyPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJib2R5XCI+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPVwibWFpbFwiPlxuICAgICAgICAgIDxwPlVzdWFyaW88L3A+XG4gICAgICAgICAgPGlucHV0IGRpc2FibGVkPXtkaXNhYmxlfSBvbkZvY3VzPXsoKT0+IHNldE1haWxQb3AoZmFsc2UpfSB2YWx1ZT17bWFpbH0gb25DaGFuZ2U9eyhlKT0+IHNldE1haWwoZS5jdXJyZW50VGFyZ2V0LnZhbHVlKX0gdHlwZT1cInRleHRcIiBpZD1cIm1haWxcIiBuYW1lPVwibWFpbFwiLz5cbiAgICAgICAgICA8UG9wb3ZlciB0YXJnZXQ9XCJtYWlsXCIgcGxhY2VtZW50PVwicmlnaHRcIiBpc09wZW49e21haWxQb3B9PlxuICAgICAgICAgICAgPFBvcG92ZXJCb2R5PkVsIGNvcnJlbyBubyBlcyB2YWxpZG88L1BvcG92ZXJCb2R5PlxuICAgICAgICAgIDwvUG9wb3Zlcj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJwYXNzXCI+XG4gICAgICAgICAgPHA+Y29udHJhc2XDsWE8L3A+XG4gICAgICAgICAgPGlucHV0IGRpc2FibGVkPXtkaXNhYmxlfSBvbkZvY3VzPXsoKT0+IHNldFBhc3NQb3AoZmFsc2UpfSB2YWx1ZT17cGFzc30gb25DaGFuZ2U9eyhlKT0+IHNldFBhc3MoZS5jdXJyZW50VGFyZ2V0LnZhbHVlKX0gdHlwZT1cInBhc3N3b3JkXCIgbmFtZT1cInBhc3NcIiBpZD1cInBhc3NcIi8+XG4gICAgICAgICAgPFBvcG92ZXIgdGFyZ2V0PVwicGFzc1wiIHBsYWNlbWVudD1cInJpZ2h0XCIgaXNPcGVuPXtwYXNzUG9wfT5cbiAgICAgICAgICAgIDxQb3BvdmVyQm9keT5MYSBjb250cmFzZcOxYSBubyBlcyB2YWxpZGE8L1BvcG92ZXJCb2R5PlxuICAgICAgICAgIDwvUG9wb3Zlcj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGZvb3Rlcj5cbiAgICAgICAge1xuICAgICAgICAgIGRpc2FibGUgPyA8U3Bpbm5lciBjb2xvcj17IHRpdGxlID09PSAnc2llbWJyYScgPyAnbWFpbi1ncmVlbicgOiB0aXRsZSA9PT0gJ2F5dWRhJyA/ICdtYWluLXJlZCcgOiAnbWFpbi1ibHVlJyB9IC8+IDogPGJ1dHRvbiBkaXNhYmxlZD17ZGlzYWJsZX0gdHlwZT1cInN1Ym1pdFwiPkxvZ2luPC9idXR0b24+XG4gICAgICAgIH1cbiAgICAgIDwvZm9vdGVyPlxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICBmb3Jte1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIH1cbiAgICAgICAgaGVhZGVye1xuICAgICAgICAgIGNvbG9yOiAke3ByaW0gfHwgY29sb3IucHJpbX07XG4gICAgICAgICAgbWFyZ2luLXRvcDogLjVyZW07XG4gICAgICAgIH1cbiAgICAgICAgLmJvZHl7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgbGFiZWw6bnRoLWNoaWxkKDEpe1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgICAgIH1cbiAgICAgICAgbGFiZWwgcHtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgY29sb3I6IHJnYmEoMCwgMCwgMCwgLjIpO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0e1xuICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgcmdiYSgwLCAwLCAwLCAuMik7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQ6Zm9jdXN7XG4gICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgICBib3JkZXItY29sb3I6ICR7cHJpbSB8fCBjb2xvci5wcmltfTtcbiAgICAgICAgfVxuICAgICAgICBmb290ZXJ7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgICAgIHBhZGRpbmc6IC41cmVtO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbntcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAke3ByaW0gfHwgY29sb3IucHJpbX07XG4gICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgICB0cmFuc2l0aW9uOiAyNTBtcyBlYXNlO1xuICAgICAgICAgIGNvbG9yOiAke3ByaW0gfHwgY29sb3IucHJpbX07XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uOmZvY3Vze1xuICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uOmhvdmVye1xuICAgICAgICAgIGJhY2tncm91bmQ6ICR7cHJpbSB8fCBjb2xvci5wcmltfTtcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgfVxuICAgICAgYH1cbiAgICAgIDwvc3R5bGU+XG4gICAgPC9mb3JtPlxuICApXG59XG5cbmNvbnN0IFJlZ2lzdGVyID0gKCkgPT4ge1xuICBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9IHVzZVJlZHVjZXIoKHN0YXRlLCBuZXh0KSA9PiAoeyAuLi5zdGF0ZSwgLi4ubmV4dCB9KSx7XG4gICAgbmFtZTogJycsXG4gICAgbGFzdE5hbWU6ICcnLFxuICAgIG1haWw6ICcnLFxuICAgIHBhc3M6ICcnLFxuICAgIGJpcnRoZGF5OiAnJyxcbiAgICBnZW5yZTogJ011amVyJyxcbiAgfSlcbiAgY29uc3QgW2Rpc2FibGUsIHNldERpc2FibGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbbWFpbFBvcCwgc2V0TWFpbFBvcF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3Qgb25TdWJtaXQgPSBhc3luYyhlKSA9PiB7XG4gICAgdHJ5e1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc3QgZGF0YSA9IHZhbHVlO1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MucG9zdCgnL3VzZXIvcmVnaXN0ZXInLCBkYXRhKTtcbiAgICAgIGlmKHJlcy5kYXRhID09PSAnbWFpbCcpe1xuICAgICAgICBzZXRNYWlsUG9wKHRydWUpO1xuICAgICAgICByZXR1cm4gc2V0RGlzYWJsZShmYWxzZSk7XG4gICAgICB9XG4gICAgICBSb3V0ZXIucHVzaChgL3BlcmZpbC8ke3Jlcy5kYXRhfWApO1xuICAgIH1jYXRjaChlKXtcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybihcbiAgICA8Zm9ybSBvblN1Ym1pdD17b25TdWJtaXR9IG1ldGhvZD1cIlBPU1RcIj5cbiAgICAgIDxoZWFkZXI+PGgxPlJlZ2lzdHJvPC9oMT48L2hlYWRlcj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm9keVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZ1bGxOYW1lXCI+XG4gICAgICAgICAgPGlucHV0IGRpc2FibGVkPXtkaXNhYmxlfSB2YWx1ZT17dmFsdWUubmFtZX0gb25DaGFuZ2UgPSB7KGUpPT4gc2V0VmFsdWUoeyBuYW1lOiBlLmN1cnJlbnRUYXJnZXQudmFsdWUgfSl9IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJuYW1lXCIgcGxhY2Vob2xkZXI9XCJOb21icmVcIi8+XG4gICAgICAgICAgPGlucHV0IGRpc2FibGVkPXtkaXNhYmxlfSB2YWx1ZT17dmFsdWUubGFzdE5hbWV9IG9uQ2hhbmdlID0geyhlKT0+IHNldFZhbHVlKHsgbGFzdE5hbWU6IGUuY3VycmVudFRhcmdldC52YWx1ZSB9KX0gdHlwZT1cInRleHRcIiBpZD1cImxhc3ROYW1lXCIgcGxhY2Vob2xkZXI9XCJBcGVsbGlkb1wiLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gdmFsdWU9e3ZhbHVlLm1haWx9IG9uQ2hhbmdlID0geyhlKT0+IHNldFZhbHVlKHsgbWFpbDogZS5jdXJyZW50VGFyZ2V0LnZhbHVlIH0pfSBvbkZvY3VzPXsoKT0+IHNldE1haWxQb3AoZmFsc2UpfSB0eXBlPVwidGV4dFwiIGlkPVwibWFpbFwiIHBsYWNlaG9sZGVyPVwiQ29ycmVvIGVsZWN0csOzbmljb1wiLz5cbiAgICAgICAgPFBvcG92ZXIgcGxhY2VtZW50PVwiYm90dG9tXCIgdGFyZ2V0PVwibWFpbFwiIGlzT3Blbj17bWFpbFBvcH0+XG4gICAgICAgICAgPFBvcG92ZXJCb2R5PllhIGV4aXN0ZSB1bmEgY3VlbnRhIGNvbiBlc3RlIGNvcnJlbzwvUG9wb3ZlckJvZHk+XG4gICAgICAgIDwvUG9wb3Zlcj5cbiAgICAgICAgPGlucHV0IGRpc2FibGVkPXtkaXNhYmxlfSB2YWx1ZT17dmFsdWUucGFzc30gb25DaGFuZ2UgPSB7KGUpPT4gc2V0VmFsdWUoeyBwYXNzOiBlLmN1cnJlbnRUYXJnZXQudmFsdWUgfSl9IHR5cGU9XCJwYXNzd29yZFwiIGlkPVwicGFzc1wiIHBsYWNlaG9sZGVyPVwiY29udHJhc2XDsWFcIi8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmlydGhfc2V4XCI+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJiaXJ0aGRheVwiPlxuICAgICAgICAgICAgPHA+Q3VtcGxlYcOxb3M8L3A+XG4gICAgICAgICAgICA8aW5wdXQgZGlzYWJsZWQ9e2Rpc2FibGV9IHZhbHVlPXt2YWx1ZS5iaXJ0aGRheX0gb25DaGFuZ2UgPSB7KGUpPT4gc2V0VmFsdWUoeyBiaXJ0aGRheTogZS5jdXJyZW50VGFyZ2V0LnZhbHVlIH0pfSB0eXBlPVwiZGF0ZVwiIG5hbWU9XCJiaXJ0aGRheVwiIGlkPVwiYmlydGhkYXlcIi8+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImdlbnJlXCI+XG4gICAgICAgICAgICA8cD5HZW5lcm88L3A+XG4gICAgICAgICAgICA8c2VsZWN0IGRpc2FibGVkPXtkaXNhYmxlfSB2YWx1ZT17dmFsdWUuZ2VucmV9IG9uQ2hhbmdlID0geyhlKT0+IHNldFZhbHVlKHsgZ2VucmU6IGUuY3VycmVudFRhcmdldC52YWx1ZSB9KX0gbmFtZT1cImdlbnJlXCIgaWQ9XCJnZW5yZVwiPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibXVqZXJcIj5NdWplcjwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiaG9tYnJlXCI+SG9tYnJlPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJvdHJvXCI+T3Rybzwvb3B0aW9uPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxmb290ZXI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eygpPT4gT2JqZWN0LmtleXModmFsdWUpLmZvckVhY2godmFsID0+IHNldFZhbHVlKHsgW3ZhbF06ICcnIH0pKX0+Y2FuY2VsYXI8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCI+RW52aWFyPC9idXR0b24+XG4gICAgICA8L2Zvb3Rlcj5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgZm9ybXtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIH1cbiAgICAgICAgaGVhZGVye1xuICAgICAgICAgIGNvbG9yOiAke2NvbG9yLnByaW19O1xuICAgICAgICB9XG4gICAgICAgIC5ib2R5e1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBwYWRkaW5nOiAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dHtcbiAgICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbiAgICAgICAgICBwYWRkaW5nLWxlZnQ6IC41cmVtO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0W3R5cGU9XCJkYXRlXCJde1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgLjIpO1xuICAgICAgICB9XG4gICAgICAgIC5mdWxsTmFtZXtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgLmZ1bGxOYW1lIGlucHV0e1xuICAgICAgICB9XG4gICAgICAgIC5mdWxsTmFtZSBpbnB1dDpudGgtY2hpbGQoMil7XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IC41cmVtO1xuICAgICAgICB9XG4gICAgICAgIC5iaXJ0aF9zZXh7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgfVxuICAgICAgICBmb290ZXJ7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgcGFkZGluZzogLjVyZW07XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9ue1xuICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICAgIGNvbG9yOiAke2NvbG9yLnByaW19O1xuICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICR7Y29sb3IucHJpbX07XG4gICAgICAgICAgdHJhbnNpdGlvbjogMjUwbXMgZWFzZTtcbiAgICAgICAgICBtYXJnaW4tbGVmdDogLjVyZW07XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uOmZvY3Vze1xuICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uOmhvdmVye1xuICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgIGJhY2tncm91bmQ6ICR7Y29sb3IucHJpbX07XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvZm9ybT5cbiAgKVxufVxuXG5jb25zdCBMb2dSZWcgPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG5cbiAgcmV0dXJuKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibWFpbl9jb250XCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW5cIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwdWJsaXNoXCI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRcIj5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIC5tYWluX2NvbnR7XG4gICAgICAgICAgaGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgICB3aWR0aDogNzAlO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIH1cbiAgICAgICAgLm1haW57XG4gICAgICAgICAgaGVpZ2h0OiA1MCU7XG4gICAgICAgICAgd2lkdGg6IDgwJTtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgICAgICAgIGFuaW1hdGlvbjogZG93biA2MDBtcyBlYXNlLWluLW91dDtcbiAgICAgICAgICBhbmltYXRpb24tZmlsbC1tb2RlOiBmb3J3YXJkcztcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICB9XG4gICAgICAgIC5wdWJsaXNoe1xuICAgICAgICAgIHdpZHRoOiA1MCU7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIGJhY2tncm91bmQ6IHVybCgnL3N0YXRpYy9yYW5kb20vcjE2LmpwZycpdG9wIGNlbnRlciBuby1yZXBlYXQ7XG4gICAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgICAgICAgfVxuICAgICAgICAuY29udHtcbiAgICAgICAgICB3aWR0aDogNTAlO1xuICAgICAgICB9XG4gICAgICAgIEBrZXlmcmFtZXMgZG93bntcbiAgICAgICAgICAwJXtcbiAgICAgICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwMCUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICA1MCV7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoNTBweCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIDEwMCV7XG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDBweCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBgfVxuICAgICAgPC9zdHlsZT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5jb25zdCBNeU1vZGFsID0gKCkgPT4ge1xuICBjb25zdCBtZW51ID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUubWFpbi5uYXYudmlzaWJsZSk7XG4gIGNvbnN0IG1haW4gPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5tYWluLm5hdik7XG4gIGNvbnN0IHsgbG9naW4sIHJlZ2lzdGVyIH0gPSBtYWluO1xuICByZXR1cm4oXG4gICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbFwiPlxuICAgICAge1xuICAgICAgICBsb2dpbiAmJiA8TG9nUmVnPjxMb2dpbiAvPjwvTG9nUmVnPlxuICAgICAgfVxuICAgICAge1xuICAgICAgICByZWdpc3RlciAmJiA8TG9nUmVnPjxSZWdpc3RlciAvPjwvTG9nUmVnPlxuICAgICAgfVxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAubW9kYWx7XG4gICAgICAgICAgZGlzcGxheTogJHttZW51ID8gJ2Jsb2NrJyA6ICdub25lJ307XG4gICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICAgIHRvcDogMDtcbiAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIC41KTtcbiAgICAgICAgICB6LWluZGV4OiAxNTA7XG4gICAgICAgICAgY29udGVudDogXCIgXCI7XG4gICAgICAgICAgdHJhbnNpdGlvbjogMjUwbXMgZWFzZTtcbiAgICAgICAgfVxuICAgICAgYH1cbiAgICAgIDwvc3R5bGU+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuY29uc3QgRXZlbnRIb21lID0gKHsgY3VycmVudCwgc2V0RG9uYXRlIH0pID0+IHtcblxuICByZXR1cm4oXG4gICAgPD5cbiAgICAgIDxoZWFkZXI+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGgxPntjdXJyZW50LnRpdGxlfTwvaDE+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwic3ViVGl0bGVcIj57Y3VycmVudC5zdWJUaXRsZX08L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9oZWFkZXI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvZHlcIj5cbiAgICAgICAgPHA+e2N1cnJlbnQuZGVzY3JpcHRpb259PC9wPlxuICAgICAgPC9kaXY+XG4gICAgICA8Zm9vdGVyPlxuICAgICAgICA8YnV0dG9uPlBhcnRpY2lwYXI8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKT0+IHNldERvbmF0ZSh0cnVlKX0+RG9uYXI8L2J1dHRvbj5cbiAgICAgIDwvZm9vdGVyPlxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICBoZWFkZXJ7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gICAgICAgIH1cbiAgICAgICAgaGVhZGVyIGRpdntcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgICAgICAgIG1hcmdpbjogNXJlbSAwIDFyZW07XG4gICAgICAgIH1cbiAgICAgICAgaDEsIHB7XG4gICAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlciBoMSwgLnN1YlRpdGxle1xuICAgICAgICAgIG1hcmdpbjowO1xuICAgICAgICAgIGNvbG9yOiAke2N1cnJlbnQucHJpbX07XG4gICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b257XG4gICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgYm9yZGVyOiAycHggc29saWQgJHtjdXJyZW50LnByaW19O1xuICAgICAgICAgIGNvbG9yOiAke2N1cnJlbnQucHJpbX07XG4gICAgICAgICAgdHJhbnNpdGlvbjogMjUwbXMgZWFzZTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b246Zm9jdXN7XG4gICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b246aG92ZXJ7XG4gICAgICAgICAgYmFja2dyb3VuZDogJHtjdXJyZW50LnByaW19O1xuICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICB9XG4gICAgICAgIC5ib2R5e1xuICAgICAgICAgIGZsZXgtZ3JvdzogMTtcbiAgICAgICAgfVxuICAgICAgICBmb290ZXJ7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgZm9vdGVyIGJ1dHRvbntcbiAgICAgICAgICBtYXJnaW4tbGVmdDogMXJlbTtcbiAgICAgICAgfVxuICAgICAgYH1cbiAgICAgIDwvc3R5bGU+XG4gICAgPC8+XG4gIClcbn1cblxuY29uc3QgRG9uYXRlID0gKHsgY3VycmVudCB9KSA9PiB7XG4gIGNvbnN0IFtsb2dpbiwgc2V0TG9naW5dID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZG9uYXRlLCBzZXREb25hdGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbd2VsY29tZSwgc2V0V2VsY29tZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtsb2FkZXIsIHNldExvYWRlcl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFttb3VudCwgc2V0TW91bnRdID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IFt1c2VyLCBzZXRVc2VyXSA9IHVzZVN0YXRlKHsgZnVsbE5hbWU6ICdzdGFyIGdyZWVuJywgcGVyZmlsSW1nOiAnL3N0YXRpYy9yYW5kb20vcjUuanBnJyB9KTtcbiAgY29uc3Qgb25UZXN0ID0gYXN5bmMoKT0+IHtcbiAgICB0cnl7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy91c2VyL3Rlc3RMb2dpbicpO1xuICAgICAgaWYocmVzLmRhdGEpe1xuICAgICAgICBzZXRMb2FkZXIoZmFsc2UpO1xuICAgICAgICBzZXRVc2VyKHJlcy5kYXRhKTtcbiAgICAgICAgc2V0RG9uYXRlKHRydWUpO1xuICAgICAgfVxuICAgIH1jYXRjaChlKXtcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgc2V0TG9hZGVyKGZhbHNlKTtcbiAgICAgIHNldExvZ2luKHRydWUpO1xuICAgIH1cbiAgfVxuICAgIHVzZUVmZmVjdCgoKT0+IHtcbiAgICAgIG9uVGVzdCgpO1xuICAgIH0sW10pXG5cbiAgICBjb25zdCBvbkRvbmF0ZSA9IGFzeW5jKGUpID0+IHtcbiAgICAgIHRyeXtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBzZXREb25hdGUoZmFsc2UpO1xuICAgICAgICBzZXRMb2FkZXIodHJ1ZSk7XG4gICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICBzZXRMb2FkZXIoZmFsc2UpO1xuICAgICAgICAgIHNldFdlbGNvbWUodHJ1ZSk7XG4gICAgICAgIH0sMjAwMCk7XG4gICAgICB9Y2F0Y2goZSl7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgfVxuICAgIH1cbiAgY29uc3QgeyBwZXJmaWxJbWcsIGZ1bGxOYW1lLCB3YWxsZXQgfSA9IHVzZXI7XG4gIHJldHVybihcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW5cIj5cbiAgICAgIHtcbiAgICAgICAgbG9hZGVyICYmIDxkaXYgY2xhc3NOYW1lPVwibG9hZGVyXCI+PFNwaW5uZXIgY29sb3I9eyBjdXJyZW50LnRpdGxlID09PSAnc2llbWJyYScgPyAnbWFpbi1ncmVlbicgOiBjdXJyZW50LnRpdGxlID09PSAnYXl1ZGEnID8gJ21haW4tcmVkJyA6ICdtYWluLWJsdWUnIH0gLz48L2Rpdj5cbiAgICAgIH1cbiAgICAgIHtcbiAgICAgICAgbG9naW4gJiYgPGRpdiBjbGFzc05hbWU9XCJsb2dpblwiPjxMb2dpbiBwcmltPXsgY3VycmVudC5wcmltIH0gdGl0bGU9e2N1cnJlbnQudGl0bGV9IC8+PC9kaXY+XG4gICAgICB9XG4gICAgICB7XG4gICAgICAgIGRvbmF0ZSAmJiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYWluX2RvbmF0ZSBhbmltYXRlZCBmYWRlSW5cIj5cbiAgICAgICAgICAgIDxoZWFkZXI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidXNlciBhbmltYXRlZCBmYWRlSW4gZGVsYXktMXNcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz17cGVyZmlsSW1nfSBhbHQ9XCJcIi8+XG4gICAgICAgICAgICAgICAgPHA+e2Z1bGxOYW1lfTwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm91bmQgYW5pbWF0ZWQgZmxpcEluWCBkZWxheS0yc1wiPlxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiL3N0YXRpYy9ncmVlbmNvaW4uc3ZnXCIgYWx0PVwiXCIvPlxuICAgICAgICAgICAgICAgIDxwPnt3YWxsZXR9PC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvaGVhZGVyPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbmltYXRlZCBmYWRlSW4gZGVsYXktMnNcIj5cbiAgICAgICAgICAgICAgPGgxPkRvbmFyPC9oMT5cbiAgICAgICAgICAgICAgPHA+SW5ncmVzYSB1biBtb250byBlbiBncmVlbmNvaW5zLCBsb3MgbWlzbW9zIHNlcmFuIGRlc2NvbnRhZG9zIGRlIHN1IGN1ZW50YSB5IHNlcmFuIHJlY2liaWRvcyBwb3IgbGFzIG9nYW5pemFjaW9uZXMgcXVlIGFwb3lhbiBlc3RhIGNhdXNhLjwvcD5cbiAgICAgICAgICAgICAgPGZvcm0gbWV0aG9kPVwiUE9TVFwiIG9uU3VibWl0PXtvbkRvbmF0ZX0+XG4gICAgICAgICAgICAgICAgPGlucHV0IHZhbHVlPXttb3VudH0gb25DaGFuZ2U9eyhlKT0+IHNldE1vdW50KGUuY3VycmVudFRhcmdldC52YWx1ZSl9IHR5cGU9XCJudW1iZXJcIi8+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCI+ZG9uYXI8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIHtcbiAgICAgICAgd2VsY29tZSAmJiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3ZWxjb21lIGFuaW1hdGVkIGZhZGVJblwiPlxuICAgICAgICAgICAgPGgxPkZlbGljaWRhZGVzLCB5YSBlcmVzIGVtYmFqYWRvciBkZSBlc3RlIGV2ZW50bzwvaDE+XG4gICAgICAgICAgICA8cD5Qb2RyYXMgc2VndWlyIGxvIHF1ZSBoYWNlbW9zIGNvbiB0dSBjb2xhYm9yYWNpb24gZW4gZWwgc2lndWllbnRlIDxhIGhyZWY9XCIjXCI+RW5sYWNlLjwvYT48L3A+XG4gICAgICAgICAgICA8cD5EZSBpZ3VhbCBtYW5lcmEgbGFzIGFjdHVhbGl6YWNpb25lcyBkZWwgZXZlbnRvIHNlcmFuIHB1YmxpY2FkYXMgZW4gdHUgbXVyby48L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLm1haW57XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXJ7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDJyZW07XG4gICAgICAgIH1cbiAgICAgICAgaGVhZGVyIHB7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICB9XG4gICAgICAgIC5sb2FkZXJ7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgfVxuICAgICAgICAubG9naW57XG4gICAgICAgICAgaGVpZ2h0OiA2MCU7XG4gICAgICAgIH1cbiAgICAgICAgLm1haW5fZG9uYXRlIGgxe1xuICAgICAgICAgIGNvbG9yOiAke2N1cnJlbnQucHJpbX07XG4gICAgICAgIH1cbiAgICAgICAgLnVzZXIgaW1ne1xuICAgICAgICAgIHdpZHRoOiA4MHB4O1xuICAgICAgICAgIGhlaWdodDogODBweDtcbiAgICAgICAgICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgICAgICAgICBvYmplY3QtcG9zaXRpb246IGNlbnRlcjtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgIH1cbiAgICAgICAgLmZvdW5ke1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgfVxuICAgICAgICAuZm91bmQgaW1ne1xuICAgICAgICAgIHdpZHRoOiAzMHB4O1xuICAgICAgICAgIGhlaWdodDogMzBweDtcbiAgICAgICAgICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgICAgICAgICBvYmplY3QtcG9zaXRpb247IGNlbnRlcjtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dHtcbiAgICAgICAgICB3aWR0aDogNjBweDtcbiAgICAgICAgfVxuICAgICAgICAud2VsY29tZSBoMSwgYXtcbiAgICAgICAgICBjb2xvcjogJHtjdXJyZW50LnByaW19O1xuICAgICAgICB9XG4gICAgICAgIC53ZWxjb21lIGF7XG4gICAgICAgICAgZm9udC13aWdodDogNTUwO1xuICAgICAgICB9XG4gICAgICAgIC53ZWxjb21lIHB7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICB9XG4gICAgICBgfVxuICAgICAgPC9zdHlsZT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5jb25zdCBFdmVudHMgPSAoKSA9PiB7XG4gIGNvbnN0IGV2ZW50cyA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmV2ZW50cyk7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3QgeyB2aXNpYmxlLCBjdXJyZW50IH0gPSBldmVudHM7XG4gIGNvbnN0IFtkb25hdGUsIHNldERvbmF0ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIHVzZUVmZmVjdCgoKT0+IHNldERvbmF0ZSh0cnVlKSxbdmlzaWJsZV0pO1xuICByZXR1cm4oXG4gICAgPE1vZGFsIGlzT3Blbj17dmlzaWJsZX0gc3R5bGU9e3sgbWluV2lkdGg6ICc5NXZ3JyB9fT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFpblwiPlxuICAgICAgICA8YnV0dG9uIHRpdGxlPVwiQ2VycmFyXCIgb25DbGljaz17KCk9PiBkaXNwYXRjaCh7IHR5cGU6IE9OX0VWRU5ULCBldmVudFR5cGU6IG51bGwgfSl9Plg8L2J1dHRvbj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbWdcIj5cbiAgICAgICAgICA8aW1nIHNyYz17Y3VycmVudC5pbWd9IGFsdD1cIlwiLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5mb1wiPlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGRvbmF0ZSA/IDxEb25hdGUgY3VycmVudD17Y3VycmVudH0gLz4gOiA8RXZlbnRIb21lIGN1cnJlbnQ9e2N1cnJlbnR9IHNldERvbmF0ZT17c2V0RG9uYXRlfSAvPlxuICAgICAgICAgIH1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgICAubWFpbntcbiAgICAgICAgICAgIC8vaGVpZ2h0OiA4MHZoO1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuaW1nLCAuaW5mb3tcbiAgICAgICAgICAgIC8vd2lkdGg6IDUwJTtcbiAgICAgICAgICAgIC8vaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbWd7XG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgICAgICAgb2JqZWN0LXBvc2l0aW9uOiAke2N1cnJlbnQucHJpbSA9PT0gXCIjMDNhN2YwXCIgPyAndG9wJyA6ICdib3R0b20nIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIC5pbmZve1xuICAgICAgICAgICAgcGFkZGluZzogLjVyZW0gLjVyZW0gLjVyZW0gMXJlbTtcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidXR0b257XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgICAgIGNvbG9yOiAke2N1cnJlbnQucHJpbX07XG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAyNTBtcyBlYXNlO1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgdG9wOiAuNXJlbTtcbiAgICAgICAgICAgIHJpZ2h0OiAuNXJlbTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnV0dG9uOmZvY3Vze1xuICAgICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnV0dG9uOmhvdmVye1xuICAgICAgICAgICAgYmFja2dyb3VuZDogJHtjdXJyZW50LnByaW19O1xuICAgICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgICAgfVxuICAgICAgICBgfVxuICAgICAgICA8L3N0eWxlPlxuICAgICAgPC9kaXY+XG4gICAgPC9Nb2RhbD5cbiAgKVxufVxuXG5jb25zdCBMYXlvdXQgPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIHJldHVybihcbiAgICA8ZGl2PlxuICAgICAgPEhlYWQ+XG4gICAgICAgIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiL3N0YXRpYy9hbmltYXRlLm1pbi5jc3NcIi8+XG4gICAgICAgIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiL3N0YXRpYy9hb3MuY3NzXCIvPlxuICAgICAgICA8bGluayBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PUFyY2hpdm8rQmxhY2t8T3BlbitTYW5zfFBhY2lmaWNvJmRpc3BsYXk9c3dhcFwiIHJlbD1cInN0eWxlc2hlZXRcIi8+XG4gICAgICA8L0hlYWQ+XG4gICAgICA8bWFpbj5cbiAgICAgICAgPEhlYWRlciAvPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDxFdmVudHMgLz5cbiAgICAgIDwvbWFpbj5cbiAgICAgIDxNZW51IC8+XG4gICAgICA8TXlNb2RhbCAvPlxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICBkaXZ7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIH1cbiAgICAgICAgbWFpbntcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgZmxleDogMSAxIDA7XG4gICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgfVxuICAgICAgYH1cbiAgICAgIDwvc3R5bGU+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgTGF5b3V0O1xuIl19 */\n/*@ sourceURL=/home/felix/Documentos/projects/greenlink/components/main/layout.jsx */`));\n};\n\nconst LogReg = ({\n  children\n}) => {\n  return __jsx(\"div\", {\n    className: \"jsx-292857699\" + \" \" + \"main_cont\"\n  }, __jsx(\"div\", {\n    className: \"jsx-292857699\" + \" \" + \"main\"\n  }, __jsx(\"div\", {\n    className: \"jsx-292857699\" + \" \" + \"publish\"\n  }), __jsx(\"div\", {\n    className: \"jsx-292857699\" + \" \" + \"cont\"\n  }, children)), __jsx(_JSXStyle, {\n    id: \"292857699\"\n  }, \".main_cont.jsx-292857699{height:100vh;width:70%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:relative;}.main.jsx-292857699{height:50%;width:80%;background:#fff;-webkit-animation:down-jsx-292857699 600ms ease-in-out;animation:down-jsx-292857699 600ms ease-in-out;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}.publish.jsx-292857699{width:50%;height:100%;background:url('/static/random/r16.jpg')top center no-repeat;background-size:cover;}.cont.jsx-292857699{width:50%;}@-webkit-keyframes down-jsx-292857699{0%{opacity:0;-webkit-transform:translateY(-100%);-ms-transform:translateY(-100%);transform:translateY(-100%);}50%{-webkit-transform:translateY(50px);-ms-transform:translateY(50px);transform:translateY(50px);}100%{opacity:1;-webkit-transform:translateY(0px);-ms-transform:translateY(0px);transform:translateY(0px);}}@keyframes down-jsx-292857699{0%{opacity:0;-webkit-transform:translateY(-100%);-ms-transform:translateY(-100%);transform:translateY(-100%);}50%{-webkit-transform:translateY(50px);-ms-transform:translateY(50px);transform:translateY(50px);}100%{opacity:1;-webkit-transform:translateY(0px);-ms-transform:translateY(0px);transform:translateY(0px);}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2ZlbGl4L0RvY3VtZW50b3MvcHJvamVjdHMvZ3JlZW5saW5rL2NvbXBvbmVudHMvbWFpbi9sYXlvdXQuanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThRa0IsQUFHd0IsQUFRRixBQVFELEFBTUEsQUFJRSxBQUlpQixBQUdqQixVQWhCQSxBQU1kLEFBSWdDLEFBT0YsQ0F6QmxCLEVBUkEsUUFTTSxDQVE2QyxDQWhCaEQsY0FTb0IsOENBUVgsVUFZdEIsSUE1QnVCLEdBZ0N2QixLQWZGLENBUUUsaUNBaEI2Qix5REFSVixTQVNOLDBFQUNmLFVBVG9CLGtCQUNwQiIsImZpbGUiOiIvaG9tZS9mZWxpeC9Eb2N1bWVudG9zL3Byb2plY3RzL2dyZWVubGluay9jb21wb25lbnRzL21haW4vbGF5b3V0LmpzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWR1Y2VyIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgT05fRVZFTlQgfSBmcm9tICcuLi8uLi9zdG9yZS9hY3Rpb25zJztcbi8vaW1wb3J0ICcuLi8uLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL3Njc3MvYm9vdHN0cmFwLnNjc3MnO1xuaW1wb3J0ICcuL2Jhc2Uuc2Nzcyc7XG5pbXBvcnQgSGVhZCBmcm9tICduZXh0L2hlYWQnO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuL2hlYWRlcic7XG5pbXBvcnQgTWVudSBmcm9tICcuL21lbnUnO1xuaW1wb3J0IFJvdXRlciBmcm9tICduZXh0L3JvdXRlcic7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgUG9wb3ZlciwgUG9wb3ZlckJvZHksIFNwaW5uZXIsIE1vZGFsIH0gZnJvbSAncmVhY3RzdHJhcCc7XG5pbXBvcnQgeyBjb2xvciwgZm9udCB9IGZyb20gJy4uLy4uL2xheW91dC92YXInO1xuaW1wb3J0IFRpdGxlIGZyb20gJy4uL21haW4vdGl0bGUnO1xuXG5jb25zdCBMb2dpbiA9ICh7IHByaW0sIHRpdGxlIH0pID0+IHtcblxuICBjb25zdCBbbWFpbCwgc2V0TWFpbF0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtwYXNzLCBzZXRQYXNzXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW21haWxQb3AsIHNldE1haWxQb3BdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbcGFzc1BvcCwgc2V0UGFzc1BvcF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtkaXNhYmxlLCBzZXREaXNhYmxlXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBvblN1Ym1pdCA9IGFzeW5jKGUpID0+IHtcbiAgICB0cnl7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBzZXREaXNhYmxlKHRydWUpO1xuICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgbWFpbCxcbiAgICAgICAgcGFzc1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MucG9zdCgnL3VzZXIvbG9naW4nLCBkYXRhKTtcbiAgICAgIGlmKHJlcy5kYXRhID09PSAnbWFpbCcpIHtcbiAgICAgICAgIHNldE1haWxQb3AodHJ1ZSk7XG4gICAgICAgICByZXR1cm4gc2V0RGlzYWJsZShmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZihyZXMuZGF0YSA9PT0gJ3Bhc3MnKXtcbiAgICAgICAgc2V0UGFzc1BvcCh0cnVlKVxuICAgICAgICByZXR1cm4gc2V0RGlzYWJsZShmYWxzZSk7XG4gICAgICB9O1xuICAgICAgUm91dGVyLnB1c2goYC9wZXJmaWwvJHtyZXMuZGF0YX1gKTtcbiAgICB9Y2F0Y2goZSl7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4oXG4gICAgPGZvcm0gb25TdWJtaXQ9e29uU3VibWl0fSBtZXRob2Q9XCJQT1NUXCI+XG4gICAgICA8aGVhZGVyPjxoMT5JbmljaWFyIFNlc2lvbjwvaDE+PC9oZWFkZXI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvZHlcIj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJtYWlsXCI+XG4gICAgICAgICAgPHA+VXN1YXJpbzwvcD5cbiAgICAgICAgICA8aW5wdXQgZGlzYWJsZWQ9e2Rpc2FibGV9IG9uRm9jdXM9eygpPT4gc2V0TWFpbFBvcChmYWxzZSl9IHZhbHVlPXttYWlsfSBvbkNoYW5nZT17KGUpPT4gc2V0TWFpbChlLmN1cnJlbnRUYXJnZXQudmFsdWUpfSB0eXBlPVwidGV4dFwiIGlkPVwibWFpbFwiIG5hbWU9XCJtYWlsXCIvPlxuICAgICAgICAgIDxQb3BvdmVyIHRhcmdldD1cIm1haWxcIiBwbGFjZW1lbnQ9XCJyaWdodFwiIGlzT3Blbj17bWFpbFBvcH0+XG4gICAgICAgICAgICA8UG9wb3ZlckJvZHk+RWwgY29ycmVvIG5vIGVzIHZhbGlkbzwvUG9wb3ZlckJvZHk+XG4gICAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInBhc3NcIj5cbiAgICAgICAgICA8cD5jb250cmFzZcOxYTwvcD5cbiAgICAgICAgICA8aW5wdXQgZGlzYWJsZWQ9e2Rpc2FibGV9IG9uRm9jdXM9eygpPT4gc2V0UGFzc1BvcChmYWxzZSl9IHZhbHVlPXtwYXNzfSBvbkNoYW5nZT17KGUpPT4gc2V0UGFzcyhlLmN1cnJlbnRUYXJnZXQudmFsdWUpfSB0eXBlPVwicGFzc3dvcmRcIiBuYW1lPVwicGFzc1wiIGlkPVwicGFzc1wiLz5cbiAgICAgICAgICA8UG9wb3ZlciB0YXJnZXQ9XCJwYXNzXCIgcGxhY2VtZW50PVwicmlnaHRcIiBpc09wZW49e3Bhc3NQb3B9PlxuICAgICAgICAgICAgPFBvcG92ZXJCb2R5PkxhIGNvbnRyYXNlw7FhIG5vIGVzIHZhbGlkYTwvUG9wb3ZlckJvZHk+XG4gICAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8Zm9vdGVyPlxuICAgICAgICB7XG4gICAgICAgICAgZGlzYWJsZSA/IDxTcGlubmVyIGNvbG9yPXsgdGl0bGUgPT09ICdzaWVtYnJhJyA/ICdtYWluLWdyZWVuJyA6IHRpdGxlID09PSAnYXl1ZGEnID8gJ21haW4tcmVkJyA6ICdtYWluLWJsdWUnIH0gLz4gOiA8YnV0dG9uIGRpc2FibGVkPXtkaXNhYmxlfSB0eXBlPVwic3VibWl0XCI+TG9naW48L2J1dHRvbj5cbiAgICAgICAgfVxuICAgICAgPC9mb290ZXI+XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIGZvcm17XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXJ7XG4gICAgICAgICAgY29sb3I6ICR7cHJpbSB8fCBjb2xvci5wcmltfTtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICAuYm9keXtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgfVxuICAgICAgICBsYWJlbDpudGgtY2hpbGQoMSl7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbiAgICAgICAgfVxuICAgICAgICBsYWJlbCBwe1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAuMik7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXR7XG4gICAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCByZ2JhKDAsIDAsIDAsIC4yKTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dDpmb2N1c3tcbiAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgIGJvcmRlci1jb2xvcjogJHtwcmltIHx8IGNvbG9yLnByaW19O1xuICAgICAgICB9XG4gICAgICAgIGZvb3RlcntcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgICAgICAgcGFkZGluZzogLjVyZW07XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9ue1xuICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICR7cHJpbSB8fCBjb2xvci5wcmltfTtcbiAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICAgIHRyYW5zaXRpb246IDI1MG1zIGVhc2U7XG4gICAgICAgICAgY29sb3I6ICR7cHJpbSB8fCBjb2xvci5wcmltfTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b246Zm9jdXN7XG4gICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b246aG92ZXJ7XG4gICAgICAgICAgYmFja2dyb3VuZDogJHtwcmltIHx8IGNvbG9yLnByaW19O1xuICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICB9XG4gICAgICBgfVxuICAgICAgPC9zdHlsZT5cbiAgICA8L2Zvcm0+XG4gIClcbn1cblxuY29uc3QgUmVnaXN0ZXIgPSAoKSA9PiB7XG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlUmVkdWNlcigoc3RhdGUsIG5leHQpID0+ICh7IC4uLnN0YXRlLCAuLi5uZXh0IH0pLHtcbiAgICBuYW1lOiAnJyxcbiAgICBsYXN0TmFtZTogJycsXG4gICAgbWFpbDogJycsXG4gICAgcGFzczogJycsXG4gICAgYmlydGhkYXk6ICcnLFxuICAgIGdlbnJlOiAnTXVqZXInLFxuICB9KVxuICBjb25zdCBbZGlzYWJsZSwgc2V0RGlzYWJsZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFttYWlsUG9wLCBzZXRNYWlsUG9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBvblN1Ym1pdCA9IGFzeW5jKGUpID0+IHtcbiAgICB0cnl7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCBkYXRhID0gdmFsdWU7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5wb3N0KCcvdXNlci9yZWdpc3RlcicsIGRhdGEpO1xuICAgICAgaWYocmVzLmRhdGEgPT09ICdtYWlsJyl7XG4gICAgICAgIHNldE1haWxQb3AodHJ1ZSk7XG4gICAgICAgIHJldHVybiBzZXREaXNhYmxlKGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIFJvdXRlci5wdXNoKGAvcGVyZmlsLyR7cmVzLmRhdGF9YCk7XG4gICAgfWNhdGNoKGUpe1xuICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuKFxuICAgIDxmb3JtIG9uU3VibWl0PXtvblN1Ym1pdH0gbWV0aG9kPVwiUE9TVFwiPlxuICAgICAgPGhlYWRlcj48aDE+UmVnaXN0cm88L2gxPjwvaGVhZGVyPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJib2R5XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZnVsbE5hbWVcIj5cbiAgICAgICAgICA8aW5wdXQgZGlzYWJsZWQ9e2Rpc2FibGV9IHZhbHVlPXt2YWx1ZS5uYW1lfSBvbkNoYW5nZSA9IHsoZSk9PiBzZXRWYWx1ZSh7IG5hbWU6IGUuY3VycmVudFRhcmdldC52YWx1ZSB9KX0gdHlwZT1cInRleHRcIiBpZD1cIm5hbWVcIiBwbGFjZWhvbGRlcj1cIk5vbWJyZVwiLz5cbiAgICAgICAgICA8aW5wdXQgZGlzYWJsZWQ9e2Rpc2FibGV9IHZhbHVlPXt2YWx1ZS5sYXN0TmFtZX0gb25DaGFuZ2UgPSB7KGUpPT4gc2V0VmFsdWUoeyBsYXN0TmFtZTogZS5jdXJyZW50VGFyZ2V0LnZhbHVlIH0pfSB0eXBlPVwidGV4dFwiIGlkPVwibGFzdE5hbWVcIiBwbGFjZWhvbGRlcj1cIkFwZWxsaWRvXCIvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGlucHV0IGRpc2FibGVkPXtkaXNhYmxlfSB2YWx1ZT17dmFsdWUubWFpbH0gb25DaGFuZ2UgPSB7KGUpPT4gc2V0VmFsdWUoeyBtYWlsOiBlLmN1cnJlbnRUYXJnZXQudmFsdWUgfSl9IG9uRm9jdXM9eygpPT4gc2V0TWFpbFBvcChmYWxzZSl9IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJtYWlsXCIgcGxhY2Vob2xkZXI9XCJDb3JyZW8gZWxlY3Ryw7NuaWNvXCIvPlxuICAgICAgICA8UG9wb3ZlciBwbGFjZW1lbnQ9XCJib3R0b21cIiB0YXJnZXQ9XCJtYWlsXCIgaXNPcGVuPXttYWlsUG9wfT5cbiAgICAgICAgICA8UG9wb3ZlckJvZHk+WWEgZXhpc3RlIHVuYSBjdWVudGEgY29uIGVzdGUgY29ycmVvPC9Qb3BvdmVyQm9keT5cbiAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgICA8aW5wdXQgZGlzYWJsZWQ9e2Rpc2FibGV9IHZhbHVlPXt2YWx1ZS5wYXNzfSBvbkNoYW5nZSA9IHsoZSk9PiBzZXRWYWx1ZSh7IHBhc3M6IGUuY3VycmVudFRhcmdldC52YWx1ZSB9KX0gdHlwZT1cInBhc3N3b3JkXCIgaWQ9XCJwYXNzXCIgcGxhY2Vob2xkZXI9XCJjb250cmFzZcOxYVwiLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiaXJ0aF9zZXhcIj5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImJpcnRoZGF5XCI+XG4gICAgICAgICAgICA8cD5DdW1wbGVhw7FvczwvcD5cbiAgICAgICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gdmFsdWU9e3ZhbHVlLmJpcnRoZGF5fSBvbkNoYW5nZSA9IHsoZSk9PiBzZXRWYWx1ZSh7IGJpcnRoZGF5OiBlLmN1cnJlbnRUYXJnZXQudmFsdWUgfSl9IHR5cGU9XCJkYXRlXCIgbmFtZT1cImJpcnRoZGF5XCIgaWQ9XCJiaXJ0aGRheVwiLz5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiZ2VucmVcIj5cbiAgICAgICAgICAgIDxwPkdlbmVybzwvcD5cbiAgICAgICAgICAgIDxzZWxlY3QgZGlzYWJsZWQ9e2Rpc2FibGV9IHZhbHVlPXt2YWx1ZS5nZW5yZX0gb25DaGFuZ2UgPSB7KGUpPT4gc2V0VmFsdWUoeyBnZW5yZTogZS5jdXJyZW50VGFyZ2V0LnZhbHVlIH0pfSBuYW1lPVwiZ2VucmVcIiBpZD1cImdlbnJlXCI+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJtdWplclwiPk11amVyPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJob21icmVcIj5Ib21icmU8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm90cm9cIj5PdHJvPC9vcHRpb24+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGZvb3Rlcj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17KCk9PiBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaCh2YWwgPT4gc2V0VmFsdWUoeyBbdmFsXTogJycgfSkpfT5jYW5jZWxhcjwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIj5FbnZpYXI8L2J1dHRvbj5cbiAgICAgIDwvZm9vdGVyPlxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICBmb3Jte1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXJ7XG4gICAgICAgICAgY29sb3I6ICR7Y29sb3IucHJpbX07XG4gICAgICAgIH1cbiAgICAgICAgLmJvZHl7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIHBhZGRpbmc6IC41cmVtO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0e1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogLjVyZW07XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXRbdHlwZT1cImRhdGVcIl17XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAuMik7XG4gICAgICAgIH1cbiAgICAgICAgLmZ1bGxOYW1le1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgfVxuICAgICAgICAuZnVsbE5hbWUgaW5wdXR7XG4gICAgICAgIH1cbiAgICAgICAgLmZ1bGxOYW1lIGlucHV0Om50aC1jaGlsZCgyKXtcbiAgICAgICAgICBtYXJnaW4tbGVmdDogLjVyZW07XG4gICAgICAgIH1cbiAgICAgICAgLmJpcnRoX3NleHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICB9XG4gICAgICAgIGZvb3RlcntcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBwYWRkaW5nOiAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b257XG4gICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgY29sb3I6ICR7Y29sb3IucHJpbX07XG4gICAgICAgICAgYm9yZGVyOiAycHggc29saWQgJHtjb2xvci5wcmltfTtcbiAgICAgICAgICB0cmFuc2l0aW9uOiAyNTBtcyBlYXNlO1xuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b246Zm9jdXN7XG4gICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b246aG92ZXJ7XG4gICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgICAgYmFja2dyb3VuZDogJHtjb2xvci5wcmltfTtcbiAgICAgICAgfVxuICAgICAgYH1cbiAgICAgIDwvc3R5bGU+XG4gICAgPC9mb3JtPlxuICApXG59XG5cbmNvbnN0IExvZ1JlZyA9ICh7IGNoaWxkcmVuIH0pID0+IHtcblxuICByZXR1cm4oXG4gICAgPGRpdiBjbGFzc05hbWU9XCJtYWluX2NvbnRcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFpblwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInB1Ymxpc2hcIj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udFwiPlxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLm1haW5fY29udHtcbiAgICAgICAgICBoZWlnaHQ6IDEwMHZoO1xuICAgICAgICAgIHdpZHRoOiA3MCU7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgfVxuICAgICAgICAubWFpbntcbiAgICAgICAgICBoZWlnaHQ6IDUwJTtcbiAgICAgICAgICB3aWR0aDogODAlO1xuICAgICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgICAgICAgYW5pbWF0aW9uOiBkb3duIDYwMG1zIGVhc2UtaW4tb3V0O1xuICAgICAgICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGZvcndhcmRzO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIH1cbiAgICAgICAgLnB1Ymxpc2h7XG4gICAgICAgICAgd2lkdGg6IDUwJTtcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgYmFja2dyb3VuZDogdXJsKCcvc3RhdGljL3JhbmRvbS9yMTYuanBnJyl0b3AgY2VudGVyIG5vLXJlcGVhdDtcbiAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICAgICAgICB9XG4gICAgICAgIC5jb250e1xuICAgICAgICAgIHdpZHRoOiA1MCU7XG4gICAgICAgIH1cbiAgICAgICAgQGtleWZyYW1lcyBkb3due1xuICAgICAgICAgIDAle1xuICAgICAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTAwJSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIDUwJXtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg1MHB4KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgMTAwJXtcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMHB4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmNvbnN0IE15TW9kYWwgPSAoKSA9PiB7XG4gIGNvbnN0IG1lbnUgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5tYWluLm5hdi52aXNpYmxlKTtcbiAgY29uc3QgbWFpbiA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLm1haW4ubmF2KTtcbiAgY29uc3QgeyBsb2dpbiwgcmVnaXN0ZXIgfSA9IG1haW47XG4gIHJldHVybihcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsXCI+XG4gICAgICB7XG4gICAgICAgIGxvZ2luICYmIDxMb2dSZWc+PExvZ2luIC8+PC9Mb2dSZWc+XG4gICAgICB9XG4gICAgICB7XG4gICAgICAgIHJlZ2lzdGVyICYmIDxMb2dSZWc+PFJlZ2lzdGVyIC8+PC9Mb2dSZWc+XG4gICAgICB9XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIC5tb2RhbHtcbiAgICAgICAgICBkaXNwbGF5OiAke21lbnUgPyAnYmxvY2snIDogJ25vbmUnfTtcbiAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgLjUpO1xuICAgICAgICAgIHotaW5kZXg6IDE1MDtcbiAgICAgICAgICBjb250ZW50OiBcIiBcIjtcbiAgICAgICAgICB0cmFuc2l0aW9uOiAyNTBtcyBlYXNlO1xuICAgICAgICB9XG4gICAgICBgfVxuICAgICAgPC9zdHlsZT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5jb25zdCBFdmVudEhvbWUgPSAoeyBjdXJyZW50LCBzZXREb25hdGUgfSkgPT4ge1xuXG4gIHJldHVybihcbiAgICA8PlxuICAgICAgPGhlYWRlcj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8aDE+e2N1cnJlbnQudGl0bGV9PC9oMT5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJzdWJUaXRsZVwiPntjdXJyZW50LnN1YlRpdGxlfTwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2hlYWRlcj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm9keVwiPlxuICAgICAgICA8cD57Y3VycmVudC5kZXNjcmlwdGlvbn08L3A+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxmb290ZXI+XG4gICAgICAgIDxidXR0b24+UGFydGljaXBhcjwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpPT4gc2V0RG9uYXRlKHRydWUpfT5Eb25hcjwvYnV0dG9uPlxuICAgICAgPC9mb290ZXI+XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIGhlYWRlcntcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXIgZGl2e1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gICAgICAgICAgbWFyZ2luOiA1cmVtIDAgMXJlbTtcbiAgICAgICAgfVxuICAgICAgICBoMSwgcHtcbiAgICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICAgIH1cbiAgICAgICAgaGVhZGVyIGgxLCAuc3ViVGl0bGV7XG4gICAgICAgICAgbWFyZ2luOjA7XG4gICAgICAgICAgY29sb3I6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbntcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAke2N1cnJlbnQucHJpbX07XG4gICAgICAgICAgY29sb3I6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgICB0cmFuc2l0aW9uOiAyNTBtcyBlYXNlO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpmb2N1c3tcbiAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpob3ZlcntcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAke2N1cnJlbnQucHJpbX07XG4gICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgIH1cbiAgICAgICAgLmJvZHl7XG4gICAgICAgICAgZmxleC1ncm93OiAxO1xuICAgICAgICB9XG4gICAgICAgIGZvb3RlcntcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgfVxuICAgICAgICBmb290ZXIgYnV0dG9ue1xuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxcmVtO1xuICAgICAgICB9XG4gICAgICBgfVxuICAgICAgPC9zdHlsZT5cbiAgICA8Lz5cbiAgKVxufVxuXG5jb25zdCBEb25hdGUgPSAoeyBjdXJyZW50IH0pID0+IHtcbiAgY29uc3QgW2xvZ2luLCBzZXRMb2dpbl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtkb25hdGUsIHNldERvbmF0ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFt3ZWxjb21lLCBzZXRXZWxjb21lXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2xvYWRlciwgc2V0TG9hZGVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW21vdW50LCBzZXRNb3VudF0gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgW3VzZXIsIHNldFVzZXJdID0gdXNlU3RhdGUoeyBmdWxsTmFtZTogJ3N0YXIgZ3JlZW4nLCBwZXJmaWxJbWc6ICcvc3RhdGljL3JhbmRvbS9yNS5qcGcnIH0pO1xuICBjb25zdCBvblRlc3QgPSBhc3luYygpPT4ge1xuICAgIHRyeXtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnL3VzZXIvdGVzdExvZ2luJyk7XG4gICAgICBpZihyZXMuZGF0YSl7XG4gICAgICAgIHNldExvYWRlcihmYWxzZSk7XG4gICAgICAgIHNldFVzZXIocmVzLmRhdGEpO1xuICAgICAgICBzZXREb25hdGUodHJ1ZSk7XG4gICAgICB9XG4gICAgfWNhdGNoKGUpe1xuICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICBzZXRMb2FkZXIoZmFsc2UpO1xuICAgICAgc2V0TG9naW4odHJ1ZSk7XG4gICAgfVxuICB9XG4gICAgdXNlRWZmZWN0KCgpPT4ge1xuICAgICAgb25UZXN0KCk7XG4gICAgfSxbXSlcblxuICAgIGNvbnN0IG9uRG9uYXRlID0gYXN5bmMoZSkgPT4ge1xuICAgICAgdHJ5e1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNldERvbmF0ZShmYWxzZSk7XG4gICAgICAgIHNldExvYWRlcih0cnVlKTtcbiAgICAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgIHNldExvYWRlcihmYWxzZSk7XG4gICAgICAgICAgc2V0V2VsY29tZSh0cnVlKTtcbiAgICAgICAgfSwyMDAwKTtcbiAgICAgIH1jYXRjaChlKXtcbiAgICAgICAgY29uc29sZS5sb2coZSk7XG4gICAgICB9XG4gICAgfVxuICBjb25zdCB7IHBlcmZpbEltZywgZnVsbE5hbWUsIHdhbGxldCB9ID0gdXNlcjtcbiAgcmV0dXJuKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibWFpblwiPlxuICAgICAge1xuICAgICAgICBsb2FkZXIgJiYgPGRpdiBjbGFzc05hbWU9XCJsb2FkZXJcIj48U3Bpbm5lciBjb2xvcj17IGN1cnJlbnQudGl0bGUgPT09ICdzaWVtYnJhJyA/ICdtYWluLWdyZWVuJyA6IGN1cnJlbnQudGl0bGUgPT09ICdheXVkYScgPyAnbWFpbi1yZWQnIDogJ21haW4tYmx1ZScgfSAvPjwvZGl2PlxuICAgICAgfVxuICAgICAge1xuICAgICAgICBsb2dpbiAmJiA8ZGl2IGNsYXNzTmFtZT1cImxvZ2luXCI+PExvZ2luIHByaW09eyBjdXJyZW50LnByaW0gfSB0aXRsZT17Y3VycmVudC50aXRsZX0gLz48L2Rpdj5cbiAgICAgIH1cbiAgICAgIHtcbiAgICAgICAgZG9uYXRlICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW5fZG9uYXRlIGFuaW1hdGVkIGZhZGVJblwiPlxuICAgICAgICAgICAgPGhlYWRlcj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1c2VyIGFuaW1hdGVkIGZhZGVJbiBkZWxheS0xc1wiPlxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtwZXJmaWxJbWd9IGFsdD1cIlwiLz5cbiAgICAgICAgICAgICAgICA8cD57ZnVsbE5hbWV9PC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3VuZCBhbmltYXRlZCBmbGlwSW5YIGRlbGF5LTJzXCI+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCIvc3RhdGljL2dyZWVuY29pbi5zdmdcIiBhbHQ9XCJcIi8+XG4gICAgICAgICAgICAgICAgPHA+e3dhbGxldH08L3A+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9oZWFkZXI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFuaW1hdGVkIGZhZGVJbiBkZWxheS0yc1wiPlxuICAgICAgICAgICAgICA8aDE+RG9uYXI8L2gxPlxuICAgICAgICAgICAgICA8cD5JbmdyZXNhIHVuIG1vbnRvIGVuIGdyZWVuY29pbnMsIGxvcyBtaXNtb3Mgc2VyYW4gZGVzY29udGFkb3MgZGUgc3UgY3VlbnRhIHkgc2VyYW4gcmVjaWJpZG9zIHBvciBsYXMgb2dhbml6YWNpb25lcyBxdWUgYXBveWFuIGVzdGEgY2F1c2EuPC9wPlxuICAgICAgICAgICAgICA8Zm9ybSBtZXRob2Q9XCJQT1NUXCIgb25TdWJtaXQ9e29uRG9uYXRlfT5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdmFsdWU9e21vdW50fSBvbkNoYW5nZT17KGUpPT4gc2V0TW91bnQoZS5jdXJyZW50VGFyZ2V0LnZhbHVlKX0gdHlwZT1cIm51bWJlclwiLz5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIj5kb25hcjwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgICAgfVxuICAgICAge1xuICAgICAgICB3ZWxjb21lICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndlbGNvbWUgYW5pbWF0ZWQgZmFkZUluXCI+XG4gICAgICAgICAgICA8aDE+RmVsaWNpZGFkZXMsIHlhIGVyZXMgZW1iYWphZG9yIGRlIGVzdGUgZXZlbnRvPC9oMT5cbiAgICAgICAgICAgIDxwPlBvZHJhcyBzZWd1aXIgbG8gcXVlIGhhY2Vtb3MgY29uIHR1IGNvbGFib3JhY2lvbiBlbiBlbCBzaWd1aWVudGUgPGEgaHJlZj1cIiNcIj5FbmxhY2UuPC9hPjwvcD5cbiAgICAgICAgICAgIDxwPkRlIGlndWFsIG1hbmVyYSBsYXMgYWN0dWFsaXphY2lvbmVzIGRlbCBldmVudG8gc2VyYW4gcHVibGljYWRhcyBlbiB0dSBtdXJvLjwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAubWFpbntcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlcntcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMnJlbTtcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXIgcHtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIH1cbiAgICAgICAgLmxvYWRlcntcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIC5sb2dpbntcbiAgICAgICAgICBoZWlnaHQ6IDYwJTtcbiAgICAgICAgfVxuICAgICAgICAubWFpbl9kb25hdGUgaDF7XG4gICAgICAgICAgY29sb3I6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgfVxuICAgICAgICAudXNlciBpbWd7XG4gICAgICAgICAgd2lkdGg6IDgwcHg7XG4gICAgICAgICAgaGVpZ2h0OiA4MHB4O1xuICAgICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgICAgIG9iamVjdC1wb3NpdGlvbjogY2VudGVyO1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgfVxuICAgICAgICAuZm91bmR7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIC5mb3VuZCBpbWd7XG4gICAgICAgICAgd2lkdGg6IDMwcHg7XG4gICAgICAgICAgaGVpZ2h0OiAzMHB4O1xuICAgICAgICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgICAgICAgIG9iamVjdC1wb3NpdGlvbjsgY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0e1xuICAgICAgICAgIHdpZHRoOiA2MHB4O1xuICAgICAgICB9XG4gICAgICAgIC53ZWxjb21lIGgxLCBhe1xuICAgICAgICAgIGNvbG9yOiAke2N1cnJlbnQucHJpbX07XG4gICAgICAgIH1cbiAgICAgICAgLndlbGNvbWUgYXtcbiAgICAgICAgICBmb250LXdpZ2h0OiA1NTA7XG4gICAgICAgIH1cbiAgICAgICAgLndlbGNvbWUgcHtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmNvbnN0IEV2ZW50cyA9ICgpID0+IHtcbiAgY29uc3QgZXZlbnRzID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuZXZlbnRzKTtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCB7IHZpc2libGUsIGN1cnJlbnQgfSA9IGV2ZW50cztcbiAgY29uc3QgW2RvbmF0ZSwgc2V0RG9uYXRlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgdXNlRWZmZWN0KCgpPT4gc2V0RG9uYXRlKHRydWUpLFt2aXNpYmxlXSk7XG4gIHJldHVybihcbiAgICA8TW9kYWwgaXNPcGVuPXt2aXNpYmxlfSBzdHlsZT17eyBtaW5XaWR0aDogJzk1dncnIH19PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYWluXCI+XG4gICAgICAgIDxidXR0b24gdGl0bGU9XCJDZXJyYXJcIiBvbkNsaWNrPXsoKT0+IGRpc3BhdGNoKHsgdHlwZTogT05fRVZFTlQsIGV2ZW50VHlwZTogbnVsbCB9KX0+WDwvYnV0dG9uPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImltZ1wiPlxuICAgICAgICAgIDxpbWcgc3JjPXtjdXJyZW50LmltZ30gYWx0PVwiXCIvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvXCI+XG4gICAgICAgICAge1xuICAgICAgICAgICAgZG9uYXRlID8gPERvbmF0ZSBjdXJyZW50PXtjdXJyZW50fSAvPiA6IDxFdmVudEhvbWUgY3VycmVudD17Y3VycmVudH0gc2V0RG9uYXRlPXtzZXREb25hdGV9IC8+XG4gICAgICAgICAgfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAgIC5tYWlue1xuICAgICAgICAgICAgLy9oZWlnaHQ6IDgwdmg7XG4gICAgICAgICAgICBoZWlnaHQ6IDEwMHZoO1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5pbWcsIC5pbmZve1xuICAgICAgICAgICAgLy93aWR0aDogNTAlO1xuICAgICAgICAgICAgLy9oZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGltZ3tcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgICAgICBvYmplY3QtcG9zaXRpb246ICR7Y3VycmVudC5wcmltID09PSBcIiMwM2E3ZjBcIiA/ICd0b3AnIDogJ2JvdHRvbScgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmluZm97XG4gICAgICAgICAgICBwYWRkaW5nOiAuNXJlbSAuNXJlbSAuNXJlbSAxcmVtO1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1dHRvbntcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgYm9yZGVyOiAycHggc29saWQgJHtjdXJyZW50LnByaW19O1xuICAgICAgICAgICAgY29sb3I6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IDI1MG1zIGVhc2U7XG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICB0b3A6IC41cmVtO1xuICAgICAgICAgICAgcmlnaHQ6IC41cmVtO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidXR0b246Zm9jdXN7XG4gICAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgIH1cbiAgICAgICAgICBidXR0b246aG92ZXJ7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAke2N1cnJlbnQucHJpbX07XG4gICAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICB9XG4gICAgICAgIGB9XG4gICAgICAgIDwvc3R5bGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L01vZGFsPlxuICApXG59XG5cbmNvbnN0IExheW91dCA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgcmV0dXJuKFxuICAgIDxkaXY+XG4gICAgICA8SGVhZD5cbiAgICAgICAgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCIvc3RhdGljL2FuaW1hdGUubWluLmNzc1wiLz5cbiAgICAgICAgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCIvc3RhdGljL2Fvcy5jc3NcIi8+XG4gICAgICAgIDxsaW5rIGhyZWY9XCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9QXJjaGl2bytCbGFja3xPcGVuK1NhbnN8UGFjaWZpY28mZGlzcGxheT1zd2FwXCIgcmVsPVwic3R5bGVzaGVldFwiLz5cbiAgICAgIDwvSGVhZD5cbiAgICAgIDxtYWluPlxuICAgICAgICA8SGVhZGVyIC8+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPEV2ZW50cyAvPlxuICAgICAgPC9tYWluPlxuICAgICAgPE1lbnUgLz5cbiAgICAgIDxNeU1vZGFsIC8+XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIGRpdntcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgfVxuICAgICAgICBtYWlue1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICBmbGV4OiAxIDEgMDtcbiAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgICAgICB9XG4gICAgICBgfVxuICAgICAgPC9zdHlsZT5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBMYXlvdXQ7XG4iXX0= */\\n/*@ sourceURL=/home/felix/Documentos/projects/greenlink/components/main/layout.jsx */\"));\n};\n\nconst MyModal = () => {\n  const menu = useSelector(state => state.main.nav.visible);\n  const main = useSelector(state => state.main.nav);\n  const {\n    login,\n    register\n  } = main;\n  return __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3625275396\", [menu ? 'block' : 'none']]]) + \" \" + \"modal\"\n  }, login && __jsx(LogReg, null, __jsx(Login, null)), register && __jsx(LogReg, null, __jsx(Register, null)), __jsx(_JSXStyle, {\n    id: \"3625275396\",\n    dynamic: [menu ? 'block' : 'none']\n  }, `.modal.__jsx-style-dynamic-selector{display:${menu ? 'block' : 'none'};position:fixed;top:0;left:0;height:100%;width:100%;background:rgba(0,0,0,.5);z-index:150;content:\" \";-webkit-transition:250ms ease;transition:250ms ease;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/felix/Documentos/projects/greenlink/components/main/layout.jsx */`));\n};\n\nconst EventHome = ({\n  current,\n  setDonate\n}) => {\n  return __jsx(React.Fragment, null, __jsx(\"header\", {\n    className: _JSXStyle.dynamic([[\"2306986395\", [current.prim, current.prim, current.prim, current.prim]]])\n  }, __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"2306986395\", [current.prim, current.prim, current.prim, current.prim]]])\n  }, __jsx(\"h1\", {\n    className: _JSXStyle.dynamic([[\"2306986395\", [current.prim, current.prim, current.prim, current.prim]]])\n  }, current.title), __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"2306986395\", [current.prim, current.prim, current.prim, current.prim]]]) + \" \" + \"subTitle\"\n  }, current.subTitle))), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"2306986395\", [current.prim, current.prim, current.prim, current.prim]]]) + \" \" + \"body\"\n  }, __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"2306986395\", [current.prim, current.prim, current.prim, current.prim]]])\n  }, current.description)), __jsx(\"footer\", {\n    className: _JSXStyle.dynamic([[\"2306986395\", [current.prim, current.prim, current.prim, current.prim]]])\n  }, __jsx(\"button\", {\n    className: _JSXStyle.dynamic([[\"2306986395\", [current.prim, current.prim, current.prim, current.prim]]])\n  }, \"Participar\"), __jsx(\"button\", {\n    onClick: () => setDonate(true),\n    className: _JSXStyle.dynamic([[\"2306986395\", [current.prim, current.prim, current.prim, current.prim]]])\n  }, \"Donar\")), __jsx(_JSXStyle, {\n    id: \"2306986395\",\n    dynamic: [current.prim, current.prim, current.prim, current.prim]\n  }, `header.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;}header.__jsx-style-dynamic-selector div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;margin:5rem 0 1rem;}h1.__jsx-style-dynamic-selector,p.__jsx-style-dynamic-selector{max-width:100%;}header.__jsx-style-dynamic-selector h1.__jsx-style-dynamic-selector,.subTitle.__jsx-style-dynamic-selector{margin:0;color:${current.prim};text-transform:uppercase;}button.__jsx-style-dynamic-selector{background:transparent;border:2px solid ${current.prim};color:${current.prim};-webkit-transition:250ms ease;transition:250ms ease;}button.__jsx-style-dynamic-selector:focus{outline:none;}button.__jsx-style-dynamic-selector:hover{background:${current.prim};color:#fff;}.body.__jsx-style-dynamic-selector{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}footer.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}footer.__jsx-style-dynamic-selector button.__jsx-style-dynamic-selector{margin-left:1rem;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2ZlbGl4L0RvY3VtZW50b3MvcHJvamVjdHMvZ3JlZW5saW5rL2NvbXBvbmVudHMvbWFpbi9sYXlvdXQuanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJXa0IsQUFHd0IsQUFLQSxBQU9FLEFBR1AsQUFLZSxBQU1WLEFBRzJCLEFBSTVCLEFBR0MsQUFLSSxTQXpCa0IsSUFXckMsRUFkQSxFQTZCQSxNQXJCZ0QsaUJBU25DLElBYmMsT0FjM0Isa0JBYkEsQUFJcUMsRUFZckMsR0FqQ2dDLEFBS1IsQUErQkcsOEJBZEgsZ0RBaEJLLElBaUI3QixlQWNxQixrQkFwQ0ksb0VBTUEsT0ErQnpCLGtDQXBDQSxvRUFNcUIsbUJBQ3JCIiwiZmlsZSI6Ii9ob21lL2ZlbGl4L0RvY3VtZW50b3MvcHJvamVjdHMvZ3JlZW5saW5rL2NvbXBvbmVudHMvbWFpbi9sYXlvdXQuanN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZHVjZXIgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBPTl9FVkVOVCB9IGZyb20gJy4uLy4uL3N0b3JlL2FjdGlvbnMnO1xuLy9pbXBvcnQgJy4uLy4uL25vZGVfbW9kdWxlcy9ib290c3RyYXAvc2Nzcy9ib290c3RyYXAuc2Nzcyc7XG5pbXBvcnQgJy4vYmFzZS5zY3NzJztcbmltcG9ydCBIZWFkIGZyb20gJ25leHQvaGVhZCc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4vaGVhZGVyJztcbmltcG9ydCBNZW51IGZyb20gJy4vbWVudSc7XG5pbXBvcnQgUm91dGVyIGZyb20gJ25leHQvcm91dGVyJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBQb3BvdmVyLCBQb3BvdmVyQm9keSwgU3Bpbm5lciwgTW9kYWwgfSBmcm9tICdyZWFjdHN0cmFwJztcbmltcG9ydCB7IGNvbG9yLCBmb250IH0gZnJvbSAnLi4vLi4vbGF5b3V0L3Zhcic7XG5pbXBvcnQgVGl0bGUgZnJvbSAnLi4vbWFpbi90aXRsZSc7XG5cbmNvbnN0IExvZ2luID0gKHsgcHJpbSwgdGl0bGUgfSkgPT4ge1xuXG4gIGNvbnN0IFttYWlsLCBzZXRNYWlsXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3Bhc3MsIHNldFBhc3NdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbbWFpbFBvcCwgc2V0TWFpbFBvcF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtwYXNzUG9wLCBzZXRQYXNzUG9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2Rpc2FibGUsIHNldERpc2FibGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IG9uU3VibWl0ID0gYXN5bmMoZSkgPT4ge1xuICAgIHRyeXtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHNldERpc2FibGUodHJ1ZSk7XG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBtYWlsLFxuICAgICAgICBwYXNzXG4gICAgICB9XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5wb3N0KCcvdXNlci9sb2dpbicsIGRhdGEpO1xuICAgICAgaWYocmVzLmRhdGEgPT09ICdtYWlsJykge1xuICAgICAgICAgc2V0TWFpbFBvcCh0cnVlKTtcbiAgICAgICAgIHJldHVybiBzZXREaXNhYmxlKGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGlmKHJlcy5kYXRhID09PSAncGFzcycpe1xuICAgICAgICBzZXRQYXNzUG9wKHRydWUpXG4gICAgICAgIHJldHVybiBzZXREaXNhYmxlKGZhbHNlKTtcbiAgICAgIH07XG4gICAgICBSb3V0ZXIucHVzaChgL3BlcmZpbC8ke3Jlcy5kYXRhfWApO1xuICAgIH1jYXRjaChlKXtcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybihcbiAgICA8Zm9ybSBvblN1Ym1pdD17b25TdWJtaXR9IG1ldGhvZD1cIlBPU1RcIj5cbiAgICAgIDxoZWFkZXI+PGgxPkluaWNpYXIgU2VzaW9uPC9oMT48L2hlYWRlcj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm9keVwiPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj1cIm1haWxcIj5cbiAgICAgICAgICA8cD5Vc3VhcmlvPC9wPlxuICAgICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gb25Gb2N1cz17KCk9PiBzZXRNYWlsUG9wKGZhbHNlKX0gdmFsdWU9e21haWx9IG9uQ2hhbmdlPXsoZSk9PiBzZXRNYWlsKGUuY3VycmVudFRhcmdldC52YWx1ZSl9IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJtYWlsXCIgbmFtZT1cIm1haWxcIi8+XG4gICAgICAgICAgPFBvcG92ZXIgdGFyZ2V0PVwibWFpbFwiIHBsYWNlbWVudD1cInJpZ2h0XCIgaXNPcGVuPXttYWlsUG9wfT5cbiAgICAgICAgICAgIDxQb3BvdmVyQm9keT5FbCBjb3JyZW8gbm8gZXMgdmFsaWRvPC9Qb3BvdmVyQm9keT5cbiAgICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPVwicGFzc1wiPlxuICAgICAgICAgIDxwPmNvbnRyYXNlw7FhPC9wPlxuICAgICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gb25Gb2N1cz17KCk9PiBzZXRQYXNzUG9wKGZhbHNlKX0gdmFsdWU9e3Bhc3N9IG9uQ2hhbmdlPXsoZSk9PiBzZXRQYXNzKGUuY3VycmVudFRhcmdldC52YWx1ZSl9IHR5cGU9XCJwYXNzd29yZFwiIG5hbWU9XCJwYXNzXCIgaWQ9XCJwYXNzXCIvPlxuICAgICAgICAgIDxQb3BvdmVyIHRhcmdldD1cInBhc3NcIiBwbGFjZW1lbnQ9XCJyaWdodFwiIGlzT3Blbj17cGFzc1BvcH0+XG4gICAgICAgICAgICA8UG9wb3ZlckJvZHk+TGEgY29udHJhc2XDsWEgbm8gZXMgdmFsaWRhPC9Qb3BvdmVyQm9keT5cbiAgICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxmb290ZXI+XG4gICAgICAgIHtcbiAgICAgICAgICBkaXNhYmxlID8gPFNwaW5uZXIgY29sb3I9eyB0aXRsZSA9PT0gJ3NpZW1icmEnID8gJ21haW4tZ3JlZW4nIDogdGl0bGUgPT09ICdheXVkYScgPyAnbWFpbi1yZWQnIDogJ21haW4tYmx1ZScgfSAvPiA6IDxidXR0b24gZGlzYWJsZWQ9e2Rpc2FibGV9IHR5cGU9XCJzdWJtaXRcIj5Mb2dpbjwvYnV0dG9uPlxuICAgICAgICB9XG4gICAgICA8L2Zvb3Rlcj5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgZm9ybXtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlcntcbiAgICAgICAgICBjb2xvcjogJHtwcmltIHx8IGNvbG9yLnByaW19O1xuICAgICAgICAgIG1hcmdpbi10b3A6IC41cmVtO1xuICAgICAgICB9XG4gICAgICAgIC5ib2R5e1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIGxhYmVsOm50aC1jaGlsZCgxKXtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgICAgICB9XG4gICAgICAgIGxhYmVsIHB7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgIGNvbG9yOiByZ2JhKDAsIDAsIDAsIC4yKTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dHtcbiAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgLjIpO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0OmZvY3Vze1xuICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgICAgYm9yZGVyLWNvbG9yOiAke3ByaW0gfHwgY29sb3IucHJpbX07XG4gICAgICAgIH1cbiAgICAgICAgZm9vdGVye1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgICBwYWRkaW5nOiAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICBidXR0b257XG4gICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgYm9yZGVyOiAycHggc29saWQgJHtwcmltIHx8IGNvbG9yLnByaW19O1xuICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgICAgdHJhbnNpdGlvbjogMjUwbXMgZWFzZTtcbiAgICAgICAgICBjb2xvcjogJHtwcmltIHx8IGNvbG9yLnByaW19O1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpmb2N1c3tcbiAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpob3ZlcntcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAke3ByaW0gfHwgY29sb3IucHJpbX07XG4gICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvZm9ybT5cbiAgKVxufVxuXG5jb25zdCBSZWdpc3RlciA9ICgpID0+IHtcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VSZWR1Y2VyKChzdGF0ZSwgbmV4dCkgPT4gKHsgLi4uc3RhdGUsIC4uLm5leHQgfSkse1xuICAgIG5hbWU6ICcnLFxuICAgIGxhc3ROYW1lOiAnJyxcbiAgICBtYWlsOiAnJyxcbiAgICBwYXNzOiAnJyxcbiAgICBiaXJ0aGRheTogJycsXG4gICAgZ2VucmU6ICdNdWplcicsXG4gIH0pXG4gIGNvbnN0IFtkaXNhYmxlLCBzZXREaXNhYmxlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW21haWxQb3AsIHNldE1haWxQb3BdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IG9uU3VibWl0ID0gYXN5bmMoZSkgPT4ge1xuICAgIHRyeXtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IGRhdGEgPSB2YWx1ZTtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLnBvc3QoJy91c2VyL3JlZ2lzdGVyJywgZGF0YSk7XG4gICAgICBpZihyZXMuZGF0YSA9PT0gJ21haWwnKXtcbiAgICAgICAgc2V0TWFpbFBvcCh0cnVlKTtcbiAgICAgICAgcmV0dXJuIHNldERpc2FibGUoZmFsc2UpO1xuICAgICAgfVxuICAgICAgUm91dGVyLnB1c2goYC9wZXJmaWwvJHtyZXMuZGF0YX1gKTtcbiAgICB9Y2F0Y2goZSl7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4oXG4gICAgPGZvcm0gb25TdWJtaXQ9e29uU3VibWl0fSBtZXRob2Q9XCJQT1NUXCI+XG4gICAgICA8aGVhZGVyPjxoMT5SZWdpc3RybzwvaDE+PC9oZWFkZXI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmdWxsTmFtZVwiPlxuICAgICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gdmFsdWU9e3ZhbHVlLm5hbWV9IG9uQ2hhbmdlID0geyhlKT0+IHNldFZhbHVlKHsgbmFtZTogZS5jdXJyZW50VGFyZ2V0LnZhbHVlIH0pfSB0eXBlPVwidGV4dFwiIGlkPVwibmFtZVwiIHBsYWNlaG9sZGVyPVwiTm9tYnJlXCIvPlxuICAgICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gdmFsdWU9e3ZhbHVlLmxhc3ROYW1lfSBvbkNoYW5nZSA9IHsoZSk9PiBzZXRWYWx1ZSh7IGxhc3ROYW1lOiBlLmN1cnJlbnRUYXJnZXQudmFsdWUgfSl9IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJsYXN0TmFtZVwiIHBsYWNlaG9sZGVyPVwiQXBlbGxpZG9cIi8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8aW5wdXQgZGlzYWJsZWQ9e2Rpc2FibGV9IHZhbHVlPXt2YWx1ZS5tYWlsfSBvbkNoYW5nZSA9IHsoZSk9PiBzZXRWYWx1ZSh7IG1haWw6IGUuY3VycmVudFRhcmdldC52YWx1ZSB9KX0gb25Gb2N1cz17KCk9PiBzZXRNYWlsUG9wKGZhbHNlKX0gdHlwZT1cInRleHRcIiBpZD1cIm1haWxcIiBwbGFjZWhvbGRlcj1cIkNvcnJlbyBlbGVjdHLDs25pY29cIi8+XG4gICAgICAgIDxQb3BvdmVyIHBsYWNlbWVudD1cImJvdHRvbVwiIHRhcmdldD1cIm1haWxcIiBpc09wZW49e21haWxQb3B9PlxuICAgICAgICAgIDxQb3BvdmVyQm9keT5ZYSBleGlzdGUgdW5hIGN1ZW50YSBjb24gZXN0ZSBjb3JyZW88L1BvcG92ZXJCb2R5PlxuICAgICAgICA8L1BvcG92ZXI+XG4gICAgICAgIDxpbnB1dCBkaXNhYmxlZD17ZGlzYWJsZX0gdmFsdWU9e3ZhbHVlLnBhc3N9IG9uQ2hhbmdlID0geyhlKT0+IHNldFZhbHVlKHsgcGFzczogZS5jdXJyZW50VGFyZ2V0LnZhbHVlIH0pfSB0eXBlPVwicGFzc3dvcmRcIiBpZD1cInBhc3NcIiBwbGFjZWhvbGRlcj1cImNvbnRyYXNlw7FhXCIvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJpcnRoX3NleFwiPlxuICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiYmlydGhkYXlcIj5cbiAgICAgICAgICAgIDxwPkN1bXBsZWHDsW9zPC9wPlxuICAgICAgICAgICAgPGlucHV0IGRpc2FibGVkPXtkaXNhYmxlfSB2YWx1ZT17dmFsdWUuYmlydGhkYXl9IG9uQ2hhbmdlID0geyhlKT0+IHNldFZhbHVlKHsgYmlydGhkYXk6IGUuY3VycmVudFRhcmdldC52YWx1ZSB9KX0gdHlwZT1cImRhdGVcIiBuYW1lPVwiYmlydGhkYXlcIiBpZD1cImJpcnRoZGF5XCIvPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJnZW5yZVwiPlxuICAgICAgICAgICAgPHA+R2VuZXJvPC9wPlxuICAgICAgICAgICAgPHNlbGVjdCBkaXNhYmxlZD17ZGlzYWJsZX0gdmFsdWU9e3ZhbHVlLmdlbnJlfSBvbkNoYW5nZSA9IHsoZSk9PiBzZXRWYWx1ZSh7IGdlbnJlOiBlLmN1cnJlbnRUYXJnZXQudmFsdWUgfSl9IG5hbWU9XCJnZW5yZVwiIGlkPVwiZ2VucmVcIj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm11amVyXCI+TXVqZXI8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImhvbWJyZVwiPkhvbWJyZTwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwib3Ryb1wiPk90cm88L29wdGlvbj5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8Zm9vdGVyPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXsoKT0+IE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKHZhbCA9PiBzZXRWYWx1ZSh7IFt2YWxdOiAnJyB9KSl9PmNhbmNlbGFyPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiPkVudmlhcjwvYnV0dG9uPlxuICAgICAgPC9mb290ZXI+XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIGZvcm17XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlcntcbiAgICAgICAgICBjb2xvcjogJHtjb2xvci5wcmltfTtcbiAgICAgICAgfVxuICAgICAgICAuYm9keXtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgcGFkZGluZzogLjVyZW07XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXR7XG4gICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgICAgICAgcGFkZGluZy1sZWZ0OiAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dFt0eXBlPVwiZGF0ZVwiXXtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIC4yKTtcbiAgICAgICAgfVxuICAgICAgICAuZnVsbE5hbWV7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIC5mdWxsTmFtZSBpbnB1dHtcbiAgICAgICAgfVxuICAgICAgICAuZnVsbE5hbWUgaW5wdXQ6bnRoLWNoaWxkKDIpe1xuICAgICAgICAgIG1hcmdpbi1sZWZ0OiAuNXJlbTtcbiAgICAgICAgfVxuICAgICAgICAuYmlydGhfc2V4e1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIH1cbiAgICAgICAgZm9vdGVye1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIHBhZGRpbmc6IC41cmVtO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbntcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICBjb2xvcjogJHtjb2xvci5wcmltfTtcbiAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAke2NvbG9yLnByaW19O1xuICAgICAgICAgIHRyYW5zaXRpb246IDI1MG1zIGVhc2U7XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IC41cmVtO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpmb2N1c3tcbiAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICB9XG4gICAgICAgIGJ1dHRvbjpob3ZlcntcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAke2NvbG9yLnByaW19O1xuICAgICAgICB9XG4gICAgICBgfVxuICAgICAgPC9zdHlsZT5cbiAgICA8L2Zvcm0+XG4gIClcbn1cblxuY29uc3QgTG9nUmVnID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xuXG4gIHJldHVybihcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW5fY29udFwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYWluXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHVibGlzaFwiPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250XCI+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAubWFpbl9jb250e1xuICAgICAgICAgIGhlaWdodDogMTAwdmg7XG4gICAgICAgICAgd2lkdGg6IDcwJTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB9XG4gICAgICAgIC5tYWlue1xuICAgICAgICAgIGhlaWdodDogNTAlO1xuICAgICAgICAgIHdpZHRoOiA4MCU7XG4gICAgICAgICAgYmFja2dyb3VuZDogI2ZmZjtcbiAgICAgICAgICBhbmltYXRpb246IGRvd24gNjAwbXMgZWFzZS1pbi1vdXQ7XG4gICAgICAgICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgfVxuICAgICAgICAucHVibGlzaHtcbiAgICAgICAgICB3aWR0aDogNTAlO1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoJy9zdGF0aWMvcmFuZG9tL3IxNi5qcGcnKXRvcCBjZW50ZXIgbm8tcmVwZWF0O1xuICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XG4gICAgICAgIH1cbiAgICAgICAgLmNvbnR7XG4gICAgICAgICAgd2lkdGg6IDUwJTtcbiAgICAgICAgfVxuICAgICAgICBAa2V5ZnJhbWVzIGRvd257XG4gICAgICAgICAgMCV7XG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMDAlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgNTAle1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDUwcHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAxMDAle1xuICAgICAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwcHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgYH1cbiAgICAgIDwvc3R5bGU+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuY29uc3QgTXlNb2RhbCA9ICgpID0+IHtcbiAgY29uc3QgbWVudSA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLm1haW4ubmF2LnZpc2libGUpO1xuICBjb25zdCBtYWluID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUubWFpbi5uYXYpO1xuICBjb25zdCB7IGxvZ2luLCByZWdpc3RlciB9ID0gbWFpbjtcbiAgcmV0dXJuKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWxcIj5cbiAgICAgIHtcbiAgICAgICAgbG9naW4gJiYgPExvZ1JlZz48TG9naW4gLz48L0xvZ1JlZz5cbiAgICAgIH1cbiAgICAgIHtcbiAgICAgICAgcmVnaXN0ZXIgJiYgPExvZ1JlZz48UmVnaXN0ZXIgLz48L0xvZ1JlZz5cbiAgICAgIH1cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLm1vZGFse1xuICAgICAgICAgIGRpc3BsYXk6ICR7bWVudSA/ICdibG9jaycgOiAnbm9uZSd9O1xuICAgICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAuNSk7XG4gICAgICAgICAgei1pbmRleDogMTUwO1xuICAgICAgICAgIGNvbnRlbnQ6IFwiIFwiO1xuICAgICAgICAgIHRyYW5zaXRpb246IDI1MG1zIGVhc2U7XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmNvbnN0IEV2ZW50SG9tZSA9ICh7IGN1cnJlbnQsIHNldERvbmF0ZSB9KSA9PiB7XG5cbiAgcmV0dXJuKFxuICAgIDw+XG4gICAgICA8aGVhZGVyPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxoMT57Y3VycmVudC50aXRsZX08L2gxPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInN1YlRpdGxlXCI+e2N1cnJlbnQuc3ViVGl0bGV9PC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvaGVhZGVyPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJib2R5XCI+XG4gICAgICAgIDxwPntjdXJyZW50LmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGZvb3Rlcj5cbiAgICAgICAgPGJ1dHRvbj5QYXJ0aWNpcGFyPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17KCk9PiBzZXREb25hdGUodHJ1ZSl9PkRvbmFyPC9idXR0b24+XG4gICAgICA8L2Zvb3Rlcj5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgaGVhZGVye1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlciBkaXZ7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgICAgICAgICBtYXJnaW46IDVyZW0gMCAxcmVtO1xuICAgICAgICB9XG4gICAgICAgIGgxLCBwe1xuICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXIgaDEsIC5zdWJUaXRsZXtcbiAgICAgICAgICBtYXJnaW46MDtcbiAgICAgICAgICBjb2xvcjogJHtjdXJyZW50LnByaW19O1xuICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9ue1xuICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgICBjb2xvcjogJHtjdXJyZW50LnByaW19O1xuICAgICAgICAgIHRyYW5zaXRpb246IDI1MG1zIGVhc2U7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uOmZvY3Vze1xuICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uOmhvdmVye1xuICAgICAgICAgIGJhY2tncm91bmQ6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgfVxuICAgICAgICAuYm9keXtcbiAgICAgICAgICBmbGV4LWdyb3c6IDE7XG4gICAgICAgIH1cbiAgICAgICAgZm9vdGVye1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIGZvb3RlciBidXR0b257XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IDFyZW07XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvPlxuICApXG59XG5cbmNvbnN0IERvbmF0ZSA9ICh7IGN1cnJlbnQgfSkgPT4ge1xuICBjb25zdCBbbG9naW4sIHNldExvZ2luXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2RvbmF0ZSwgc2V0RG9uYXRlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3dlbGNvbWUsIHNldFdlbGNvbWVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbbG9hZGVyLCBzZXRMb2FkZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbbW91bnQsIHNldE1vdW50XSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbdXNlciwgc2V0VXNlcl0gPSB1c2VTdGF0ZSh7IGZ1bGxOYW1lOiAnc3RhciBncmVlbicsIHBlcmZpbEltZzogJy9zdGF0aWMvcmFuZG9tL3I1LmpwZycgfSk7XG4gIGNvbnN0IG9uVGVzdCA9IGFzeW5jKCk9PiB7XG4gICAgdHJ5e1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcvdXNlci90ZXN0TG9naW4nKTtcbiAgICAgIGlmKHJlcy5kYXRhKXtcbiAgICAgICAgc2V0TG9hZGVyKGZhbHNlKTtcbiAgICAgICAgc2V0VXNlcihyZXMuZGF0YSk7XG4gICAgICAgIHNldERvbmF0ZSh0cnVlKTtcbiAgICAgIH1cbiAgICB9Y2F0Y2goZSl7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgIHNldExvYWRlcihmYWxzZSk7XG4gICAgICBzZXRMb2dpbih0cnVlKTtcbiAgICB9XG4gIH1cbiAgICB1c2VFZmZlY3QoKCk9PiB7XG4gICAgICBvblRlc3QoKTtcbiAgICB9LFtdKVxuXG4gICAgY29uc3Qgb25Eb25hdGUgPSBhc3luYyhlKSA9PiB7XG4gICAgICB0cnl7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc2V0RG9uYXRlKGZhbHNlKTtcbiAgICAgICAgc2V0TG9hZGVyKHRydWUpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgICAgc2V0TG9hZGVyKGZhbHNlKTtcbiAgICAgICAgICBzZXRXZWxjb21lKHRydWUpO1xuICAgICAgICB9LDIwMDApO1xuICAgICAgfWNhdGNoKGUpe1xuICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgIH1cbiAgICB9XG4gIGNvbnN0IHsgcGVyZmlsSW1nLCBmdWxsTmFtZSwgd2FsbGV0IH0gPSB1c2VyO1xuICByZXR1cm4oXG4gICAgPGRpdiBjbGFzc05hbWU9XCJtYWluXCI+XG4gICAgICB7XG4gICAgICAgIGxvYWRlciAmJiA8ZGl2IGNsYXNzTmFtZT1cImxvYWRlclwiPjxTcGlubmVyIGNvbG9yPXsgY3VycmVudC50aXRsZSA9PT0gJ3NpZW1icmEnID8gJ21haW4tZ3JlZW4nIDogY3VycmVudC50aXRsZSA9PT0gJ2F5dWRhJyA/ICdtYWluLXJlZCcgOiAnbWFpbi1ibHVlJyB9IC8+PC9kaXY+XG4gICAgICB9XG4gICAgICB7XG4gICAgICAgIGxvZ2luICYmIDxkaXYgY2xhc3NOYW1lPVwibG9naW5cIj48TG9naW4gcHJpbT17IGN1cnJlbnQucHJpbSB9IHRpdGxlPXtjdXJyZW50LnRpdGxlfSAvPjwvZGl2PlxuICAgICAgfVxuICAgICAge1xuICAgICAgICBkb25hdGUgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFpbl9kb25hdGUgYW5pbWF0ZWQgZmFkZUluXCI+XG4gICAgICAgICAgICA8aGVhZGVyPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInVzZXIgYW5pbWF0ZWQgZmFkZUluIGRlbGF5LTFzXCI+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9e3BlcmZpbEltZ30gYWx0PVwiXCIvPlxuICAgICAgICAgICAgICAgIDxwPntmdWxsTmFtZX08L3A+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvdW5kIGFuaW1hdGVkIGZsaXBJblggZGVsYXktMnNcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9zdGF0aWMvZ3JlZW5jb2luLnN2Z1wiIGFsdD1cIlwiLz5cbiAgICAgICAgICAgICAgICA8cD57d2FsbGV0fTwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2hlYWRlcj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5pbWF0ZWQgZmFkZUluIGRlbGF5LTJzXCI+XG4gICAgICAgICAgICAgIDxoMT5Eb25hcjwvaDE+XG4gICAgICAgICAgICAgIDxwPkluZ3Jlc2EgdW4gbW9udG8gZW4gZ3JlZW5jb2lucywgbG9zIG1pc21vcyBzZXJhbiBkZXNjb250YWRvcyBkZSBzdSBjdWVudGEgeSBzZXJhbiByZWNpYmlkb3MgcG9yIGxhcyBvZ2FuaXphY2lvbmVzIHF1ZSBhcG95YW4gZXN0YSBjYXVzYS48L3A+XG4gICAgICAgICAgICAgIDxmb3JtIG1ldGhvZD1cIlBPU1RcIiBvblN1Ym1pdD17b25Eb25hdGV9PlxuICAgICAgICAgICAgICAgIDxpbnB1dCB2YWx1ZT17bW91bnR9IG9uQ2hhbmdlPXsoZSk9PiBzZXRNb3VudChlLmN1cnJlbnRUYXJnZXQudmFsdWUpfSB0eXBlPVwibnVtYmVyXCIvPlxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiPmRvbmFyPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgICB9XG4gICAgICB7XG4gICAgICAgIHdlbGNvbWUgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2VsY29tZSBhbmltYXRlZCBmYWRlSW5cIj5cbiAgICAgICAgICAgIDxoMT5GZWxpY2lkYWRlcywgeWEgZXJlcyBlbWJhamFkb3IgZGUgZXN0ZSBldmVudG88L2gxPlxuICAgICAgICAgICAgPHA+UG9kcmFzIHNlZ3VpciBsbyBxdWUgaGFjZW1vcyBjb24gdHUgY29sYWJvcmFjaW9uIGVuIGVsIHNpZ3VpZW50ZSA8YSBocmVmPVwiI1wiPkVubGFjZS48L2E+PC9wPlxuICAgICAgICAgICAgPHA+RGUgaWd1YWwgbWFuZXJhIGxhcyBhY3R1YWxpemFjaW9uZXMgZGVsIGV2ZW50byBzZXJhbiBwdWJsaWNhZGFzIGVuIHR1IG11cm8uPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgICB9XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIC5tYWlue1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaGVhZGVye1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAycmVtO1xuICAgICAgICB9XG4gICAgICAgIGhlYWRlciBwe1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgfVxuICAgICAgICAubG9hZGVye1xuICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgLmxvZ2lue1xuICAgICAgICAgIGhlaWdodDogNjAlO1xuICAgICAgICB9XG4gICAgICAgIC5tYWluX2RvbmF0ZSBoMXtcbiAgICAgICAgICBjb2xvcjogJHtjdXJyZW50LnByaW19O1xuICAgICAgICB9XG4gICAgICAgIC51c2VyIGltZ3tcbiAgICAgICAgICB3aWR0aDogODBweDtcbiAgICAgICAgICBoZWlnaHQ6IDgwcHg7XG4gICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgICAgb2JqZWN0LXBvc2l0aW9uOiBjZW50ZXI7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICB9XG4gICAgICAgIC5mb3VuZHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgLmZvdW5kIGltZ3tcbiAgICAgICAgICB3aWR0aDogMzBweDtcbiAgICAgICAgICBoZWlnaHQ6IDMwcHg7XG4gICAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgICAgb2JqZWN0LXBvc2l0aW9uOyBjZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXR7XG4gICAgICAgICAgd2lkdGg6IDYwcHg7XG4gICAgICAgIH1cbiAgICAgICAgLndlbGNvbWUgaDEsIGF7XG4gICAgICAgICAgY29sb3I6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgfVxuICAgICAgICAud2VsY29tZSBhe1xuICAgICAgICAgIGZvbnQtd2lnaHQ6IDU1MDtcbiAgICAgICAgfVxuICAgICAgICAud2VsY29tZSBwe1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgfVxuICAgICAgYH1cbiAgICAgIDwvc3R5bGU+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuY29uc3QgRXZlbnRzID0gKCkgPT4ge1xuICBjb25zdCBldmVudHMgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5ldmVudHMpO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHsgdmlzaWJsZSwgY3VycmVudCB9ID0gZXZlbnRzO1xuICBjb25zdCBbZG9uYXRlLCBzZXREb25hdGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICB1c2VFZmZlY3QoKCk9PiBzZXREb25hdGUodHJ1ZSksW3Zpc2libGVdKTtcbiAgcmV0dXJuKFxuICAgIDxNb2RhbCBpc09wZW49e3Zpc2libGV9IHN0eWxlPXt7IG1pbldpZHRoOiAnOTV2dycgfX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haW5cIj5cbiAgICAgICAgPGJ1dHRvbiB0aXRsZT1cIkNlcnJhclwiIG9uQ2xpY2s9eygpPT4gZGlzcGF0Y2goeyB0eXBlOiBPTl9FVkVOVCwgZXZlbnRUeXBlOiBudWxsIH0pfT5YPC9idXR0b24+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW1nXCI+XG4gICAgICAgICAgPGltZyBzcmM9e2N1cnJlbnQuaW1nfSBhbHQ9XCJcIi8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9cIj5cbiAgICAgICAgICB7XG4gICAgICAgICAgICBkb25hdGUgPyA8RG9uYXRlIGN1cnJlbnQ9e2N1cnJlbnR9IC8+IDogPEV2ZW50SG9tZSBjdXJyZW50PXtjdXJyZW50fSBzZXREb25hdGU9e3NldERvbmF0ZX0gLz5cbiAgICAgICAgICB9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8c3R5bGUganN4PntgXG4gICAgICAgICAgLm1haW57XG4gICAgICAgICAgICAvL2hlaWdodDogODB2aDtcbiAgICAgICAgICAgIGhlaWdodDogMTAwdmg7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLmltZywgLmluZm97XG4gICAgICAgICAgICAvL3dpZHRoOiA1MCU7XG4gICAgICAgICAgICAvL2hlaWdodDogMTAwJTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW1ne1xuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgICAgICAgICAgIG9iamVjdC1wb3NpdGlvbjogJHtjdXJyZW50LnByaW0gPT09IFwiIzAzYTdmMFwiID8gJ3RvcCcgOiAnYm90dG9tJyB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICAuaW5mb3tcbiAgICAgICAgICAgIHBhZGRpbmc6IC41cmVtIC41cmVtIC41cmVtIDFyZW07XG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnV0dG9ue1xuICAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAke2N1cnJlbnQucHJpbX07XG4gICAgICAgICAgICBjb2xvcjogJHtjdXJyZW50LnByaW19O1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogMjUwbXMgZWFzZTtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIHRvcDogLjVyZW07XG4gICAgICAgICAgICByaWdodDogLjVyZW07XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1dHRvbjpmb2N1c3tcbiAgICAgICAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1dHRvbjpob3ZlcntcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICR7Y3VycmVudC5wcmltfTtcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgIH1cbiAgICAgICAgYH1cbiAgICAgICAgPC9zdHlsZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvTW9kYWw+XG4gIClcbn1cblxuY29uc3QgTGF5b3V0ID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xuICByZXR1cm4oXG4gICAgPGRpdj5cbiAgICAgIDxIZWFkPlxuICAgICAgICA8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cIi9zdGF0aWMvYW5pbWF0ZS5taW4uY3NzXCIvPlxuICAgICAgICA8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cIi9zdGF0aWMvYW9zLmNzc1wiLz5cbiAgICAgICAgPGxpbmsgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1BcmNoaXZvK0JsYWNrfE9wZW4rU2Fuc3xQYWNpZmljbyZkaXNwbGF5PXN3YXBcIiByZWw9XCJzdHlsZXNoZWV0XCIvPlxuICAgICAgPC9IZWFkPlxuICAgICAgPG1haW4+XG4gICAgICAgIDxIZWFkZXIgLz5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8RXZlbnRzIC8+XG4gICAgICA8L21haW4+XG4gICAgICA8TWVudSAvPlxuICAgICAgPE15TW9kYWwgLz5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgZGl2e1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB9XG4gICAgICAgIG1haW57XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgIGZsZXg6IDEgMSAwO1xuICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIH1cbiAgICAgIGB9XG4gICAgICA8L3N0eWxlPlxuICAgIDwvZGl2PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IExheW91dDtcbiJdfQ== */\n/*@ sourceURL=/home/felix/Documentos/projects/greenlink/components/main/layout.jsx */`));\n};\n\nconst Donate = ({\n  current\n}) => {\n  const {\n    0: login,\n    1: setLogin\n  } = useState(false);\n  const {\n    0: donate,\n    1: setDonate\n  } = useState(false);\n  const {\n    0: welcome,\n    1: setWelcome\n  } = useState(false);\n  const {\n    0: loader,\n    1: setLoader\n  } = useState(false);\n  const {\n    0: mount,\n    1: setMount\n  } = useState(0);\n  const {\n    0: user,\n    1: setUser\n  } = useState({\n    fullName: 'star green',\n    perfilImg: '/static/random/r5.jpg'\n  });\n\n  const onTest = async () => {\n    try {\n      const res = await axios.get('/user/testLogin');\n\n      if (res.data) {\n        setLoader(false);\n        setUser(res.data);\n        setDonate(true);\n      }\n    } catch (e) {\n      console.log(e);\n      setLoader(false);\n      setLogin(true);\n    }\n  };\n\n  useEffect(() => {\n    onTest();\n  }, []);\n\n  const onDonate = async e => {\n    try {\n      e.preventDefault();\n      setDonate(false);\n      setLoader(true);\n      setTimeout(() => {\n        setLoader(false);\n        setWelcome(true);\n      }, 2000);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const {\n    perfilImg,\n    fullName,\n    wallet\n  } = user;\n  return __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]]) + \" \" + \"main\"\n  }, loader && __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]]) + \" \" + \"loader\"\n  }, __jsx(Spinner, {\n    color: current.title === 'siembra' ? 'main-green' : current.title === 'ayuda' ? 'main-red' : 'main-blue'\n  })), login && __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]]) + \" \" + \"login\"\n  }, __jsx(Login, {\n    prim: current.prim,\n    title: current.title\n  })), donate && __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]]) + \" \" + \"main_donate animated fadeIn\"\n  }, __jsx(\"header\", {\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]])\n  }, __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]]) + \" \" + \"user animated fadeIn delay-1s\"\n  }, __jsx(\"img\", {\n    src: perfilImg,\n    alt: \"\",\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]])\n  }), __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]])\n  }, fullName)), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]]) + \" \" + \"found animated flipInX delay-2s\"\n  }, __jsx(\"img\", {\n    src: \"/static/greencoin.svg\",\n    alt: \"\",\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]])\n  }), __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]])\n  }, wallet))), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]]) + \" \" + \"animated fadeIn delay-2s\"\n  }, __jsx(\"h1\", {\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]])\n  }, \"Donar\"), __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]])\n  }, \"Ingresa un monto en greencoins, los mismos seran descontados de su cuenta y seran recibidos por las oganizaciones que apoyan esta causa.\"), __jsx(\"form\", {\n    method: \"POST\",\n    onSubmit: onDonate,\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]])\n  }, __jsx(\"input\", {\n    value: mount,\n    onChange: e => setMount(e.currentTarget.value),\n    type: \"number\",\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]])\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]])\n  }, \"donar\")))), welcome && __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]]) + \" \" + \"welcome animated fadeIn\"\n  }, __jsx(\"h1\", {\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]])\n  }, \"Felicidades, ya eres embajador de este evento\"), __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]])\n  }, \"Podras seguir lo que hacemos con tu colaboracion en el siguiente \", __jsx(\"a\", {\n    href: \"#\",\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]])\n  }, \"Enlace.\")), __jsx(\"p\", {\n    className: _JSXStyle.dynamic([[\"2937250933\", [current.prim, current.prim]]])\n  }, \"De igual manera las actualizaciones del evento seran publicadas en tu muro.\")), __jsx(_JSXStyle, {\n    id: \"2937250933\",\n    dynamic: [current.prim, current.prim]\n  }, `.main.__jsx-style-dynamic-selector{height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}header.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-bottom:2rem;}header.__jsx-style-dynamic-selector p.__jsx-style-dynamic-selector{margin:0;}.loader.__jsx-style-dynamic-selector{height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.login.__jsx-style-dynamic-selector{height:60%;}.main_donate.__jsx-style-dynamic-selector h1.__jsx-style-dynamic-selector{color:${current.prim};}.user.__jsx-style-dynamic-selector img.__jsx-style-dynamic-selector{width:80px;height:80px;object-fit:cover;object-position:center;border-radius:50%;}.found.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.found.__jsx-style-dynamic-selector img.__jsx-style-dynamic-selector{width:30px;height:30px;object-fit:cover;object-position;center;}input.__jsx-style-dynamic-selector{width:60px;}.welcome.__jsx-style-dynamic-selector h1.__jsx-style-dynamic-selector,a.__jsx-style-dynamic-selector{color:${current.prim};}.welcome.__jsx-style-dynamic-selector a.__jsx-style-dynamic-selector{font-wight:550;}.welcome.__jsx-style-dynamic-selector p.__jsx-style-dynamic-selector{margin:0;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/felix/Documentos/projects/greenlink/components/main/layout.jsx */`));\n};\n\nconst Events = () => {\n  const events = useSelector(state => state.events);\n  const dispatch = useDispatch();\n  const {\n    visible,\n    current\n  } = events;\n  const {\n    0: donate,\n    1: setDonate\n  } = useState(false);\n  useEffect(() => setDonate(true), [visible]);\n  return __jsx(Modal, {\n    isOpen: visible,\n    style: {\n      minWidth: '95vw'\n    }\n  }, __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3619385905\", [current.prim === \"#03a7f0\" ? 'top' : 'bottom', current.prim, current.prim, current.prim]]]) + \" \" + \"main\"\n  }, __jsx(\"button\", {\n    title: \"Cerrar\",\n    onClick: () => dispatch({\n      type: ON_EVENT,\n      eventType: null\n    }),\n    className: _JSXStyle.dynamic([[\"3619385905\", [current.prim === \"#03a7f0\" ? 'top' : 'bottom', current.prim, current.prim, current.prim]]])\n  }, \"X\"), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3619385905\", [current.prim === \"#03a7f0\" ? 'top' : 'bottom', current.prim, current.prim, current.prim]]]) + \" \" + \"img\"\n  }, __jsx(\"img\", {\n    src: current.img,\n    alt: \"\",\n    className: _JSXStyle.dynamic([[\"3619385905\", [current.prim === \"#03a7f0\" ? 'top' : 'bottom', current.prim, current.prim, current.prim]]])\n  })), __jsx(\"div\", {\n    className: _JSXStyle.dynamic([[\"3619385905\", [current.prim === \"#03a7f0\" ? 'top' : 'bottom', current.prim, current.prim, current.prim]]]) + \" \" + \"info\"\n  }, donate ? __jsx(Donate, {\n    current: current\n  }) : __jsx(EventHome, {\n    current: current,\n    setDonate: setDonate\n  })), __jsx(_JSXStyle, {\n    id: \"3619385905\",\n    dynamic: [current.prim === \"#03a7f0\" ? 'top' : 'bottom', current.prim, current.prim, current.prim]\n  }, `.main.__jsx-style-dynamic-selector{height:100vh;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;position:relative;}img.__jsx-style-dynamic-selector{width:100%;height:100%;object-fit:cover;object-position:${current.prim === \"#03a7f0\" ? 'top' : 'bottom'};}.info.__jsx-style-dynamic-selector{padding:.5rem .5rem .5rem 1rem;height:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}button.__jsx-style-dynamic-selector{background:transparent;border:2px solid ${current.prim};color:${current.prim};-webkit-transition:250ms ease;transition:250ms ease;position:absolute;top:.5rem;right:.5rem;}button.__jsx-style-dynamic-selector:focus{outline:none;}button.__jsx-style-dynamic-selector:hover{background:${current.prim};color:#fff;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/felix/Documentos/projects/greenlink/components/main/layout.jsx */`)));\n};\n\nconst Layout = ({\n  children\n}) => {\n  return __jsx(\"div\", {\n    className: \"jsx-2044012869\"\n  }, __jsx(Head, null, __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"/static/animate.min.css\",\n    className: \"jsx-2044012869\"\n  }), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"/static/aos.css\",\n    className: \"jsx-2044012869\"\n  }), __jsx(\"link\", {\n    href: \"https://fonts.googleapis.com/css?family=Archivo+Black|Open+Sans|Pacifico&display=swap\",\n    rel: \"stylesheet\",\n    className: \"jsx-2044012869\"\n  })), __jsx(\"main\", {\n    className: \"jsx-2044012869\"\n  }, __jsx(Header, null), children, __jsx(Events, null)), __jsx(Menu, null), __jsx(MyModal, null), __jsx(_JSXStyle, {\n    id: \"2044012869\"\n  }, \"div.jsx-2044012869{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:100%;position:relative;}main.jsx-2044012869{width:100%;position:relative;-webkit-flex:1 1 0;-ms-flex:1 1 0;flex:1 1 0;overflow:hidden;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/home/felix/Documentos/projects/greenlink/components/main/layout.jsx */\"));\n};\n\nexport default Layout;","map":{"version":3,"sources":["/home/felix/Documentos/projects/greenlink/components/main/layout.jsx"],"names":["React","useState","useEffect","useReducer","useSelector","useDispatch","ON_EVENT","Head","Header","Menu","Router","axios","Popover","PopoverBody","Spinner","Modal","color","font","Title","Login","prim","title","mail","setMail","pass","setPass","mailPop","setMailPop","passPop","setPassPop","disable","setDisable","onSubmit","e","preventDefault","data","res","post","push","console","log","currentTarget","value","Register","setValue","state","next","name","lastName","birthday","genre","forEach","val","LogReg","children","MyModal","menu","main","nav","visible","login","register","EventHome","current","setDonate","subTitle","description","Donate","setLogin","donate","welcome","setWelcome","loader","setLoader","mount","setMount","user","setUser","fullName","perfilImg","onTest","get","onDonate","setTimeout","wallet","Events","events","dispatch","minWidth","type","eventType","img","Layout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ON_EVENT } from '../../store/actions';\n//import '../../node_modules/bootstrap/scss/bootstrap.scss';\nimport './base.scss';\nimport Head from 'next/head';\nimport Header from './header';\nimport Menu from './menu';\nimport Router from 'next/router';\nimport axios from 'axios';\nimport { Popover, PopoverBody, Spinner, Modal } from 'reactstrap';\nimport { color, font } from '../../layout/var';\nimport Title from '../main/title';\n\nconst Login = ({ prim, title }) => {\n\n  const [mail, setMail] = useState('');\n  const [pass, setPass] = useState('');\n  const [mailPop, setMailPop] = useState(false);\n  const [passPop, setPassPop] = useState(false);\n  const [disable, setDisable] = useState(false);\n\n  const onSubmit = async(e) => {\n    try{\n      e.preventDefault();\n      setDisable(true);\n      const data = {\n        mail,\n        pass\n      }\n      const res = await axios.post('/user/login', data);\n      if(res.data === 'mail') {\n         setMailPop(true);\n         return setDisable(false);\n      }\n      if(res.data === 'pass'){\n        setPassPop(true)\n        return setDisable(false);\n      };\n      Router.push(`/perfil/${res.data}`);\n    }catch(e){\n      console.log(e);\n    }\n  }\n\n  return(\n    <form onSubmit={onSubmit} method=\"POST\">\n      <header><h1>Iniciar Sesion</h1></header>\n      <div className=\"body\">\n        <label htmlFor=\"mail\">\n          <p>Usuario</p>\n          <input disabled={disable} onFocus={()=> setMailPop(false)} value={mail} onChange={(e)=> setMail(e.currentTarget.value)} type=\"text\" id=\"mail\" name=\"mail\"/>\n          <Popover target=\"mail\" placement=\"right\" isOpen={mailPop}>\n            <PopoverBody>El correo no es valido</PopoverBody>\n          </Popover>\n        </label>\n        <label htmlFor=\"pass\">\n          <p>contraseña</p>\n          <input disabled={disable} onFocus={()=> setPassPop(false)} value={pass} onChange={(e)=> setPass(e.currentTarget.value)} type=\"password\" name=\"pass\" id=\"pass\"/>\n          <Popover target=\"pass\" placement=\"right\" isOpen={passPop}>\n            <PopoverBody>La contraseña no es valida</PopoverBody>\n          </Popover>\n        </label>\n      </div>\n      <footer>\n        {\n          disable ? <Spinner color={ title === 'siembra' ? 'main-green' : title === 'ayuda' ? 'main-red' : 'main-blue' } /> : <button disabled={disable} type=\"submit\">Login</button>\n        }\n      </footer>\n      <style jsx>{`\n        form{\n          display: flex;\n          flex-direction: column;\n          justify-content: space-between;\n          align-items: center;\n          height: 100%;\n        }\n        header{\n          color: ${prim || color.prim};\n          margin-top: .5rem;\n        }\n        .body{\n          width: 100%;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n        }\n        label:nth-child(1){\n          margin-bottom: 1rem;\n        }\n        label p{\n          margin: 0;\n          color: rgba(0, 0, 0, .2);\n        }\n        input{\n          border: none;\n          border-bottom: 2px solid rgba(0, 0, 0, .2);\n        }\n        input:focus{\n          outline: none;\n          border-color: ${prim || color.prim};\n        }\n        footer{\n          display: flex;\n          width: 100%;\n          justify-content: flex-end;\n          padding: .5rem;\n        }\n        button{\n          background: transparent;\n          border: 2px solid ${prim || color.prim};\n          text-transform: uppercase;\n          transition: 250ms ease;\n          color: ${prim || color.prim};\n        }\n        button:focus{\n          outline: none;\n        }\n        button:hover{\n          background: ${prim || color.prim};\n          color: #fff;\n        }\n      `}\n      </style>\n    </form>\n  )\n}\n\nconst Register = () => {\n  const [value, setValue] = useReducer((state, next) => ({ ...state, ...next }),{\n    name: '',\n    lastName: '',\n    mail: '',\n    pass: '',\n    birthday: '',\n    genre: 'Mujer',\n  })\n  const [disable, setDisable] = useState(false);\n  const [mailPop, setMailPop] = useState(false);\n\n  const onSubmit = async(e) => {\n    try{\n      e.preventDefault();\n      const data = value;\n      const res = await axios.post('/user/register', data);\n      if(res.data === 'mail'){\n        setMailPop(true);\n        return setDisable(false);\n      }\n      Router.push(`/perfil/${res.data}`);\n    }catch(e){\n      console.log(e);\n    }\n  }\n\n  return(\n    <form onSubmit={onSubmit} method=\"POST\">\n      <header><h1>Registro</h1></header>\n      <div className=\"body\">\n        <div className=\"fullName\">\n          <input disabled={disable} value={value.name} onChange = {(e)=> setValue({ name: e.currentTarget.value })} type=\"text\" id=\"name\" placeholder=\"Nombre\"/>\n          <input disabled={disable} value={value.lastName} onChange = {(e)=> setValue({ lastName: e.currentTarget.value })} type=\"text\" id=\"lastName\" placeholder=\"Apellido\"/>\n        </div>\n        <input disabled={disable} value={value.mail} onChange = {(e)=> setValue({ mail: e.currentTarget.value })} onFocus={()=> setMailPop(false)} type=\"text\" id=\"mail\" placeholder=\"Correo electrónico\"/>\n        <Popover placement=\"bottom\" target=\"mail\" isOpen={mailPop}>\n          <PopoverBody>Ya existe una cuenta con este correo</PopoverBody>\n        </Popover>\n        <input disabled={disable} value={value.pass} onChange = {(e)=> setValue({ pass: e.currentTarget.value })} type=\"password\" id=\"pass\" placeholder=\"contraseña\"/>\n        <div className=\"birth_sex\">\n          <label htmlFor=\"birthday\">\n            <p>Cumpleaños</p>\n            <input disabled={disable} value={value.birthday} onChange = {(e)=> setValue({ birthday: e.currentTarget.value })} type=\"date\" name=\"birthday\" id=\"birthday\"/>\n          </label>\n          <label htmlFor=\"genre\">\n            <p>Genero</p>\n            <select disabled={disable} value={value.genre} onChange = {(e)=> setValue({ genre: e.currentTarget.value })} name=\"genre\" id=\"genre\">\n              <option value=\"mujer\">Mujer</option>\n              <option value=\"hombre\">Hombre</option>\n              <option value=\"otro\">Otro</option>\n            </select>\n          </label>\n        </div>\n      </div>\n      <footer>\n        <button type=\"button\" onClick={()=> Object.keys(value).forEach(val => setValue({ [val]: '' }))}>cancelar</button>\n        <button type=\"submit\">Enviar</button>\n      </footer>\n      <style jsx>{`\n        form{\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          width: 100%;\n          height: 100%;\n        }\n        header{\n          color: ${color.prim};\n        }\n        .body{\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          width: 100%;\n          height: 100%;\n          padding: .5rem;\n        }\n        input{\n          font-size: 12px;\n          width: 100%;\n          margin-bottom: 1rem;\n          padding-left: .5rem;\n        }\n        input[type=\"date\"]{\n          border: 1px solid rgba(0, 0, 0, .2);\n        }\n        .fullName{\n          display: flex;\n          width: 100%;\n          justify-content: center;\n          align-items: center;\n        }\n        .fullName input{\n        }\n        .fullName input:nth-child(2){\n          margin-left: .5rem;\n        }\n        .birth_sex{\n          display: flex;\n          justify-content: space-around;\n          width: 100%;\n        }\n        footer{\n          display: flex;\n          justify-content: flex-end;\n          align-items: center;\n          width: 100%;\n          padding: .5rem;\n        }\n        button{\n          background: transparent;\n          color: ${color.prim};\n          border: 2px solid ${color.prim};\n          transition: 250ms ease;\n          margin-left: .5rem;\n        }\n        button:focus{\n          outline: none;\n        }\n        button:hover{\n          color: #fff;\n          background: ${color.prim};\n        }\n      `}\n      </style>\n    </form>\n  )\n}\n\nconst LogReg = ({ children }) => {\n\n  return(\n    <div className=\"main_cont\">\n      <div className=\"main\">\n        <div className=\"publish\">\n        </div>\n        <div className=\"cont\">\n          {children}\n        </div>\n      </div>\n      <style jsx>{`\n        .main_cont{\n          height: 100vh;\n          width: 70%;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          position: relative;\n        }\n        .main{\n          height: 50%;\n          width: 80%;\n          background: #fff;\n          animation: down 600ms ease-in-out;\n          animation-fill-mode: forwards;\n          display: flex;\n        }\n        .publish{\n          width: 50%;\n          height: 100%;\n          background: url('/static/random/r16.jpg')top center no-repeat;\n          background-size: cover;\n        }\n        .cont{\n          width: 50%;\n        }\n        @keyframes down{\n          0%{\n            opacity: 0;\n            transform: translateY(-100%);\n          }\n          50%{\n            transform: translateY(50px);\n          }\n          100%{\n            opacity: 1;\n            transform: translateY(0px);\n          }\n        }\n      `}\n      </style>\n    </div>\n  )\n}\n\nconst MyModal = () => {\n  const menu = useSelector(state => state.main.nav.visible);\n  const main = useSelector(state => state.main.nav);\n  const { login, register } = main;\n  return(\n    <div className=\"modal\">\n      {\n        login && <LogReg><Login /></LogReg>\n      }\n      {\n        register && <LogReg><Register /></LogReg>\n      }\n      <style jsx>{`\n        .modal{\n          display: ${menu ? 'block' : 'none'};\n          position: fixed;\n          top: 0;\n          left: 0;\n          height: 100%;\n          width: 100%;\n          background: rgba(0, 0, 0, .5);\n          z-index: 150;\n          content: \" \";\n          transition: 250ms ease;\n        }\n      `}\n      </style>\n    </div>\n  )\n}\n\nconst EventHome = ({ current, setDonate }) => {\n\n  return(\n    <>\n      <header>\n        <div>\n          <h1>{current.title}</h1>\n          <p className=\"subTitle\">{current.subTitle}</p>\n        </div>\n      </header>\n      <div className=\"body\">\n        <p>{current.description}</p>\n      </div>\n      <footer>\n        <button>Participar</button>\n        <button onClick={()=> setDonate(true)}>Donar</button>\n      </footer>\n      <style jsx>{`\n        header{\n          display: flex;\n          justify-content: space-between;\n          align-items: flex-start;\n        }\n        header div{\n          display: flex;\n          flex-direction: column;\n          justify-content: flex-start;\n          align-items: flex-start;\n          margin: 5rem 0 1rem;\n        }\n        h1, p{\n          max-width: 100%;\n        }\n        header h1, .subTitle{\n          margin:0;\n          color: ${current.prim};\n          text-transform: uppercase;\n        }\n        button{\n          background: transparent;\n          border: 2px solid ${current.prim};\n          color: ${current.prim};\n          transition: 250ms ease;\n        }\n        button:focus{\n          outline: none;\n        }\n        button:hover{\n          background: ${current.prim};\n          color: #fff;\n        }\n        .body{\n          flex-grow: 1;\n        }\n        footer{\n          display: flex;\n          justify-content: flex-end;\n          align-items: center;\n        }\n        footer button{\n          margin-left: 1rem;\n        }\n      `}\n      </style>\n    </>\n  )\n}\n\nconst Donate = ({ current }) => {\n  const [login, setLogin] = useState(false);\n  const [donate, setDonate] = useState(false);\n  const [welcome, setWelcome] = useState(false);\n  const [loader, setLoader] = useState(false);\n  const [mount, setMount] = useState(0);\n  const [user, setUser] = useState({ fullName: 'star green', perfilImg: '/static/random/r5.jpg' });\n  const onTest = async()=> {\n    try{\n      const res = await axios.get('/user/testLogin');\n      if(res.data){\n        setLoader(false);\n        setUser(res.data);\n        setDonate(true);\n      }\n    }catch(e){\n      console.log(e);\n      setLoader(false);\n      setLogin(true);\n    }\n  }\n    useEffect(()=> {\n      onTest();\n    },[])\n\n    const onDonate = async(e) => {\n      try{\n        e.preventDefault();\n        setDonate(false);\n        setLoader(true);\n        setTimeout(()=>{\n          setLoader(false);\n          setWelcome(true);\n        },2000);\n      }catch(e){\n        console.log(e);\n      }\n    }\n  const { perfilImg, fullName, wallet } = user;\n  return(\n    <div className=\"main\">\n      {\n        loader && <div className=\"loader\"><Spinner color={ current.title === 'siembra' ? 'main-green' : current.title === 'ayuda' ? 'main-red' : 'main-blue' } /></div>\n      }\n      {\n        login && <div className=\"login\"><Login prim={ current.prim } title={current.title} /></div>\n      }\n      {\n        donate && (\n          <div className=\"main_donate animated fadeIn\">\n            <header>\n              <div className=\"user animated fadeIn delay-1s\">\n                <img src={perfilImg} alt=\"\"/>\n                <p>{fullName}</p>\n              </div>\n              <div className=\"found animated flipInX delay-2s\">\n                <img src=\"/static/greencoin.svg\" alt=\"\"/>\n                <p>{wallet}</p>\n              </div>\n            </header>\n            <div className=\"animated fadeIn delay-2s\">\n              <h1>Donar</h1>\n              <p>Ingresa un monto en greencoins, los mismos seran descontados de su cuenta y seran recibidos por las oganizaciones que apoyan esta causa.</p>\n              <form method=\"POST\" onSubmit={onDonate}>\n                <input value={mount} onChange={(e)=> setMount(e.currentTarget.value)} type=\"number\"/>\n                <button type=\"submit\">donar</button>\n              </form>\n            </div>\n          </div>\n        )\n      }\n      {\n        welcome && (\n          <div className=\"welcome animated fadeIn\">\n            <h1>Felicidades, ya eres embajador de este evento</h1>\n            <p>Podras seguir lo que hacemos con tu colaboracion en el siguiente <a href=\"#\">Enlace.</a></p>\n            <p>De igual manera las actualizaciones del evento seran publicadas en tu muro.</p>\n          </div>\n        )\n      }\n      <style jsx>{`\n        .main{\n          height: 100%;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        header{\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          margin-bottom: 2rem;\n        }\n        header p{\n          margin: 0;\n        }\n        .loader{\n          height: 100%;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        .login{\n          height: 60%;\n        }\n        .main_donate h1{\n          color: ${current.prim};\n        }\n        .user img{\n          width: 80px;\n          height: 80px;\n          object-fit: cover;\n          object-position: center;\n          border-radius: 50%;\n        }\n        .found{\n          display: flex;\n          align-items: center;\n        }\n        .found img{\n          width: 30px;\n          height: 30px;\n          object-fit: cover;\n          object-position; center;\n        }\n        input{\n          width: 60px;\n        }\n        .welcome h1, a{\n          color: ${current.prim};\n        }\n        .welcome a{\n          font-wight: 550;\n        }\n        .welcome p{\n          margin: 0;\n        }\n      `}\n      </style>\n    </div>\n  )\n}\n\nconst Events = () => {\n  const events = useSelector(state => state.events);\n  const dispatch = useDispatch();\n  const { visible, current } = events;\n  const [donate, setDonate] = useState(false);\n  useEffect(()=> setDonate(true),[visible]);\n  return(\n    <Modal isOpen={visible} style={{ minWidth: '95vw' }}>\n      <div className=\"main\">\n        <button title=\"Cerrar\" onClick={()=> dispatch({ type: ON_EVENT, eventType: null })}>X</button>\n        <div className=\"img\">\n          <img src={current.img} alt=\"\"/>\n        </div>\n        <div className=\"info\">\n          {\n            donate ? <Donate current={current} /> : <EventHome current={current} setDonate={setDonate} />\n          }\n        </div>\n        <style jsx>{`\n          .main{\n            //height: 80vh;\n            height: 100vh;\n            display: flex;\n            flex-direction: column;\n            position: relative;\n          }\n          .img, .info{\n            //width: 50%;\n            //height: 100%;\n          }\n          img{\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            object-position: ${current.prim === \"#03a7f0\" ? 'top' : 'bottom' };\n          }\n          .info{\n            padding: .5rem .5rem .5rem 1rem;\n            height: 100%;\n            display: flex;\n            flex-direction: column;\n          }\n          button{\n            background: transparent;\n            border: 2px solid ${current.prim};\n            color: ${current.prim};\n            transition: 250ms ease;\n            position: absolute;\n            top: .5rem;\n            right: .5rem;\n          }\n          button:focus{\n            outline: none;\n          }\n          button:hover{\n            background: ${current.prim};\n            color: #fff;\n          }\n        `}\n        </style>\n      </div>\n    </Modal>\n  )\n}\n\nconst Layout = ({ children }) => {\n  return(\n    <div>\n      <Head>\n        <link rel=\"stylesheet\" href=\"/static/animate.min.css\"/>\n        <link rel=\"stylesheet\" href=\"/static/aos.css\"/>\n        <link href=\"https://fonts.googleapis.com/css?family=Archivo+Black|Open+Sans|Pacifico&display=swap\" rel=\"stylesheet\"/>\n      </Head>\n      <main>\n        <Header />\n        {children}\n        <Events />\n      </main>\n      <Menu />\n      <MyModal />\n      <style jsx>{`\n        div{\n          display: flex;\n          width: 100%;\n          position: relative;\n        }\n        main{\n          width: 100%;\n          position: relative;\n          flex: 1 1 0;\n          overflow: hidden;\n        }\n      `}\n      </style>\n    </div>\n  )\n}\n\nexport default Layout;\n"]},"metadata":{},"sourceType":"module"}