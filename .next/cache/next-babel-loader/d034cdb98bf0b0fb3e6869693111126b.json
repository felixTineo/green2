{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { combineReducers } from 'redux';\nimport { ON_DOWN, ON_VIEW_NAV, navView, ON_NOTE, ON_NOTIFICATIONS, ON_LOADER } from './actions';\nexport const initialState = {\n  nav: {\n    loader: 0,\n    login: false,\n    down: false,\n    wallet: 0,\n    notifications: {\n      id: '',\n      notes: {\n        view: false,\n        items: []\n      },\n      gifts: {\n        view: false,\n        items: []\n      },\n      friendReq: {\n        view: false,\n        items: []\n      }\n    }\n  },\n  user: {\n    id: '',\n    owner: false,\n    mail: '',\n    pass: '',\n    name: '',\n    lastName: '',\n    birthday: '',\n    greenPost: '',\n    perfilImg: '',\n    originCity: '',\n    actualCity: '',\n    primaryShool: '',\n    secondarySchoool: '',\n    university: '',\n    job: '',\n    interest: [],\n    events: [],\n    friends: []\n  }\n};\n\nconst nav = (state = initialState.nav, action) => {\n  switch (action.type) {\n    case ON_DOWN:\n      return _Object$assign({}, state, {\n        down: action.option\n      });\n\n    case ON_NOTIFICATIONS:\n      return _Object$assign({}, state, {\n        notifications: action.notifications\n      });\n\n    case ON_LOADER:\n      return _Object$assign({}, state, {\n        loader: action.loader\n      });\n\n    case ON_VIEW_NAV:\n      if (action.note === navView.GIFT) {\n        return _Object$assign({}, state, {\n          notifications: _Object$assign({}, state.notifications, {\n            gifts: _Object$assign({}, state.notifications.gifts, {\n              view: true\n            })\n          })\n        });\n      }\n\n      if (action.note === navView.NOTES) {\n        return _Object$assign({}, state, {\n          notifications: _Object$assign({}, state.notifications, {\n            notes: _Object$assign({}, state.notifications.notes, {\n              view: true\n            })\n          })\n        });\n      }\n\n      if (action.note === navView.FRIEND) {\n        return _Object$assign({}, state, {\n          notifications: _Object$assign({}, state.notifications, {\n            friendReq: _Object$assign({}, state.notifications.friendReq, {\n              view: true\n            })\n          })\n        });\n      }\n\n    case ON_NOTE:\n      if (action.payload.note === navView.GIFT) {\n        return _Object$assign({}, state, {\n          notifications: _Object$assign({}, state.notifications, {\n            gifts: _Object$assign({}, state.notifications.gifts, {\n              view: false,\n              items: action.payload.items\n            })\n          })\n        });\n      }\n\n      if (action.payload.note === navView.NOTES) {\n        return _Object$assign({}, state, {\n          notifications: _Object$assign({}, state.notifications, {\n            notes: _Object$assign({}, state.notifications.notes, {\n              view: false,\n              items: action.payload.items\n            })\n          })\n        });\n      }\n\n      if (action.payload.note === navView.FRIEND) {\n        return _Object$assign({}, state, {\n          notifications: _Object$assign({}, state.notifications, {\n            friendReq: _Object$assign({}, state.notifications.friendReq, {\n              view: false,\n              items: action.payload.items\n            })\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst user = (state = initialState.user, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n\nexport const store = combineReducers({\n  nav,\n  user\n});","map":{"version":3,"sources":["/home/felix/Documentos/projects/greenlink/store/reducers.js"],"names":["combineReducers","ON_DOWN","ON_VIEW_NAV","navView","ON_NOTE","ON_NOTIFICATIONS","ON_LOADER","initialState","nav","loader","login","down","wallet","notifications","id","notes","view","items","gifts","friendReq","user","owner","mail","pass","name","lastName","birthday","greenPost","perfilImg","originCity","actualCity","primaryShool","secondarySchoool","university","job","interest","events","friends","state","action","type","option","note","GIFT","NOTES","FRIEND","payload","store"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\nimport { ON_DOWN, ON_VIEW_NAV, navView, ON_NOTE, ON_NOTIFICATIONS, ON_LOADER } from './actions';\n\nexport const initialState = {\n  nav:{\n    loader:0,\n    login: false,\n    down: false,\n    wallet: 0,\n    notifications: {\n      id: '',\n      notes: {\n        view: false,\n        items: [],\n      },\n      gifts: {\n        view: false,\n        items: [],\n      },\n      friendReq:{\n        view: false,\n        items: [],\n      },\n    },\n  },\n  user:{\n    id: '',\n    owner: false,\n    mail: '',\n    pass: '',\n    name: '',\n    lastName: '',\n    birthday: '',\n    greenPost: '',\n    perfilImg: '',\n    originCity: '',\n    actualCity: '',\n    primaryShool: '',\n    secondarySchoool: '',\n    university: '',\n    job: '',\n    interest: [],\n    events: [],\n    friends: [],\n  },\n};\n\nconst nav = (state= initialState.nav, action) => {\n  switch(action.type){\n    case ON_DOWN:\n      return Object.assign({}, state, { down: action.option });\n    case ON_NOTIFICATIONS:\n      return Object.assign({}, state, { notifications: action.notifications });\n    case ON_LOADER:\n      return Object.assign({}, state, { loader: action.loader });\n    case ON_VIEW_NAV:\n      if(action.note === navView.GIFT){\n        return Object.assign({}, state, {\n          notifications: Object.assign({}, state.notifications, {\n            gifts: Object.assign({}, state.notifications.gifts, { view: true }),\n          })\n        });\n      }\n      if(action.note === navView.NOTES){\n        return Object.assign({}, state, {\n          notifications: Object.assign({}, state.notifications, {\n            notes: Object.assign({}, state.notifications.notes, { view: true }),\n          })\n        });\n      }\n      if(action.note === navView.FRIEND){\n        return Object.assign({}, state, {\n          notifications: Object.assign({}, state.notifications, {\n            friendReq: Object.assign({}, state.notifications.friendReq, { view: true }),\n          })\n        });\n      }\n    case ON_NOTE:\n      if(action.payload.note === navView.GIFT){\n        return Object.assign({}, state, {\n          notifications: Object.assign({}, state.notifications, {\n            gifts: Object.assign({}, state.notifications.gifts, {\n              view: false,\n              items: action.payload.items,\n            })            \n          })\n        })\n      }\n      if(action.payload.note === navView.NOTES){\n        return Object.assign({}, state, {\n          notifications: Object.assign({}, state.notifications, {\n            notes: Object.assign({}, state.notifications.notes, {\n              view: false,\n              items: action.payload.items,\n            })            \n          })\n        })\n      }\n      if(action.payload.note === navView.FRIEND){\n        return Object.assign({}, state, {\n          notifications: Object.assign({}, state.notifications, {\n            friendReq: Object.assign({}, state.notifications.friendReq, {\n              view: false,\n              items: action.payload.items,\n            })            \n          })\n        })\n      }\n    default:\n      return state;\n  }\n};\n\nconst user = (state= initialState.user, action) => {\n  switch(action.type){\n    default:\n      return state;\n  }\n};\n\nexport const store = combineReducers({\n  nav,\n  user,\n});\n"]},"metadata":{},"sourceType":"module"}